msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title =
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "MEF and Sofis use Quarkus as core component of a new innovative architecture"
msgstr "MEFとSofisがQuarkusを新しい革新的なアーキテクチャのコアコンポーネントとして採用"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "About us"
msgstr "会社概要"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"The Ministry of Economy and Finance (MEF) of Uruguay is a government ministry. +\n"
"Website: https://www.gub.uy/ministerio-economia-finanzas"
msgstr ""
"ウルグアイ経済財務省（Ministry of Economy and Finance、MEF）は、ウルグアイ政府の省。\n"
"\n"
" ウェブサイト link:https://www.gub.uy/ministerio-economia-finanzas[：https://www.gub.uy/ministerio-economia-finanzas]"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"Sofis Solutions is a company with more than 18 years of experience in the digital transformation of Latin American organizations and technological inclusion. Focuses mainly on projects for the development of digital government and the resolution of social, environmental and governance problems. +\n"
"Website: https://www.sofis.lat"
msgstr ""
"ソフィス・ソリューションズは、ラテンアメリカの組織のデジタルトランスフォーメーションとテクノロジーインクルージョンにおいて18年以上の経験を持つ企業です。主にデジタル政府の発展と社会、環境、ガバナンス問題の解決に向けたプロジェクトに注力。\n"
"\n"
" ウェブサイト link:https://www.sofis.lat[：https://www.sofis.lat]"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Problem statement"
msgstr "問題提起"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"The current Integrated Financial Information System (SIIF) of the Uruguayan Ministry of Economy and Finance relies on Oracle Forms, which presents certain drawbacks such as limited compatibility, inflexibility, high maintenance costs, and limited support. To ensure long-term viability and modernization, an architecture update is needed. The main objective is to establish a scalable reference architecture that enables SIIF to evolve as part of the modernization process.\n"
"In late 2021 an architecture team was formed, and work began following the https://pubs.opengroup.org/architecture/togaf92-doc/arch/[TOGAF Architecture Development Method 9.2]."
msgstr "ウルグアイ経済財務省の現在の統合財務情報システム（SIIF）はOracle Formsに依存しており、互換性の制限、柔軟性の低さ、メンテナンスコストの高さ、サポートの制限などの欠点があります。長期的な実行可能性と近代化を確保するためには、アーキテクチャの更新が必要です。主な目的は、近代化プロセスの一環としてSIIFを進化させることができる拡張性のあるリファレンスアーキテクチャを確立することです。2021年後半にアーキテクチャチームが結成され、 link:https://pubs.opengroup.org/architecture/togaf92-doc/arch/[TOGAFアーキテクチャ開発手法9.2に従って] 作業が開始されました。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Key requirements"
msgstr "主な要件"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The key requirements of this modernized architecture were:"
msgstr "この近代化されたアーキテクチャの主な要件は以下の通りである："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "It must be possible to audit transactions and changes made to entities."
msgstr "トランザクションやエンティティに加えられた変更を監査できなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "During runtime, software systems should generate metrics that provide visibility into the operational status of each component. These metrics should be accessible through a centralized monitoring platform, which should enable the visualization of the current status and generation of alerts."
msgstr "実行中、ソフトウェア・システムは、各コンポーネントの動作ステータスを可視化するメトリクスを生成する必要がある。これらのメトリクスは、一元化された監視プラットフォームを通じてアクセスできるようにし、現在のステータスの可視化とアラートの生成を可能にする必要がある。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Under normal production conditions, the system must respond with a latency of less than one second."
msgstr "通常の生産条件下では、システムは1秒未満の待ち時間で応答しなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "A monthly availability of the solution of 99% is required within office hours and 95% outside of office hours."
msgstr "営業時間内では月間99％、営業時間外では月間95％の可用性が要求される。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Systems should be able to handle an increasing workload, such as the addition of new user groups, higher volumes of traffic, or more complex transactions, by utilizing horizontal scaling techniques. Services must be deployed as Docker containers."
msgstr "システムは、水平スケーリング技術を利用することで、新しいユーザー・グループの追加、より大量のトラフィック、より複雑なトランザクションなど、増加するワークロードに対応できなければならない。サービスはDockerコンテナとしてデプロイされなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Communication between systems using REST (preferred) and SOAP (legacy) protocols must be supported."
msgstr "REST（推奨）およびSOAP（レガシー）プロトコルを使用したシステム間の通信をサポートしなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Software must be able to be tested on a unitary, integration and system-wide basis."
msgstr "ソフトウェアは、単体、統合、システム全体でテストできなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The central data repository of the transactional system must maintain permanent data integrity and consistency. This consistency must be ensured despite technical failures or crashes of other components."
msgstr "トランザクションシステムの中央データリポジトリは、永続的なデータの完全性と一貫性を維持しなければならない。この一貫性は、他のコンポーネントの技術的な故障やクラッシュにもかかわらず確保されなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "All the log data and exceptions must be properly captured and centrally managed."
msgstr "すべてのログデータと例外は適切に取得され、一元管理されなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Software that is being developed should be highly configurable to ensure it can be deployed across various installation environments, such as development, testing, pre-production, production, etc. without the need for recompiling it for each environment."
msgstr "開発中のソフトウェアは、開発、テスト、プリプロダクション、プロダクションなど、さまざまなインストール環境にわたって、環境ごとに再コンパイルすることなくデプロイできるように、高度に設定可能でなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Components should easily integrate with distributed event streaming platforms as Kafka."
msgstr "コンポーネントは、Kafkaのような分散イベント・ストリーミング・プラットフォームと簡単に統合できなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Framework utilized must enhance developer experience. Live reload while coding is highly valuable."
msgstr "利用されるフレームワークは、開発者のエクスペリエンスを向上させるものでなければならない。コーディング中のライブリロードは非常に価値がある。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Coding must be aligned with Java EE and MicroProfile ecosystems."
msgstr "Java EEとMicroProfileのエコシステムに沿ったコーディングであること。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Components must provide a mechanism that allows health monitoring through the health monitor of the platform."
msgstr "コンポーネントは、プラットフォームのヘルスモニターを通じてヘルスモニタリングを可能にするメカニズムを提供しなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We selected Quarkus as the framework for our backends based on its ability to fulfill all our critical requirements. Its extensive features, capabilities, and active community were precisely what we were looking for, making it an essential tool for our projects."
msgstr "私たちは、Quarkusをバックエンドのフレームワークとして選択しました。Quarkusのエクステンション、機能、活発なコミュニティは、まさに私たちが求めていたものであり、私たちのプロジェクトにとって必要不可欠なツールとなりました。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The architecture diagrams are made following the https://c4model.com/[C4 model]. Systems are composed of modules implemented using a macroservices approach that are larger than microservices but smaller than monolithic applications. A simplified version of the system landscape is presented below:"
msgstr "アーキテクチャ図は link:https://c4model.com/[C4モデル] に従って作成されている。システムは、マイクロサービスよりは大きいがモノリシック・アプリケーションよりは小さい、マクロサービス・アプローチで実装されたモジュールで構成される。システム・ランドスケープの簡略版を以下に示す："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Description:"
msgstr "説明"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "System 1 to N. Can be any of the systems used in MEF."
msgstr "システム1～N。MEFで使用されているシステムのいずれでもよい。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Security system. Management of users, roles, operations, audit logs, etc."
msgstr "セキュリティシステム。ユーザー、ロール、オペレーション、監査ログなどの管理。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "https://mi.iduruguay.gub.uy/[ID Uruguay]. AGESIC Identity and Authentication Provider. Users must start an OAuth2 authentication flow against this provider via MEF applications."
msgstr "link:https://mi.iduruguay.gub.uy/[IDウルグアイ] 。AGESIC Identity and Authentication Provider。ユーザーは、MEFアプリケーションを介してこのプロバイダに対してOAuth2認証フローを開始する必要があります。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "External system. Represents an external system that consumes MEF APIs."
msgstr "外部システム。MEF APIを消費する外部システムを表す。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "In addition to the internal systems, some of the most relevant tools we use are:"
msgstr "社内システムに加えて、私たちが使用している最も関連性の高いツールには以下のものがある："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Kubernetes. Container orchestrator."
msgstr "Kubernetes。コンテナ・オーケストレーター。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Ceph. Storage platform."
msgstr "Ceph。ストレージプラットフォーム。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Elasticsearch, Fluentd, Kibana stack. Storage and visualization of log and audit data."
msgstr "Elasticsearch、Fluentd、Kibanaスタック。ログと監査データの保存と可視化。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Prometheus, Alertmanager, Grafana stack. Visualization of infrastructure and services metrics. Also responsible for generating alerts."
msgstr "Prometheus、Alertmanager、Grafanaスタック。インフラとサービスメトリクスの可視化。アラート生成も担当。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Matomo. Used to obtain user analytics and their behavior on websites."
msgstr "マトモ。ユーザー分析およびウェブサイト上での行動を取得するために使用されます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Apache Kafka. Distributed event streaming platform."
msgstr "Apache Kafka。分散イベントストリーミングプラットフォーム。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Apache APISIX API Gateway. Manage and expose APIs."
msgstr "Apache APISIX API Gateway。APIの管理と公開"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "ArgoCD. GitOps continuous delivery tool."
msgstr "ArgoCD。GitOps継続的デリバリーツール。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "GitLab. Code repository and CI/CD DevOps tool."
msgstr "GitLab.コードリポジトリ、CI/CD DevOpsツール。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Nexus. Repository for libraries and Docker images."
msgstr "Nexus。ライブラリやDockerイメージのリポジトリ。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "SonarQube. Static code analysis tool."
msgstr "SonarQube。静的コード解析ツール。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, no-wrap
msgid "Kubernetes"
msgstr "Kubernetes"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Kubernetes is an open-source container orchestration system for automating software deployment, scaling, and management. The combination of Quarkus and Kubernetes provides an ideal environment for creating scalable, fast, and lightweight applications. Our applications and tools are deployed in two on-premise Kubernetes clusters for production and non-production environments."
msgstr "Kubernetesは、ソフトウェアのデプロイ、スケーリング、管理を自動化するためのオープンソースのコンテナオーケストレーションシステムです。QuarkusとKubernetesの組み合わせは、スケーラブルで高速かつ軽量なアプリケーションを作成するための理想的な環境を提供します。Quarkusのアプリケーションとツールは、本番環境用と非本番環境用の2つのオンプレミスKubernetesクラスタにデプロイされています。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "ArgoCD and Kustomize"
msgstr "アルゴCDとカスタマイズ"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "ArgoCD is a Kubernetes operator that utilizes CRDs (Custom Resource Definitions) to configure its operation. These CRDs enable the definition of infrastructure through Git-stored files and automate deployment following any changes made."
msgstr "ArgoCDは、CRD（Custom Resource Definitions）を利用して運用を設定するKubernetesオペレータです。これらのCRDは、Gitに保存されたファイルを通じてインフラストラクチャの定義を可能にし、変更後のデプロイを自動化します。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Kustomize adheres to Kubernetes principles by leveraging Kubernetes objects to define configuration files and manage these configurations declaratively. A Kustomization object defines how to generate or transform other Kubernetes objects and is created in a file named kustomization.yaml, which can be edited by Kustomize itself. Kustomizations can be patched with overlays to overwrite base settings and create variants. ArgoCD offers seamless Kustomize support, allowing for more efficient and effective management of Kubernetes configurations."
msgstr "Kustomizeは、Kubernetesオブジェクトを活用して設定ファイルを定義し、これらの設定を宣言的に管理することで、Kubernetesの原則に準拠しています。Kustomizationオブジェクトは、他のKubernetesオブジェクトを生成または変換する方法を定義し、kustomization.yamlという名前のファイルに作成されます。Kustomizationはオーバーレイでパッチを適用してベース設定を上書きし、バリアントを作成することができます。ArgoCDはシームレスなKustomizeサポートを提供し、Kubernetes設定をより効率的かつ効果的に管理することができます。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Ceph"
msgstr "セフ"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Ceph is an open source software-defined storage platform that implements object storage on a single distributed computer cluster and provides 3-in-1 interfaces for object, block and file level storage. We have two on-premise clusters (prod and non-prod) that are integrated with our Kubernetes clusters."
msgstr "CephはオープンソースのSoftware-Defined Storageプラットフォームで、単一の分散コンピュータクラスタ上にオブジェクトストレージを実装し、オブジェクト、ブロック、ファイルレベルのストレージのための3-in-1インタフェースを提供します。私たちはKubernetesクラスタと統合された2つのオンプレミスクラスタ（prodとnon-prod）を持っています。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "CI/CD"
msgstr "CI/CD"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We are currently using a customized CI/CD flow based primarily on https://nvie.com/posts/a-successful-git-branching-model/[A successful Git branching model]. All the CI/CD tasks are implemented using GitLab."
msgstr "私たちは現在、主に link:https://nvie.com/posts/a-successful-git-branching-model/[成功したGitブランチモデル] をベースにカスタマイズしたCI/CDフローを使っています。すべての CI/CD タスクは GitLab を使って実装されています。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We follow the \"build once deploy anywhere\" approach whenever possible. The code is built using s2i (source to image) and the images are propagated through the different environments (development, integration, test/QA, training, preprod and production)."
msgstr "私たちは、可能な限り \"build once deploy anywhere \"アプローチに従っている。コードはs2i（ソースからイメージへ）を使ってビルドされ、イメージはさまざまな環境（開発、統合、テスト/QA、トレーニング、プリプロ、本番）を通じて伝播される。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Our type of development requires us to have 3 unique long lived branches per project:"
msgstr "私たちのようなタイプの開発では、1つのプロジェクトにつき3つのユニークな長期ブランチを持つ必要がある："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Main. Where all the developers continuously merge their new features."
msgstr "メイン。すべての開発者が継続的に新機能をマージする場所だ。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Release. When the code in main is ready to be released to QA, it is merged to the release branch. Release can be evolved independently of main while bugfixes are applied."
msgstr "リリース。mainのコードがQAにリリースできる状態になると、releaseブランチにマージされる。releaseは、バグフィックスが適用されている間、mainから独立して進化させることができます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Production. Where the code released to production is. Hotfixes branches are created from it."
msgstr "プロダクション。本番環境にリリースされるコード。Hotfixブランチはここから作成されます。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The Prometheus-Grafana combination has become one of the most popular solutions for monitoring, alerting, and visualization in the cloud-native space. Prometheus is an open source systems monitoring and alerting toolkit. Grafana is a multi-platform open source analytics and interactive visualization web application. It provides out of the box support to display data collected by Prometheus."
msgstr "PrometheusとGrafanaの組み合わせは、クラウドネイティブ空間におけるモニタリング、アラート、可視化のための最も人気のあるソリューションの1つとなっている。Prometheusはオープンソースのシステムモニタリングとアラートツールキットです。Grafanaは、マルチプラットフォームのオープンソース分析およびインタラクティブな可視化Webアプリケーションです。Prometheusによって収集されたデータを表示するためのアウトオブザボックスのサポートを提供します。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "With them, we can gather, visualize and react to metrics from Kubernetes, CephFS, Apache APISIX, Elasticsearch, Kafka, Zookeeper, databases, backends, frontends and more."
msgstr "これらを使って、Kubernetes、CephFS、Apache APISIX、Elasticsearch、Kafka、Zookeeper、データベース、バックエンド、フロントエンドなどからメトリクスを収集し、可視化し、対応することができる。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "To start exposing metrics with Quarkus, the `quarkus-micrometer-registry-prometheus` extension must be added. This allows us to get interesting metrics about our application as CPU, heap, non heap, http requests, etc. With the default HTTP metrics exposed, we are able to get the following insights by method:"
msgstr "Quarkusでメトリクスを公開するには、 `quarkus-micrometer-registry-prometheus` エクステンションを追加する必要があります。これにより、CPU、ヒープ、非ヒープ、httpリクエストなど、アプリケーションに関する興味深いメトリクスを取得できるようになります。デフォルトの HTTP メトリクスを公開すると、メソッド別に次のような洞察を得ることができます："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Total number of requests"
msgstr "リクエスト総数"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Maximum request duration"
msgstr "最大リクエスト時間"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Average request duration"
msgstr "平均リクエスト時間"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Sum of the duration of every request"
msgstr "各リクエストの継続時間の合計"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "To determine whether the maximum request duration is an isolated case or is occurring on many requests, percentiles must be used."
msgstr "最大リクエスト時間が孤立したケースなのか、それとも多くのリクエストで発生しているのかを判断するには、パーセンタイルを使用しなければならない。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Percentiles"
msgstr "パーセンタイル"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"A percentile is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. For example, the response time for a HTTP request below which 90% of the response time values lie, is called the 90-percentile response time.\n"
"The recommended way to calculate percentiles is using the \"Percentiles Histogram\" approach. See https://micrometer.io/docs/concepts#_histograms_and_percentiles.\n"
"Quarkus (and Micrometer) let you enable this kind of metric by defining a `@Singleton` MeterFilterProducer. Example code below:"
msgstr "パーセンタイルとは、統計学で使われる指標で、オブザベーションのグループ中のオブザベーションのあるパーセンテージが、どの値以下になるかを示すものです。例えば、HTTPリクエストのレスポンスタイムは、レスポンスタイムの値の90%がそれ以下であり、90パーセンタイル・レスポンスタイムと呼ばれます。パーセンタイルを計算する推奨の方法は、\"パーセンタイル・ヒストグラム \"アプローチを使用することです。 https://micrometer.io/docs/concepts#_histograms_and_percentiles を参照してください。Quarkus（およびMicrometer）では、 `@Singleton` MeterFilterProducerを定義することで、この種のメトリックを有効にできます。以下のコード例："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "With this new exposed metrics we can define, for example:"
msgstr "この新しい公開されたメトリクスを使えば、例えば次のような定義ができる："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "An alert in Prometheus that will fire when the 95 percentile request duration time is above 300ms."
msgstr "Prometheusのアラートは、95パーセンタイルのリクエスト継続時間が300msを超えると発生します。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "An interactive chart in Grafana to display some desired percentiles as 50, 75, 90, 95, 99 and 1:"
msgstr "50、75、90、95、99、および1として希望するパーセンタイルを表示するためのGrafanaのインタラクティブチャート："

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Authentication and authorization"
msgstr "認証と認可"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Our API security is implemented with Json Web Tokens. We have a centralized auth service that generates JWT, which are used by users and applications to consume the exposed APIs. Every backend has access to the public key and can validate the signature on their own. For protecting the endpoints, the `@RolesAllowed` annotation is being used. In addition to that, the `quarkus-security` extension must be added."
msgstr "当社のAPIセキュリティはJson Web Tokensで実装されています。私たちはJWTを生成する集中型の認証サービスを持っており、公開されたAPIを利用するユーザーやアプリケーションによって使用されます。すべてのバックエンドは公開鍵にアクセスでき、独自に署名を検証できる。エンドポイントを保護するために、 `@RolesAllowed` アノテーションが使用されている。それに加えて、 `quarkus-security` エクステンションを追加する必要がある。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "You may already be familiar with the \"groups\" attribute in JSON Web Tokens (JWTs), which typically maps to the `@RolesAllowed` property in many jwt-security validation libraries. However, this approach assumes that roles need to be hardcoded, which may not always be suitable. In our case, we wanted the security on the endpoints to be operation-oriented, so that a user can have dynamic roles, with different operations. To accomplish this:"
msgstr "JSON ウェブトークン（JWT）の \"groups \"属性は、すでにお馴染みかもしれません。これは通常、多くの jwt-security 検証ライブラリの `@RolesAllowed` プロパティにマップされます。しかし、このアプローチは、ロールをハードコードする必要があることを前提としており、必ずしも適切とは限りません。私たちの場合、エンドポイントのセキュリティは操作指向であり、ユーザが異なる操作を持つ動的なロールを持つことができるようにしたいと考えました。そのためには"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Each endpoint must be mapped to a single operation."
msgstr "各エンドポイントは、単一のオペレーションにマッピングされなければならない。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "A way to map between JWT groups and operations is needed. Storing operations in the groups attribute of a JWT is not ideal, as the array could be significant, resulting in a large token."
msgstr "JWTグループとオペレーションをマッピングする方法が必要である。JWTのgroups属性にoperationsを格納するのは理想的ではない。"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"We decided to implement the JWT validation using a `ContainerRequestFilter`, as exposed in https://quarkus.io/guides/security-customization#jaxrs-security-context. In that filter the JWT groups are obtained and a cached method with `@CacheResult` is invoked to obtain the related operations.\n"
"As of today, we are using a memory cache with Caffeine for simplicity, but the new Redis as cache backend introduced in Quarkus 3 seems to be a good alternative, as we would be able to share the cache between all the instances. See https://quarkus.io/version/main/guides/cache-redis-reference."
msgstr "私たちは、 https://quarkus.io/guides/security-customization#jaxrs-security link:https://quarkus.io/guides/security-customization#jaxrs-security-context[-context] で公開されているように、 `ContainerRequestFilter` を使ってJWT検証を実装することにしました link:https://quarkus.io/guides/security-customization#jaxrs-security-context[。] このフィルターでは、JWTグループが取得され、関連する操作を取得するために `@CacheResult` のキャッシュメソッドが呼び出されます。現時点では、シンプルにするためにCaffeineのメモリキャッシュを使用していますが、Quarkus 3で導入されたキャッシュバックエンドとしての新しいRedisは、すべてのインスタンス間でキャッシュを共有することができるため、良い代替になりそうです。 link:https://quarkus.io/version/main/guides/cache-redis-reference[https://quarkus.io/version/main/guides/cache-redis-reference。]"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The `SecurityContext` `isUserInRole` method is overrided as:"
msgstr "`SecurityContext` `isUserInRole` メソッドは次のようにオーバーライドされる："

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Audit requests"
msgstr "監査リクエスト"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "A common requirement is to audit the requests that are made to our APIs. It was decided to:"
msgstr "一般的な要件は、APIへのリクエストを監査することです。それは以下のように決定された："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Store it as data streams in Elasticsearch."
msgstr "Elasticsearchにデータストリームとして保存する。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Store it asynchronously, without interfering with the request."
msgstr "リクエストに干渉することなく、非同期に格納する。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Always audit POST, PUT, PATCH, and DELETE methods. In a few special cases also GET methods."
msgstr "常にPOST、PUT、PATCH、DELETEメソッドを監査する。いくつかの特殊なケースでは、GETメソッドも。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We wanted to audit params like service, requestDate, responseDate, method, baseUri, path, queryParams, userId, ip, traceId, traceApplicationChain, responseStatus, requestBody (optional) and responseBody (optional)."
msgstr "service、requestDate、responseDate、method、baseUri、path、queryParams、userId、ip、traceId、traceApplicationChain、responseStatus、requestBody（オプション）、responseBody（オプション）のようなパラメータを監査したかった。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "For doing so, we implemented some utility classes:"
msgstr "そのために、いくつかのユーティリティ・クラスを実装した："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "A `ContainerRequestFilter`, to get some params such as request start date and propagate them through `ContainerRequestContext`."
msgstr "`ContainerRequestFilter` , リクエスト開始日などのパラメータを取得し、 `ContainerRequestContext` を介してそれらを伝搬する。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "A `ContainerResponseFilter`, to get the rest of the params and invoke a method in charge of sending an audit event to a Kafka topic. We decided to send the event only in the response filter for performance reasons, assuming that there can be minimal loss if it is not invoked."
msgstr "`ContainerResponseFilter` , 残りのパラメータを取得し、Kafkaトピックに監査イベントを送信するメソッドを呼び出す。パフォーマンス上の理由から、イベントを送信するのはレスポンスフィルターのみとした。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "An `@AuditedEndpoint` annotation, used to identify and customize the methods that we want to audit. The API methods not annotated, are ignored by the filter. This annotation has two boolean parameters that can be customized at method level: `auditRequestBody` (true by default) and `auditResponseBody` (false by default)."
msgstr "`@AuditedEndpoint` アノテーション。監査したいメソッドを特定し、カスタマイズするために使用する。アノテーションのない API メソッドはフィルタによって無視されます。このアノテーションには、メソッド・レベルでカスタマイズできる 2 つのブーリアン・パラメータがあります。 `auditRequestBody` (デフォルトは true) と `auditResponseBody` (デフォルトは false) です。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Sending an imperative event to Kafka can be done with an Emitter (see https://quarkus.io/guides/kafka#sending-messages-with-emitter). The `quarkus-smallrye-reactive-messaging-kafka` extension has to be added."
msgstr "Kafkaに命令型イベントを送信するには、Emitterを使用します（ https://quarkus.io/guides/kafka#sending-messages-with-emitter を参照 link:https://quarkus.io/guides/kafka#sending-messages-with-emitter[）] 。 `quarkus-smallrye-reactive-messaging-kafka` エクステンションを追加する必要があります。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "After we have the events in the topic, we need a way to process and store them in Elasticsearch. To perform this task, we are using the Elasticsearch Service Sink Connector deployed within Kafka Connect. Kafka Connect is a tool for scalably and reliably streaming data between Apache Kafka and other data systems. It makes it simple to quickly define connectors that move large data sets in and out of Kafka. See https://docs.confluent.io/platform/current/connect/index.html."
msgstr "トピックにイベントを格納したら、それを処理して Elasticsearch に格納する必要があります。このタスクを実行するために、Kafka Connect内にデプロイされたElasticsearch Service Sink Connectorを使用します。Kafka Connectは、Apache Kafkaと他のデータシステム間でデータをスケーラブルかつ確実にストリーミングするためのツールです。大規模なデータセットを Kafka に出し入れするコネクタを簡単に定義できます。 link:https://docs.confluent.io/platform/current/connect/index.html[https://docs.confluent.io/platform/current/connect/index.html。]"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "In addition, we are also employing Hibernate Envers for entity-oriented auditing."
msgstr "さらに、エンティティ指向の監査のためにHibernate Enversも採用しています。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Besides audit event processing, Kafka will be used as a mechanism for communication between services (and systems) that have independent databases."
msgstr "監査イベント処理以外にも、Kafkaは独立したデータベースを持つサービス（およびシステム）間の通信メカニズムとして使用される。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Database schemas and migrations"
msgstr "データベーススキーマとマイグレーション"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We have several environments e.g. development, integration, test/QA, training, preprod and production.  It is necessary to automate the execution of the scripts as the services are deployed in the different environments. Flyway is a great tool to achieve that. It allows you to:"
msgstr "開発、統合、テスト/QA、トレーニング、プリプロ、本番など、複数の環境があります。サービスが異なる環境にデプロイされる際には、スクリプトの実行を自動化する必要があります。Flywayはそのための優れたツールです。これにより、以下のことが可能になります："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Recreate a database from scratch."
msgstr "データベースをゼロから再作成する。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Make it clear at all times what state a database is in."
msgstr "データベースがどのような状態にあるかを常に明確にする。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Migrate in a deterministic way from your current version of the database to a newer one."
msgstr "データベースの現在のバージョンから新しいバージョンへ、決定論的な方法で移行する。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The `quarkus-flyway` extension is needed. When running tests, or deploying the service, the migration functionality will kick in to apply the necessary scripts."
msgstr "`quarkus-flyway` エクステンションが必要です。テストを実行するとき、あるいはサービスをデプロイするとき、必要なスクリプトを適用するためにマイグレーション機能が働きます。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Our custom case (1)"
msgstr "カスタムケース (1)"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Our system types require having groups of services sharing a single database (see https://microservices.io/patterns/data/shared-database.html). Additionaly, in some cases, legacy databases exist. Recreating the full structure from scratch with new migrations is a difficult task."
msgstr "我々のシステム・タイプでは、サービス・グループが単一のデータベースを共有する必要がある link:https://microservices.io/patterns/data/shared-database.html[（https://microservices.io/patterns/data/shared-database.html 参照）] 。さらに、レガシーデータベースが存在する場合もある。新しいマイグレーションでゼロから完全な構造を作り直すのは困難な作業です。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Decisions and implications:"
msgstr "決断とその意味"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "For legacy databases, a Flyway \"baseline\" should be created with the current state, and migrations applied after that point."
msgstr "レガシーデータベースの場合、現在の状態でFlywayの「ベースライン」を作成し、それ以降の移行を適用する必要があります。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Each service has its own schema in the database and is responsible for its evolution. A `flyway_schema_history` table by schema is needed."
msgstr "各サービスはデータベースに独自のスキーマを持ち、その進化に責任を持つ。スキーマ別の `flyway_schema_history` テーブルが必要である。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "In certain cases, a table in schema A can have a foreign key to schema B. Therefore, one service may need structures from another in order to run correctly. This enforces that the service owner of schema B must be released before the owner of schema A. As a common rule, we avoid if possible having bidirectional foreign keys between A and B."
msgstr "ある場合には、スキーマAのテーブルがスキーマBへの外部キーを持つことがある。したがって、あるサービスを正しく実行するためには、別のサービスの構造体が必要になることがある。このため、スキーマBのサービスオーナーはスキーマAのオーナーより先に解放されなければならない。一般的なルールとして、A-B間で双方向の外部キーを持つことは可能な限り避ける。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Automated tests must run against an existing database with all the structures. A single backend cannot re-create the entire database. See <<Automatic testing / Code analysis>>."
msgstr "自動テストは、すべての構造を持つ既存のデータベースに対して実行する必要があります。単一のバックエンドでデータベース全体を再作成することはできません。 <<Automatic testing / Code analysis>> を参照。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Note that when working with some databases like Oracle or MySQL, failed DDL migrations are not automatically rolled back. See https://flywaydb.org/documentation/learnmore/faq#rollback. We found two ways of mitigating this situation:"
msgstr "OracleやMySQLのようないくつかのデータベースで作業する場合、失敗したDDLマイグレーションは自動的にロールバックされないことに注意してください。 https://flywaydb.org/documentation/learnmore/faq#rollback を参照してください。この状況を緩和する方法を2つ見つけました："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Run the tests in a environment where `quarkus.flyway.clean-on-validation-error=true`. That allows to test all the migrations before releasing to another environment. Mostly useful in new services that do not share the database."
msgstr "`quarkus.flyway.clean-on-validation-error=true` の環境でテストを実行する。別の環境にリリースする前に、すべての移行をテストすることができます。ほとんどの場合、データベースを共有しない新しいサービスで有用です。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Create independent migrations by feature. In this case, migrations should be small, and it will be easier to rollback. To avoid name collision between migrations of the same version, a timestamp in the name and `quarkus.flyway.out-of-order=true` might be used."
msgstr "機能ごとに独立したマイグレーションを作成する。この場合、マイグレーションは小さくなり、ロールバックが簡単になる。同じバージョンのマイグレーション間の名前の衝突を避けるために、名前と `quarkus.flyway.out-of-order=true` にタイムスタンプが使われるかもしれない。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Our custom case (2)"
msgstr "カスタムケース (2)"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The management of users, roles, operations of all the systems is handled in one transversal security management system with his own database. When a backend exposes a new API, it defines a new operation and a `@RolesAllowed` annotation. It might also need to create new roles if needed. This new data must be persisted/updated in the security system database. We need to trigger such updates as part of the service CI/CD flow. To resolve this situation, the services need two folders of migrations: `db/migration` (for the service schema) and `db/migrationsecurity` (for the security database). At the security database, each service has its own \"flyway_schema_history\" table, to keep record of the migrations executed. For example \"fsh_service_A\", \"fsh_service_B\", etc."
msgstr "すべてのシステムのユーザー、ロール、オペレーションの管理は、独自のデータベースを持つ1つの横断的なセキュリティ管理システムで処理される。バックエンドが新しいAPIを公開するときには、新しいオペレーションと `@RolesAllowed` のアノテーションを定義する。また、必要に応じて新しいロールを作成する必要があるかもしれない。この新しいデータは、セキュリティシステムのデータベースに永続化/更新されなければなりません。サービスの CI/CD フローの一部として、このような更新をトリガーする必要があります。この状況を解決するために、サービスには、 `db/migration` （サービススキーマ用）と `db/migrationsecurity` （セキュリティデータベース用）の2つの移行フォルダが必要です。セキュリティデータベースでは、各サービスは独自の \"flyway_schema_history \"テーブルを持ち、実行されたマイグレーションの記録を保持します。例えば、\"fsh_service_A\"、\"fsh_service_B \"などです。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "How do we do it? The default `db/migration` folder is handled by Quarkus when running tests or deploying. On the other hand, the `db/migrationsecurity` is picked up by a GitLab job that runs before deploying the app to any environment. As the security database is shared across all the services in that environment, the Flyway configurations can be declared in a unified way as GitLab CI/CD variables. Another approach thay may also work is using the `quarkus.flyway.\"named-data-sources\"` properties, that let you apply migrations in different datasources."
msgstr "どうすればよいのでしょうか？デフォルトの `db/migration` フォルダは、テスト実行時やデプロイ時に Quarkus によって処理されます。一方、 `db/migrationsecurity` は、アプリをどの環境にもデプロイする前に実行される GitLab ジョブによってピックアップされます。セキュリティデータベースはその環境のすべてのサービスで共有されるので、Flywayの設定はGitLabのCI/CD変数として統一された方法で宣言することができます。別のアプローチとして、 `quarkus.flyway.\"named-data-sources\"` プロパティを使って、異なるデータソースにマイグレーションを適用することもできる。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Automatic testing and code analysis"
msgstr "自動テストとコード解析"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"To implement automated testing the `quarkus-junit5` extension is needed.\n"
"As mentioned above, our automated tests have to run against an existing database with all the necessary structures. For that reason, we are not able to set up test databases from scratch, for example using TestContainers. We also need to have a way to rollback the changes introduced by tests. Doing the latter is really easy thanks to the `@TestTransaction` annotation provided by Quarkus (see https://quarkus.io/guides/getting-started-testing#tests-and-transactions).\n"
"Transactional testing is really useful, as it allows us to run tests against a real database, without the need for mocking. Along with testing the methods logic, it also guarantees that the entities and tables are correctly defined."
msgstr "自動テストを実装するには、 `quarkus-junit5` 拡張モジュールが必要です。上述したように、自動テストは必要な構造をすべて備えた既存のデータベースに対して実行する必要があります。そのため、たとえば TestContainers を使ってゼロからテスト用データベースをセットアップすることはできません。また、テストによる変更をロールバックする方法も必要です。Quarkus の `@TestTransaction` アノテーション link:https://quarkus.io/guides/getting-started-testing#tests-and-transactions[（https://quarkus.io/guides/getting-started-testing#tests-and-transactions] を参照）のおかげで、ロールバックはとても簡単です。トランザクションテストは本当に便利です。モックを使用しなくても、実際のデータベースに対してテストを実行できるからです。メソッドのロジックをテストするだけでなく、エンティティやテーブルが正しく定義されていることも保証します。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Regarding code analysis, we are using two Maven plugins: `sonar-maven-plugin` and `dependency-check-maven`. SonarQube is an open source platform developed by SonarSource for continuous inspection of code quality to perform automatic reviews with static analysis of code to detect bugs and code smells. Dependency-Check is a Software Composition Analysis tool that attempts to detect publicly disclosed vulnerabilities contained within a project's dependencies. A plugin can be installed in SonarQube to integrate with dependency check reports."
msgstr "コード分析に関しては、2つのMavenプラグインを使用している： `sonar-maven-plugin` と `dependency-check-maven` 。SonarQube は、SonarSource 社によって開発された、コード品質を継続的に検査するためのオープンソースプラットフォームで、バグやコード臭を検出するためにコードの静的解析を行い、自動レビューを実行する。Dependency-Check は、プロジェクトの依存関係に含まれる、一般に公開された脆弱性の検出を試みるソフトウェア構成分析ツールである。SonarQubeにプラグインをインストールすることで、依存性チェックレポートと統合できます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The `quarkus-jacoco` extension is also used to get the coverage of the tests. The generated report is picked up by SonarQube, and the results are used to check against the quality gate."
msgstr "`quarkus-jacoco` エクステンションもテストのカバレッジを取得するために使用されます。生成されたレポートは SonarQube に取り込まれ、その結果に基づいて品質ゲートがチェックされます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Code analysis tools can take some time. For that reason, we decided to run this tasks only on nightly builds fired by GitLab scheduler. This decision depends on the requirements of each project."
msgstr "コード解析ツールは時間がかかります。そのため、私たちはこのタスクをGitLabスケジューラーによって夜間ビルドされるときだけ実行することにしました。この決定は、各プロジェクトの要件によります。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Dependency Bot"
msgstr "依存性ボット"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We are living in an age of continuous delivery code, and Quarkus is no exception. The team is releasing new versions with improvements and bugfixes at a fast pace. In addition to that, we crafted some utility libraries that are shared among our backends and frontends. When there are new releases, all the services should be updated."
msgstr "私たちは継続的デリバリーコードの時代に生きており、Quarkusも例外ではない。Quarkusも例外ではありません。チームは、改良とバグ修正を加えた新バージョンを速いペースでリリースしています。それに加えて、バックエンドとフロントエンドで共有するユーティリティ・ライブラリも作成しました。新しいリリースがあれば、すべてのサービスが更新されるはずです。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "As of today (initial phase), we have ≈30 services, but a lot more are expected in the near future. Having a dependency bot to help us update these dependencies and run automated validation tasks is a must."
msgstr "今日（初期段階）の時点で、私たちは約30のサービスを持っていますが、近い将来、さらに多くのサービスが増える予定です。これらの依存関係を更新し、自動化された検証タスクを実行するのに役立つ依存関係ボットを持つことは必須です。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "As we are working with GitLab, one of the recommended options is Renovatebot. See https://docs.renovatebot.com/. It is relatively easy to setup, works seamlessly with Java, and is highly customizable."
msgstr "私たちはGitLabを使っているので、Renovatebotを推奨します。 link:https://docs.renovatebot.com/[https://docs.renovatebot.com/。] セットアップが比較的簡単で、Javaとシームレスに動作し、高度なカスタマイズが可能です。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Security domains and DAO library"
msgstr "セキュリティ・ドメインとDAOライブラリ"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "As part of the project, we had to code an utility JPA DAO library for simplifying the queries made by developers. As a result, the \"jpacriteria-dao\" library was born. Under the hoods, it uses the JPA criteria library."
msgstr "プロジェクトの一環として、開発者によるクエリを簡素化するためのユーティリティJPA DAOライブラリをコーディングする必要がありました。その結果、\"jpacriteria-dao \"ライブラリが誕生した。その裏側では、JPA criteriaライブラリを使用しています。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The main goals are:"
msgstr "主な目標は以下の通りだ："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Simplify the creation of queries. Developers only need to code DTO filters and map the attributes to criteria predicates. The library creates the final query. It automatically detects when to do inner/left joins, when to use distinct, etc."
msgstr "クエリの作成を簡素化します。開発者はDTOフィルターをコーディングし、属性を条件述語にマッピングするだけでよい。ライブラリが最終的なクエリを作成します。内部結合/左結合を行うタイミング、distinctを使用するタイミングなどを自動的に検出します。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Support the use of `includeFields` with navigation, so the developers can choose which fields to query (`field1.field2.id`, `field1.field2.name`, etc). Executes a native Query and maps the result to a DTO. It is very useful to limit the scope of the query."
msgstr "ナビゲーションを使用して `includeFields` の使用をサポートするため、開発者はクエリするフィールドを選択できます ( `field1.field2.id` , `field1.field2.name` など)。ネイティブクエリを実行し、結果をDTOにマップします。クエリの範囲を限定するのに非常に便利です。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "In our system, we have security domains, with precedence. Some users must only see the data that belongs to their domain. The library, when instructed, can do the validations and filtering automatically at DAO level. Entities that need to support that must extend the `DataSecurity` interface."
msgstr "我々のシステムでは、セキュリティ・ドメインがあり、優先順位がある。あるユーザーは、自分のドメインに属するデータだけを見なければなりません。指示されたライブラリは、DAOレベルで自動的にバリデーションとフィルタリングを行うことができる。それをサポートする必要があるエンティティは、 `DataSecurity` インターフェースを拡張する必要があります。"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"We decided to open source it, and it will probably be also deployed to Maven Central. The code is published in the https://github.com/sofisslat/jpacriteria-dao GitHub repository.\n"
"We also uploaded an example Quarkus app using the library (under the folder `example`). As of today, we see the library as a proof of concept, that can be evolved and improved."
msgstr "私たちはこれをオープンソース化することにしました。コードは https://github.com/sofisslat/jpacriteria-dao GitHub リポジトリで公開されています。また、ライブラリを使用したQuarkusアプリのサンプルもアップロードしました（ `example` フォルダ）。現時点では、このライブラリはコンセプトの証明であり、進化させ、改善することができると考えています。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Logs (EFK)"
msgstr "ログ（EFK）"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "When running multiple services and applications on a Kubernetes cluster, a centralized, cluster-level logging stack can help to quickly sort through and analyze the heavy volume of log data produced by the pods. One popular centralized logging solution is the Elasticsearch, Fluentd, and Kibana (EFK) stack. Data streams are the recommended way of storing logs in Elasticsearch. In a typical setup, all the logs have useful context information used for filtering as \"namespace\", \"service\", \"log level\", etc."
msgstr "Kubernetes クラスタ上で複数のサービスやアプリケーションを実行する場合、集中型のクラスタレベルのロギングスタックを使用すると、Pod から生成される大量のログデータを迅速に分類して分析することができます。人気のある集中型ロギングソリューションの1つは、Elasticsearch、Fluentd、Kibana（EFK）スタックです。データストリームは Elasticsearch にログを保存する推奨の方法です。典型的なセットアップでは、すべてのログは \"名前空間\"、\"サービス\"、\"ログレベル\" などのフィルタリングに使用される有用なコンテキスト情報を持つ。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The challenge lies in adding as much context as possible to the logged information, such as:"
msgstr "課題は、記録された情報に可能な限り多くの文脈を加えることにある："

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "traceId (link logs corresponding to a trace of invocations)"
msgstr "traceId (呼び出しのトレースに対応するリンクログ)"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "tokenId (link logs corresponding to a JWT authorization token)"
msgstr "tokenId (JWT認可トークンに対応するリンクログ)"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "userId/userCode (link logs corresponding to a given user)"
msgstr "userId/userCode（指定したユーザーに対応するリンクログ）"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "This additional information helps our development team to debug errors reported by users."
msgstr "この追加情報は、開発チームがユーザーから報告されたエラーをデバッグするのに役立ちます。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, no-wrap
msgid "JSON logging format"
msgstr "JSONロギングフォーマット"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "It is possible to change the output format of the console log. This can be useful in environments where the output of the Quarkus application is captured by a service which processes and stores the log information for later analysis. In order to configure the JSON logging format, the `quarkus-logging-json` extension may be employed. See https://quarkus.io/guides/logging#json-logging."
msgstr "コンソールログの出力形式を変更することができます。これは、Quarkusアプリケーションの出力が、後で分析するためにログ情報を処理して保存するサービスによってキャプチャされる環境で役立ちます。JSONログ形式を設定するには、 `quarkus-logging-json` エクステンションを使用します。 https://quarkus.io/guides/logging#json-logging 。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "In our case, this allowed us to add some extra parameters to the JSON log output, that are easily picked up by fluentd and sent to Elasticsearch."
msgstr "私たちの場合、これによってJSONログ出力にいくつかの追加パラメータを追加することができ、fluentdによって簡単にピックアップされ、Elasticsearchに送信されます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The `quarkus.log.console.json.exception-output-type=formatted` property is also used to send the stacktrace."
msgstr "`quarkus.log.console.json.exception-output-type=formatted` プロパティは、スタックトレースの送信にも使用される。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "Docker has a size limit of 16K for logs (https://github.com/kubernetes/kubernetes/issues/52444[kubernetes/kubernetes#52444] and https://github.com/moby/moby/issues/34620[moby/moby#34620]). An error with a large stacktrace is going to generate a split log. The proposed fluentd community solution is using the fluent-plugin-concat. Keep in mind that there are edge cases with rotating file logs when it might fail. Another solution is sending the logs directly as mentioned in https://quarkus.io/guides/centralized-log-management."
msgstr "Dockerではログのサイズ制限が16Kとなっている（ link:https://github.com/kubernetes/kubernetes/issues/52444[kubernetes/kubernetes#52444] 、 link:https://github.com/moby/moby/issues/34620[moby/moby#34620] ）。スタックトレースが大きいエラーは、ログを分割して生成することになります。fluentd コミュニティが提案しているソリューションは、fluent-plugin-concat を使うことです。ファイルログをローテーションするエッジケースで失敗する可能性があることに注意してください。もう一つの解決策は、 https://quarkus.io/guides/centralized-log-management で述べられているように、ログを直接送信することです。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "MDC (Mapped diagnostic context)"
msgstr "MDC（マップされた診断コンテキスト）"

#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid ""
"The typical Java logging API lets you log the level, exception message and stacktrace. Quarkus uses JBoss Log Manager under the hoods. Using `org.jboss.logmanager.MDC`, we have access to the `MDC.put(String key, String value)` method that allows us to add key-value parameters.\n"
"In order to set this information, a `javax.ws.rs.container.ContainerRequestFilter` should be implemented."
msgstr "一般的なJavaロギングAPIでは、レベル、例外メッセージ、スタックトレースをログに記録できます。Quarkusでは、JBoss Log Managerを使用しています。 `org.jboss.logmanager.MDC` を使用して、 `MDC.put(String key, String value)` メソッドにアクセスし、キー値パラメータを追加できます。この情報を設定するには、 `javax.ws.rs.container.ContainerRequestFilter` を実装する必要があります。"

#. type: Title ===
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Obtaining the parameters"
msgstr "パラメータの取得"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The tokenId, userId and userCode are obtained from the JsonWebToken used to invoke the API."
msgstr "tokenId、userId、userCodeは、APIの呼び出しに使用されたJsonWebTokenから取得されます。"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "The traceId, is generated by the `quarkus-opentelemetry` extension. The extension is responsible for transparently propagating the trace through the different REST invocations that are made from the backends. We wanted to use the traceId only for logging, without an external visualizing tool like Jaeger, so we disabled the OTLP Exporter with `quarkus.opentelemetry.tracer.exporter.otlp.enabled=false`."
msgstr "traceId は `quarkus-opentelemetry` エクステンションによって生成されます。このエクステンションは、バックエンドから行われる様々なREST呼び出しを通して、トレースを透過的に伝播する役割を担っています。私たちは、Jaegerのような外部の可視化ツールを使わずに、ロギングのためだけにtraceIdを使いたかったので、 `quarkus.opentelemetry.tracer.exporter.otlp.enabled=false` でOTLP Exporterを無効にしました。"

#. type: Title ==
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy, no-wrap
msgid "Final thoughts"
msgstr "最終的な感想"

#. type: Plain text
#: _posts/2023-05-09-ministry-of-economy-finance-uruguay-adopts-quarkus.adoc
#, fuzzy
msgid "We initially adopted Thorntail (previously known as Wildfly-Swarm) for our service-oriented architecture projects, but switched to Quarkus at the beginning of its 1.x release due to its superior features. Quarkus has proven to be an excellent choice for us, and we have greatly enjoyed working with it and its extensions over the past few years. As of today, the new base architecture is already defined, and SIIF started its migration. At least 5 more years of work with it and other internal systems is expected. Undoubtedly, we will continue working and improving this architecture for the years to come, aligned with the Quarkus ecosystem. We extend our gratitude to the entire Quarkus team and the enthusiastic community behind the project, of which we are proud to be a part."
msgstr "私たちは当初、サービス指向アーキテクチャのプロジェクトにThorntail（以前はWildfly-Swarmとして知られていました）を採用していましたが、Quarkusの優れた機能のため、1.xリリースの初期にQuarkusに切り替えました。Quarkusは私たちにとって素晴らしい選択であることが証明されており、過去数年間、Quarkusとそのエクステンションでの作業を大いに楽しんできました。今日現在、新しい基本アーキテクチャはすでに定義されており、SIIFは移行を開始しています。少なくともあと5年は、このシステムと他の社内システムで仕事をすることになるでしょう。間違いなく、私たちはQuarkusのエコシステムと連携しながら、今後何年にもわたってこのアーキテクチャの改善と作業を続けていくでしょう。Quarkusチーム全体と、プロジェクトの背後にある熱狂的なコミュニティに感謝の意を表します。"

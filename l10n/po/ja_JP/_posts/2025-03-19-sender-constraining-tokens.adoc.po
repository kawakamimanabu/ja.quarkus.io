msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Sender-constraining access tokens with Quarkus OIDC"
msgstr "Quarkus OIDCを使用した、送信者を制約するアクセストークン"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Explain how MTLS Binding and Demonstrating Proof-Of-Possession can be used to prove ownership of access tokens"
msgstr "MTLSバインディングとProof-Of-Possessionの実証を使用して、アクセストークンの所有権を証明する方法を説明します。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Single-page application (SPA) runs in the browser and uses https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism[OIDC authorization code flow] to log-in users, without depending on Quarkus OIDC. When the authentication is complete, SPA sends the access token to access Quarkus on behalf of the authenticated user."
msgstr "シングルページアプリケーション（SPA）はブラウザで実行され、 link:https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism[OIDC認証コードフローを] 使用して、QuarkusのOIDCに依存せずにユーザーにログインします。認証が完了すると、SPAはアクセストークンを送信し、認証されたユーザーに代わってQuarkusにアクセスします。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Have a look at the simple diagram showing how this process works, copied to this post from the https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDC Bearer token guide]:"
msgstr "link:https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDCベアラートークンガイドから] この投稿にコピーした、このプロセスがどのように機能するかを示す簡単な図を見てください："

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "As illustrated in the picture above, the OIDC provider authenticates the current user, SPA receives ID and access tokens and uses the access token to access the Quarkus endpoint."
msgstr "上の図に示されているように、OIDCプロバイダーが現在のユーザーを認証し、SPAがIDとアクセストークンを受け取り、アクセストークンを使用してQuarkusエンドポイントにアクセスします。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "The security challenge that the OAuth2 experts have been trying to address is how to prove that the client such as SPA which is sending the token actually owns this token ? There is nothing in the HTTP `Authorization: Bearer <token>` header that proves that SPA did not leak the token."
msgstr "OAuth2 の専門家が解決しようとしているセキュリティ上の課題は、トークンを送信する SPA などのクライアントが、実際にトークンを所有していることをどうやって証明するかということです。HTTP `Authorization: Bearer <token>` ヘッダには、SPA がトークンを漏らしていないことを証明するものはありません。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Two specifications for sender-constraining access tokens have emerged over the years, https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] and https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)]."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] と link:https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP] ) です。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Mutual TLS Client Authentication and Certificate-Bound Access Tokens"
msgstr "相互TLSクライアント認証と証明書バウンドアクセストークン"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "https://datatracker.ietf.org/doc/html/rfc8705[Mutual TLS Client Authentication and Certificate-Bound Access Tokens] specification describes how access tokens can be cryptographically bound to the MTLS client certificate."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc8705[Mutual TLS Client Authentication and Certificate-Bound Access Tokens] 仕様では、アクセストークンを MTLS クライアント証明書に暗号的にバインドする方法について説明しています。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "By proving that the access token is bound to the client certificate, the Quarkus application can get a high degree of confidence that the current access token is constrained to, owned by the client which authenticated to Quarkus over MTLS."
msgstr "アクセストークンがクライアント証明書にバインドされていることを証明することで、Quarkusアプリケーションは、現在のアクセストークンが、MTLSを介してQuarkusに認証されたクライアントによって所有されているという高い信頼性を得ることができます。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Implementing the cryptographic binding is not complex in this case. The current access token is expected to contain a confirmation with the SHA-256 certificate thumbprint and it must match the thumbprint of the current MTLS client certificate. If the token is in JWT format, then it must include a confirmation claim. If the token is binary then the confirmation must be included in the remote token introspection response."
msgstr "この場合、暗号バインディングの実装は複雑ではありません。現在のアクセストークンには、SHA-256証明書のサムプリントによる確認が含まれることが期待され、それは現在のMTLSクライアント証明書のサムプリントと一致しなければなりません。トークンがJWT形式である場合、確認クレームが含まれていなければなりません。トークンがバイナリの場合、確認はリモート・トークン・イントロスペクション・レスポンスに含まれなければなりません。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Such a binding can only be successful if the OpenId Connect provider has access to the same client certificate which is used during the MTLS authentication to Quarkus."
msgstr "このようなバインディングが成功するのは、OpenId Connect プロバイダが、Quarkus への MTLS 認証で使用されるのと同じクライアント証明書にアクセスできる場合のみです。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "The downside of using the MTLS token binding is that correctly configuring the OpenId Connect provider, ensuring that browsers can request an X509 certiticate authentication when SPA redirects the user to authenticate to the OIDC provider is complex."
msgstr "MTLS トークン・バインディングを使用することの欠点は、OpenId Connect プロバイダを正しく設定し、SPA がユーザーを OIDC プロバイダに認証するようにリダイレクトするときに、ブラウザが X509 証明書認証を要求できるようにすることが複雑であることです。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "If you are a Keycloak user, check the https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide[OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabled] in the Advanced Configuration section of the https://www.keycloak.org/docs/latest/server_admin[Keycloak Server Administration documentation] and the https://tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/[How to Use Certificate-Bound Access Token with Kong and Keycloak] community blog post."
msgstr "Keycloakユーザーの方は、 link:https://www.keycloak.org/docs/latest/server_admin[Keycloak Server Administrationドキュメントの] Advanced Configurationセクションにある link:https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide[OAuth 2.0 Mutual TLS Certificate Bound Access Tokens Enabledと] 、 link:https://tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/[KongとKeycloak] コミュニティーのブログポスト link:https://tech.aufomm.com/how-to-use-certificate-bound-access-token-with-kong-and-keycloak/[How to Use Certificate-Bound Access Tokenを] ご確認ください。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "As far as Quarkus is concerned, you only need to set a single OIDC configuration property, `quarkus.oidc.token.binding.certificate=true`, in addition to the Vert.x HTTP MTLS configuration, to enforce the MTLS token binding."
msgstr "Quarkusでは、Vert.x HTTP MTLSの設定に加えて、OIDCの設定プロパティ（ `quarkus.oidc.token.binding.certificate=true` ）を1つ設定するだけで、MTLSトークンのバインディングを実施できます。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "See the https://quarkus.io/guides/security-oidc-bearer-token-authentication#mutual-tls-token-binding[Quarkus OIDC Mutual TLS Token Binding] documentation for more details."
msgstr "詳細については、 link:https://quarkus.io/guides/security-oidc-bearer-token-authentication#mutual-tls-token-binding[Quarkus OIDC Mutual TLS Token Bindingの] ドキュメントを参照してください。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Demonstrating Proof-of-Possession (DPoP)"
msgstr "占有証明（DPoP）の実証"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "https://datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-Possession (DPoP)] specification describes how access tokens can be cryptographically bound to special JWT tokens called DPoP proofs."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-Possession (DPoP)] 仕様では、アクセストークンを DPoP プルーフと呼ばれる特別な JWT トークンに暗号的にバインドする方法を説明しています。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "The SPA client generates a private and public key pair, and creates a DPoP proof token to complete the access token acquisition from the OIDC provider. It then forwards this DPoP token to Quarkus with a new DPoP proof. The access token must be bound to the DPoP proof by containing a public JSON Web Key (JWK) key thumbprint which matches the thumbprint of the public JWK key contained in the DPoP proof."
msgstr "SPAクライアントは秘密鍵と公開鍵のペアを生成し、DPoP証明トークンを作成して、OIDCプロバイダからのアクセストークンの取得を完了します。その後、このDPoPトークンを新しいDPoP証明とともにQuarkusに転送します。アクセストークンは、DPoP証明に含まれる公開JWK鍵のサムプリントと一致する公開JSONウェブ鍵（JWK）鍵のサムプリントを含むことで、DPoP証明にバインドされている必要があります。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "This binding can only be successful if the client uses the same public and private key pair for creating the DPoP proof to request the access token in the previous step and creating another DPoP proof for submitting it alongside the DPoP access token to Quarkus."
msgstr "このバインディングは、前のステップでアクセストークンを要求するためにDPoPプルーフを作成し、DPoPアクセストークンと一緒にQuarkusに提出するために別のDPoPプルーフを作成するために、クライアントが同じ公開鍵と秘密鍵のペアを使用する場合にのみ成功します。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Quarkus OIDC will also enforce https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs[other DPoP proof check requirements]. Support for custom https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no[DPoP nonce providers] is also planned."
msgstr "Quarkus OIDCは、 link:https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs[その他のDPoPプルーフチェック要件も] 実施します。カスタム link:https://datatracker.ietf.org/doc/html/rfc9449#name-resource-server-provided-no[DPoP nonceプロバイダーの] サポートも計画されています。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Adoption of DPoP, compared to that of the MTLS token binding, is expected to progress faster, because DPoP is an `application-level` protocol, with no expectation that the transport-level MTLS authentication takes place. However, correctly creating DPoP proofs at the SPA level is not straightforward and requires care."
msgstr "DPoP は `application-level` プロトコルであり、トランスポートレベルの MTLS 認証が行われることを期待しないため、MTLS トークン バインディングと比較して、DPoP の採用はより早く進むと予想されます。しかし、SPAレベルでDPoPの証明を正しく作成することは容易ではなく、注意が必要です。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "If you are a Keycloak user, then enabling an experimental `dpop` feature is sufficient to get started. Also check the https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide[OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)] in the Advanced Configuration section of the https://www.keycloak.org/docs/latest/server_admin[Keycloak Server Administration documentation] and the https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-token-with-kong-and-keycloak/[How to Use Demonstrating Proof-of-Possession (DPoP) Token with Kong and keycloak] community blog post."
msgstr "Keycloakユーザーであれば、実験的な `dpop` 機能を有効にするだけで十分です。また、 link:https://www.keycloak.org/docs/latest/server_admin[Keycloak Server Administrationドキュメントの] Advanced Configurationセクションにある link:https://www.keycloak.org/docs/latest/server_admin/#con-advanced-settings_server_administration_guide[OAuth 2.0 Demonstrating Proof-of-Possession at the Application Layer (DPoP)] と link:https://tech.aufomm.com/how-to-use-demonstrating-proof-of-possession-dpop-token-with-kong-and-keycloak/[How to Use Demonstrating Proof-of-Possession (DPoP) Token with Kong and keycloak] communityブログポストもご確認ください。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "As far as Quarkus is concerned, you only need to set a single OIDC configuration property, `quarkus.oidc.token.authorization-scheme=dpop` to accept DPoP tokens and enforce their binding to the accompanying DPoP proofs."
msgstr "Quarkusに関する限り、OIDCの設定プロパティを1つ設定するだけです。 `quarkus.oidc.token.authorization-scheme=dpop` 、DPoPトークンを受け入れ、付随するDPoPプルーフへのバインディングを強制します。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "See the https://quarkus.io/guides/security-oidc-bearer-token-authentication#demonstrating-proof-of-possession-dpop[Quarkus OIDC Demonstrating Proof of Possession (DPoP)] documentation for more details."
msgstr "詳細については、 link:https://quarkus.io/guides/security-oidc-bearer-token-authentication#demonstrating-proof-of-possession-dpop[Quarkus OIDC Demonstrating Proof of Possession（DPoP）の] ドキュメントを参照してください。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Financial-Grade API (FAPI)"
msgstr "金融グレードAPI（FAPI）"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "https://openid.net/wg/fapi/[Financial-Grade API (FAPI)] is a general high-security API profile built on top of OAuth2."
msgstr "link:https://openid.net/wg/fapi/[Financial-Grade API (FAPI)] は、OAuth2 の上に構築された一般的な高セキュリティ API プロファイルです。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Both https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] and https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)] specifications are included in the Financial-Grade API 2.0 https://openid.net/specs/fapi-security-profile-2_0-final.html#name-general[General Security Profile]."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] と link:https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP) の] 両仕様は、Financial-Grade API 2.0 link:https://openid.net/specs/fapi-security-profile-2_0-final.html#name-general[General Security Profile] に含まれています。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "In this article, we have discussed two important OAuth2 specifications for sender-constraining access tokens, https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] and https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP)]."
msgstr "この記事では、送信者を制約するアクセストークンに関する 2 つの重要な OAuth2 仕様、 link:https://datatracker.ietf.org/doc/html/rfc8705[RFC 8705: Mutual TLS Client Authentication and Certificate-Bound Access Tokens] と link:https://datatracker.ietf.org/doc/html/rfc9449[RFC 9449: OAuth 2.0 Demonstrating Proof-of-Possession (DPoP] ) について説明しました。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Both of these token security elevation technologies can be easily supported in Quarkus OIDC, by using a single configuration property only, without having to write a lot of custom code and configuration."
msgstr "Quarkus OIDCでは、この2つのトークンセキュリティ昇格技術を、1つの設定プロパティだけで簡単にサポートできます。"

#: _posts/2025-03-19-sender-constraining-tokens.adoc
#, fuzzy
msgid "Please experiment with https://datatracker.ietf.org/doc/html/rfc8705[Mutual TLS Client Authentication and Certificate-Bound Access Tokens] and https://datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-Possession (DPoP)] in Quarkus and let us know what you think."
msgstr "ぜひ、Quarkusで link:https://datatracker.ietf.org/doc/html/rfc8705[相互TLSクライアント認証と証明書バウンドアクセストークン] 、 link:https://datatracker.ietf.org/doc/html/rfc9449[Demonstrating Proof-of-Possession (DPoP)] を試してみてください。"

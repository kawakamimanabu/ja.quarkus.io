msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "The internals (and a few externals) of Quarkus test classloading have changed"
msgstr "Quarkusのテストクラスローディングの内部（およびいくつかの外部）が変更されました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "The way that Quarkus loads test classes has been updated. Most tests will not need to change, but here are some things to watch out for."
msgstr "Quarkus がテストクラスをロードする方法が更新されました。ほとんどのテストは変更する必要はありませんが、いくつか注意すべき点があります。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "What's changing?"
msgstr "何が変わったのですか？"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The internals of Quarkus test classloading have been rewritten in 3.22.\n"
"It does not affect production and dev modes, or some Quarkus test modes, such as `@QuarkusIntegrationTest`, `@QuarkusComponentTest`.\n"
"However, `@QuarkusTest` has changed.\n"
"This change should make Quarkus testing work better, and it allowed us to fix a pile of longstanding bugs.\n"
"It will also allow us to improve the integration with test frameworks such as Pact.\n"
"However, it did introduce a few bugs we know about, and most likely also some bugs we don't yet know about.\n"
"We're keen to get feedback from the community so that we can get fixing."
msgstr "Quarkusのテストクラスローディングの内部は、3.22で書き直されました。本番モードや開発モード、あるいは `@QuarkusIntegrationTest` や `@QuarkusComponentTest` のようなQuarkusのテストモードには影響しません。ただし、 `@QuarkusTest` は変更されました。この変更により、Quarkusのテストがより良く動作するようになり、長年のバグの山を修正することができました。また、Pactのようなテストフレームワークとの統合を改善することもできます。しかし、私たちが知っているバグもいくつか発生しましたし、まだ私たちが知らないバグも発生する可能性が高いです。私たちはコミュニティからフィードバックをもらい、修正できるようにしたいと考えています。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Why?"
msgstr "なぜですか？"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "In previous versions, Quarkus tests were invoked using the default JUnit classloader, and then executed in a different, Quarkus-aware, classloader."
msgstr "以前のバージョンでは、QuarkusテストはデフォルトのJUnitクラスローダーを使用して起動され、その後、Quarkusを意識した別のクラスローダーで実行されました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"This mostly worked very well, and meant that `QuarkusTest` tests mostly behaved as if they were part of the same application as the code under test.\n"
"The Quarkus test framework could start and stop Quarkus instances at the right point in the test lifecycle, inject CDI dependencies, and do other useful Quarkus bytecode manipulation.\n"
"However, some use cases didn't work. Tests using advanced JUnit 5 features like `@TestTemplate` and `@ParameterizedTest` sometimes found that the same test code might appear to run in several classloaders in a single test, or that injected dependencies weren't always available."
msgstr "これはたいていの場合非常にうまく機能し、 `QuarkusTest` テストが、あたかもテスト対象のコードと同じアプリケーションの一部であるかのように動作することを意味しました。Quarkus テストフレームワークは、テストライフサイクルの適切なポイントで Quarkus インスタンスを開始したり停止したり、CDI 依存関係を注入したり、その他の有用な Quarkus バイトコード操作を行うことができました。しかし、うまくいかない使用例もありました。 `@TestTemplate` や `@ParameterizedTest` のような JUnit 5 の高度な機能を使用するテストでは、1 つのテストで同じテストコードが複数のクラスローダーで実行されているように見えたり、注入された依存関係が常に利用可能であるとは限らないことがありました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "While Quarkus extensions can do all sorts of marvellous bytecode manipulation to improve the developer experience, they cannot manipulate test classes with the same freedom that they do normal application classes."
msgstr "Quarkusの拡張機能では、開発者のエクスペリエンスを向上させるために、あらゆる種類のすばらしいバイトコード操作を行うことができますが、通常のアプリケーションクラスのように自由にテストクラスを操作することはできません。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"Over time, test-related defects were building up that couldn't be changed without a fundamental rewrite of how Quarkus loads and executes tests.\n"
"The Quarkus test code itself was also growing ever-more complex as it tried to work around various JUnit edge cases. Moving test instances from one classloader to another involved serializing and deserialization, which is harder to implement on newer JVM versions with tighter class security. For example, Quarkus used to use XStream as the serialization provider, but XStream no longer works with Java 17 and higher, because of reflection restrictions in the newer JVMs."
msgstr "そのうちに、Quarkusがテストをロードして実行する方法を根本的に書き直さなければ変更できない、テスト関連の不具合が蓄積していきました。Quarkusのテストコード自体も、さまざまなJUnitのエッジケースを回避しようとするため、ますます複雑になっていきました。あるクラスローダーから別のクラスローダーへテストインスタンスを移動させるには、シリアライズとデシリアライズが必要でした。たとえば、QuarkusではXStreamをシリアライズプロバイダとして使用していましたが、新しいJVMではリフレクションの制限があるため、XStreamはJava 17以降では動作しなくなりました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "What if, instead, Quarkus tests were simply run in the same classloader used to to load them?"
msgstr "その代わりに、Quarkusのテストを単純に同じクラスローダーで実行するとしたらどうでしょうか。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "What you need to do"
msgstr "必要なこと"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"From Quarkus 3.22 onwards, this is exactly how `@QuarkusTest` classloading works.\n"
"What do your tests need to change in order to work with the new architecture?\n"
"*Nothing* (hopefully!)."
msgstr "Quarkus 3.22以降では、 `@QuarkusTest` 。新しいアーキテクチャで動作させるために、テストは何を変更する必要がありますか？ *何もありません* 。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"One of the goals of this change was that the rewrite didn't touch any tests in our test suite, to make sure they'd all continue working without updates.\n"
"In practice, there have been a few hiccups and we've also discovered some edge cases in the broader ecosystem."
msgstr "この変更の目的のひとつは、私たちのテスト・スイートに含まれるすべてのテストに手を加えないことでした。実際には、いくつかの不都合がありましたし、より広範なエコシステムにおけるエッジケースもいくつか発見しました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Known regressions"
msgstr "既知の回帰"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Dev services now start in the JUnit discovery phase*. https://quarkus.io/guides/dev-services[Quarkus Dev Services] are currently started during https://quarkus.io/guides/reaugmentation#what-is-augmentation[the augmentation phase], along with bytecode manipulation and other application initialization steps. With the new testing design, all augmentation happens at the beginning of the test run, during the JUnit discovery phase. This means all Dev Services also start at the beginning of the test run. If several test classes with different Dev Service configuration are augmented before any tests are run, multiple differently-configured Dev Services may be running at the same time. This can cause port conflicts and cross-talk on configuration values. We're hoping to have a https://github.com/quarkusio/quarkus/issues/45785[fix] for this in the next release. As a workaround, splitting conflicting tests into separate projects should fix symptoms."
msgstr "*DevサービスがJUnitの検出フェーズで開始されるようになりました* 。 link:https://quarkus.io/guides/dev-services[Quarkus Dev Servicesは] 現在、バイトコード操作やその他のアプリケーションの初期化ステップと一緒に、 link:https://quarkus.io/guides/reaugmentation#what-is-augmentation[オーグメンテーションフェーズで] 開始されます。新しいテスト設計では、すべてのオーグメンテーションはテスト実行の開始時、JUnitディスカバリフェーズで行われます。つまり、すべての Dev Service もテスト実行の最初に開始されます。テストが実行される前に、異なる Dev Service 構成を持つ複数のテストクラスがオーグメンテーションされると、複数の異なる構成の Dev Service が同時に実行される可能性があります。これにより、ポートの競合や設定値のクロストークが発生する可能性があります。次のリリースではこの link:https://github.com/quarkusio/quarkus/issues/45785[問題を修正] したいと考えています。回避策として、競合するテストを別々のプロジェクトに分割すると症状が改善するはずです。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Config access from JUnit conditions*. Using a `ConfigProvider` from a custom JUnit condition will https://github.com/quarkusio/quarkus/issues/47081[trigger a `ServiceConfigurationError`]. The workaround is to set the thread context classloader to `this.getClass().getClassLoader()` before reading config, and then set it back afterwards."
msgstr "*JUnit 条件からの config アクセス* 。カスタム JUnit 条件から `ConfigProvider` を使用すると、 link:https://github.com/quarkusio/quarkus/issues/47081[ServiceConfigurationError がトリガさ] れます。回避策は、config を読み込む前にスレッドコンテキストのクラスローダを `this.getClass().getClassLoader()` に設定し、読み込んだ後で元に戻すことです。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Eclipse support*. Running `QuarkusTest` tests from the Eclipse IDE is https://github.com/quarkusio/quarkus/issues/47656[more challenging]. Right-clicking and running individual test methods works, and running a whole package also works. But running at the class level gives an error."
msgstr "*Eclipseのサポート* 。Eclipse IDE から `QuarkusTest` テストを実行するのは、 link:https://github.com/quarkusio/quarkus/issues/47656[より困難] です。右クリックして個々のテストメソッドを実行することはできますし、パッケージ全体を実行することもできます。しかし、クラスレベルで実行するとエラーが発生します。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Increased memory footprint running tests.* For suites using multiple profiles and resources, more heap or metaspace may be needed."
msgstr "*テストを実行する際のメモリフットプリントの増加。* 複数のプロファイルとリソースを使用するスイートでは、より多くのヒープまたはメタスペースが必要になる場合があります。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Things to watch out for"
msgstr "注意すべきこと"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Test order change*. As part of the rewrite, the execution order of some tests has swapped around. Of course, we all know tests should not depend on execution order if they don't set an order explicitly. However, it's easy to not notice that a test requires a certain order... until the order changes. We discovered some tests in our own suite that were sensitive to the execution order, and other people may make similar discoveries."
msgstr "*テストの順番の変更* 。書き換えの一環として、いくつかのテストの実行順が入れ替わりました。もちろん、テストが明示的に順序を設定しないのであれば、 実行順序に依存すべきではないことは誰もが知っています。しかし、あるテストが特定の順番を要求していることに気づかないのは簡単なことです。私たちは、自分たちのテスト群の中に実行順序に敏感なテストをいくつか発見しました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Test timing change*. We also discovered that the rewrite exposed some timing issues in tests. Because classloading is frontloaded at the beginning of the test run, rather than between test executions, there's less time for asynchronous operations to finish between tests. For example, there may no longer be time for external state to 'reset' before the next test starts. This might expose some heisenbugs in test suites."
msgstr "*テストタイミングの変更* 。また、書き換えによってテストのタイミングの問題がいくつか露呈していることもわかりました。クラスロードがテスト実行の間ではなく、テストの最初にフロントロードされるため、 テスト間で非同期処理が終了する時間が少なくなります。たとえば、次のテストが始まる前に外部の状態を「リセット」する時間がなくなる可能性があります。これにより、テストスイートでいくつかのハイゼンバグが露呈する可能性があります。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "Dropped support"
msgstr "サポート打ち切り"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*`@TestProfile` on `@Nested` tests.* Mixing different test profiles and test resources on `@Nested` tests is no longer supported. By definition, every `@TestProfile` must get its own Quarkus application and classloader. Having multiple classloaders execute one test isn't compatible with loading the test with the classloader used to run it."
msgstr "*<code>@TestProfile</code> を テストで使用してください。<code>@Nested</code>* `@Nested` テストで、異なるテストプロファイルやテストリソースを混在させることは、サポートされなくなりました。定義上、 はすべて、独自の Quarkus アプリケーションとクラスローダを取得する必要があります。複数のクラスローダーが 1 つのテストを実行することは、テストの実行に使用するクラスローダーでテストをロードすることと互換性がありません。 `@TestProfile` "

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid "*Version 2.x of the Maven Surefire plugin*. Versions below 3.x of the Maven Surefire plugin will no longer work with `@QuarkusTest`. Version 3 of the Surefire plugin was released in 2023, so version 2 is now rather old."
msgstr "*Maven Surefireプラグインのバージョン2.x* 。Maven Surefireプラグインの3.x以下のバージョンは、 `@QuarkusTest` で動作しなくなります。Surefireプラグインのバージョン3は2023年にリリースされたので、バージョン2はかなり古くなっています。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
msgid "Next steps"
msgstr "次のステップ"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"The main work of the test classloading rewrite has been delivered in 3.22, and has unlocked a bunch of possible improvements.\n"
"Some test defects weren't directly fixed by the main change, but the architecture is now in place to enable a fix.\n"
"More excitingly, test-related extensions, like the Pact extensions, can now add new features to reduce test boilerplate."
msgstr "テストのクラスローディングの書き換えの主な作業は 3.22 で提供され、可能性のある改良の束を解き放ちました。いくつかのテストの不具合は主な変更によって直接修正されませんでしたが、修正を可能にするアーキテクチャが整いました。さらにうれしいことに、Pact 拡張モジュールのようなテスト関連の拡張モジュールは、テストの定型文を減らすための新しい機能を追加できるようになりました。"

#: _posts/2025-04-30-test-classloading-rewrite.adoc
#, fuzzy
msgid ""
"As always, if you spot issues or oddities, please let us know on https://quarkusio.zulipchat.com/[zulip] or https://github.com/quarkusio/quarkus/issues[raise an issue].\n"
"The https://github.com/orgs/quarkusio/projects/30[working group for test classloading] is still underway, and welcomes contributions."
msgstr "いつものように、もし問題やおかしな点を見つけたら、 link:https://quarkusio.zulipchat.com/[zulipで] お知らせいただくか、 link:https://github.com/quarkusio/quarkus/issues[問題を提起して] ください。 link:https://github.com/orgs/quarkusio/projects/30[テストクラスローディングのワーキンググループは] まだ進行中です。"

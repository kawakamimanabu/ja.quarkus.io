msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Tips to use Hibernate ORM with Quarkus profiles and live coding mode"
msgstr "QuarkusプロファイルとライブコーディングモードでHibernate ORMを使用するためのヒント"

#. type: YAML Front Matter: synopsis
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Hibernate ORM lets you generate or update the database schema. Let's explore when to use such option in combination with live coding."
msgstr "Hibernate ORMでは、データベーススキーマを生成または更新することができます。ライブコーディングと組み合わせて、このようなオプションを使用する場合について検討してみましょう。"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"Quarkus live coding (aka dev mode) is really useful for applications that mix front end or services and database access.\n"
"There are a few common approaches to make the best of it."
msgstr "Quarkusのライブコーディング（別名、開発モード）は、フロントエンドやサービスとデータベースアクセスが混在するアプリケーションにとても便利です。この機能を最大限に活用するには、いくつかの一般的なアプローチがあります。"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The first choice is to use `quarkus.hibernate-orm.database.generation=drop-and-create` in conjunction with `import.sql`.\n"
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live coding mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "最初の選択は、 `quarkus.hibernate-orm.database.generation=drop-and-create` を `import.sql` と組み合わせて使うことです。そうすることで、アプリや特にエンティティに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ（ `import.sql` に保存されている）が使用されて、ゼロから再投入されます。エンティティの変更や、 `import.sql` への変更が即座に反映され、アプリケーションを再起動することなくスキーマが更新されます！"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"By default, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`."
msgstr "デフォルトでは、Hibernate ORM は起動時に、 `/import.sql` ファイル内の SQL 文を読み込んで実行します (存在する場合)。 `application.properties` のプロパティ `quarkus.hibernate-orm.sql-load-script` を変更することで、ファイル名を変更できます。"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The second approach is to use `quarkus.hibernate-orm.database.generation=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures related to the foreign key, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr "2番目のアプローチは、 `quarkus.hibernate-orm.database.generation=update` を使用することです。 `update` は Hibernate ORM のベストエフォートであり、データ損失につながる可能性のあるデータベース構造の変更を含む特定の状況で失敗します。例えば、外部キーに関連する構造を変更した場合、Hibernate ORMは救済しなければならないかもしれません。しかし、開発においては、これらの制限は許容範囲内です。"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"The third approach is to use `quarkus.hibernate-orm.database.generation=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like https://quarkus.io/guides/flyway[Flyway].\n"
"When you make a change to an entity, make sure to adapt the database schema accordingly."
msgstr "3つ目のアプローチは、 `quarkus.hibernate-orm.database.generation=none` 。この方法は、本番データのコピーで作業しているが、スキーマの進化を完全に制御したい場合に最適です。または、 link:https://quarkus.io/guides/flyway[Flyway ] のようなデータベーススキーマ移行ツールを使用する場合です。エンティティに変更を加えたら、それに応じてデータベーススキーマも変更するようにしてください。"

#. type: Plain text
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.database.generation` `drop-and-create` and `update` in your production environment. You have been warned :)"
msgstr "`quarkus.hibernate-orm.database.generation` `drop-and-create` と `update` を本番環境で使用しないでください。警告されました :)"

#. type: Title ==
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy, no-wrap
msgid "Now with Quarkus profiles"
msgstr "Quarkusのプロファイルを使用するようになりました。"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"It becomes really powerful when combined with Quarkus configuration profiles.\n"
"You can define different https://quarkus.io/guides/config#configuration-profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "Quarkusの設定プロファイルと組み合わせると、非常に強力になります。さまざまな link:https://quarkus.io/guides/config#configuration-profiles[設定プロファイル] を定義して、環境に応じて異なる動作を選択できます。これは、現在必要な開発スタイルに合わせて、Hibernate ORMプロパティのさまざまな組み合わせを定義できるためです。"

#. type: Block title
#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#: _posts/2019-08-01-hibernate-orm-config-profiles.adoc
#, fuzzy
msgid ""
"I hope you have found this tip useful.\n"
"Hibernate ORM schema update, data fixture, Quarkus dev mode and its configuration profiles are a powerful combination!"
msgstr "このヒントがお役に立てば幸いです。Hibernate ORMのスキーマ更新、データフィクスチャ、Quarkusの開発モードと設定プロファイルは、強力な組み合わせです！"

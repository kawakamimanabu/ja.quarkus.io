msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Use OIDC Proxy to integrate OIDC service endpoints with custom GPT"
msgstr "OIDC Proxyを使用して、OIDCサービスエンドポイントをカスタムGPTと統合します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Explain how OIDC Proxy can help to integrate OIDC service endpoints with custom GPT"
msgstr "OIDC ProxyがカスタムGPTとOIDCサービスエンドポイントの統合にどのように役立つかを説明します。"

#: _posts/2024-03-27-oidc-proxy.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] is a new https://github.com/quarkiverse[Quarkiverse] extension which can help to integrate https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDC service endpoints] with external Single-page applications (SPA)."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、 link:https://github.com/quarkiverse[Quarkiverseの] 新しいエクステンションで、 link:https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDCサービスエンドポイントを] 外部のシングルページアプリケーション（SPA）と統合するのに役立ちます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "SPA runs in the browser and uses the https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism[OIDC authorization code flow], but without relying on Quarkus, to authenticate the current user and accesses the Quarkus OIDC service endpoint with the access token on behalf of the authenticated user. Here is a simple diagram showing how this process works, copied to this post from the https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDC Bearer token guide] for your convenience:"
msgstr "SPAはブラウザで実行され、 link:https://quarkus.io/guides/security-oidc-code-flow-authentication#overview-of-the-oidc-authorization-code-flow-mechanism[OIDC認可コードフローを] 使用しますが、Quarkusに依存せず、現在のユーザーを認証し、認証されたユーザーに代わってアクセストークンを使用してQuarkus OIDCサービスエンドポイントにアクセスします。以下は、このプロセスがどのように動作するかを示す簡単な図で、便宜上 link:https://quarkus.io/guides/security-oidc-bearer-token-authentication[OIDCベアラートークンガイドから] この投稿にコピーしています："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "As illustrated in the picture above, the OIDC provider authenticates the current user. The SPA receives the ID, access, and, possibly, refresh tokens as the outcome of the authorization code flow and uses the access token to access the Quarkus OIDC service endpoint."
msgstr "上の図に示されているように、OIDCプロバイダは現在のユーザーを認証します。SPAは、認可コードフローの結果としてID、アクセス、場合によってはリフレッシュトークンを受け取り、アクセストークンを使用してQuarkus OIDCサービスエンドポイントにアクセスします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"The SPA interacts with the OIDC provider.\n"
"Thus, it must know the provider connection details, including the registered OIDC application's client ID and other OIDC-specific details required to complete the authorization code flow successfully.\n"
"You must also provide a _callback_ URL in your registered OIDC application, which may not always be acceptable."
msgstr "SPAはOIDCプロバイダと対話します。そのため、登録されたOIDCアプリケーションのクライアントIDや、認可コードフローを正常に完了させるために必要なその他のOIDC固有の詳細など、プロバイダ接続の詳細を知っている必要があります。また、登録したOIDCアプリケーションで _コールバック_ URLを提供する必要がありますが、必ずしも受け入れられるとは限りません。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"The https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] extension simplifieds this whole setup.\n"
"It acts as a proxy between the SPA and Quarkus OIDC service endpoints and delegates to the real OIDC provider to support an authorization code flow.\n"
"It allows integrating OIDC service endpoints with SPAs without having to expose the internal OIDC connection details to this SPA, and thus, sends all the required details to the user browser."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] エクステンションは、このセットアップ全体を簡素化します。SPAとQuarkus OIDCサービスエンドポイントの間でプロキシとして動作し、認可コードフローをサポートするために実際のOIDCプロバイダに委譲します。これにより、内部OIDC接続の詳細をSPAに公開することなく、SPAとOIDCサービスエンドポイントを統合することができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Another use case for the OIDC Proxy is to support several https://quarkus.io/guides/security-oidc-code-flow-authentication[Quarkus OIDC web-app] endpoints to authenticate users using the same OIDC proxy configuration before accessing the OIDC service endpoint."
msgstr "OIDCプロキシのもう1つの使用例は、複数の link:https://quarkus.io/guides/security-oidc-code-flow-authentication[Quarkus OIDCウェブアプリエンドポイントを] サポートし、OIDCサービスエンドポイントにアクセスする前に、同じOIDCプロキシ設定を使用してユーザーを認証することです。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "How does this OIDC proxy actually work? We are coming to that, but first, let's talk about custom GPT actions."
msgstr "このOIDCプロキシは実際にどのように機能するのでしょうか？これから説明しますが、まずはカスタムGPTアクションについて説明しましょう。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Custom GPT Actions"
msgstr "カスタムGPTアクション"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "https://chat.openai.com[ChatGPT] has introduced https://platform.openai.com/docs/actions/introduction[Actions], which can be used to create custom GPTs. For example, you can create a custom GPT which can enhance your ChatGPT conversation experience by connecting it to your API endpoints."
msgstr "link:https://chat.openai.com[ChatGPTは] カスタムGPTを作成するために使用できる link:https://platform.openai.com/docs/actions/introduction[アクションを] 導入しました。例えば、APIエンドポイントに接続することで、ChatGPTの会話体験を向上させるカスタムGPTを作成できます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"One of the challenges when connecting a custom GPTs with your API is the authentication, how your custom GPT can be https://platform.openai.com/docs/actions/authentication[authenticated] to be allowed to access the API.\n"
"The https://platform.openai.com/docs/actions/authentication/oauth[OAuth] option is the best option when you need a user-specific permission to access the API, and this is what https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] will help you to achieve without exposing all the OIDC/OAuth2 connection details."
msgstr "カスタムGPTとAPIを接続する際の課題の1つは、APIへのアクセスを許可するためにカスタムGPTをどのように link:https://platform.openai.com/docs/actions/authentication[認証] するかという認証です。 link:https://platform.openai.com/docs/actions/authentication/oauth[OAuth] オプションは、APIにアクセスするためのユーザー固有の権限が必要な場合に最適なオプションです。これは、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] 、OIDC/OAuth2接続の詳細をすべて公開することなく実現するのに役立ちます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Be aware that at the moment, custom GPT actions can only be created with ChatGPT Plus and Enterprise subscriptions."
msgstr "現時点では、カスタムGPTアクションはChatGPT PlusとEnterpriseサブスクリプションでしか作成できないことに注意してください。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Quarkus Fitness Adviser"
msgstr "Quarkusフィットネスアドバイザー"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Ok, let's see how it works more precisely.\n"
"To illustrate this, we are going to create the `Quarkus Fitness Adviser,` a custom GPT that analyzes activities recorded in Strava and other social providers which track physical exercise."
msgstr "では、具体的にどのように動くか見てみましょう。これを説明するために、 `Quarkus Fitness Adviser,` 、Stravaやその他のソーシャル・プロバイダーで記録されたアクティビティを分析するカスタムGPTを作成します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "We will do it by registering a https://www.strava.com/[Strava] API Application, creating a https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2] service endpoint, proxying it with https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy], providing an HTTPS tunnel with <<ngrok, NGrok>> and finally, creating a custom GPT which uses https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] to authenticate the GPT users to Strava and use access tokens to access the Quarkus Strava OIDC service endpoint to analyze the recorded activities."
msgstr "link:https://www.strava.com/[Stravaの] APIアプリケーションを登録し、 link:https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2] サービスエンドポイントを作成し、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyで] プロキシし、 xref:ngrok[NGrokで] HTTPSトンネルを提供し、最後に link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyを] 使用してGPTユーザーをStravaに認証し、アクセストークンを使用してQuarkus Strava OIDCサービスエンドポイントにアクセスし、記録されたアクティビティを分析するカスタムGPTを作成します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 1 - Strava Application Registration"
msgstr "ステップ1 - Stravaアプリケーション登録"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "We will start by registering a new `Quarkus Fitness Adviser` application in Strava:"
msgstr "まずはStravaに `Quarkus Fitness Adviser` ："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Note that the `Authorization Callback Domain` points to your free <<ngrok, NGrok>> (or in production, the real) domain representing the domain where OIDC Proxy is available, likely to be the same domain where your Quarkus micro-services are hosted as well. It is an important feature of Quarkus OIDC Proxy as it lets OIDC provider administrators to point to the trusted domain as opposed to a 3rd party domain."
msgstr "`Authorization Callback Domain` は、OIDC プロキシが利用可能なドメインを表す無料の xref:ngrok[NGrok] （または本番環境では実際の）ドメインを指していることに注意してください。これはQuarkus OIDC Proxyの重要な機能であり、OIDCプロバイダーの管理者は、サードパーティのドメインではなく、信頼できるドメインを指定することができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Also, note that the fact that only a domain is accepted as a callback option is specific to the https://www.strava.com/[Strava] application registration process. Allowing only specific absolute callback URLs is recommended in general, and the Quarkus https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2] integration enforces that only a single callback URL is allowed."
msgstr "また、コールバックオプションとしてドメインのみが受け入れられるという事実は、 link:https://www.strava.com/[Strava] アプリケーションの登録プロセスに特有のものであることに注意してください。一般的には、特定の絶対的なコールバックURLのみを許可することが推奨され、Quarkus link:https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2] 統合では、単一のコールバックURLのみが許可されます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "After completing the application registration, write down the generated client id and secret. We will need them later."
msgstr "アプリケーションの登録が完了したら、生成されたクライアントIDとシークレットを書き留めてください。後で必要になります。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 2 - Quarkus Strava Service"
msgstr "ステップ2 - Quarkus Stravaサービス"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Quarkus OIDC integrates the https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2 provider] and encapsulates all the Strava OAuth2 specific details. You just need one line in your configuration file: `quarkus.oidc.provider=strava`."
msgstr "Quarkus OIDCは、 link:https://quarkus.io/guides/security-openid-connect-providers#strava[Strava OAuth2プロバイダーを] 統合し、Strava OAuth2固有の詳細をすべてカプセル化します。必要なのは、設定ファイルにある1行だけです： `quarkus.oidc.provider=strava` ."

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"The Strava provider is _mostly_ OAuth2-compliant.\n"
"But, it uses HTTP query parameters to complete the authorization code flow POST token request, while using the form parameters is a usual option.\n"
"It also uses a comma `,` separator when multiple scopes are requested during the initial redirect to Strava, while space ' ' is the typical separator character."
msgstr "Stravaプロバイダは、 _ほぼ_ OAuth2に準拠しています。しかし、認可コードフロー POST トークン要求を完了するために HTTP クエリパラメータを使用します。また、Strava への最初のリダイレクト時に複数のスコープがリクエストされた場合、カンマ `,` を区切り文字として使用します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"The Quarkus OIDC proxy can handle it because it relies on the Quarkus OIDC knowledge. It should be noted that custom GPT does not support these options with its built-in OAuth authentication option.\n"
"Fortunately, the proxy is going to handle that for us."
msgstr "Quarkus OIDCプロキシは、Quarkus OIDCの知識に依存しているため、これを処理できます。カスタムGPTは、内蔵のOAuth認証オプションでこれらのオプションをサポートしていないことに注意する必要があります。幸いなことに、プロキシがこれを処理してくれます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Alright, it's time to write that application.\n"
"First, you need to add a few Maven dependencies to your project:"
msgstr "さて、アプリケーションを書く時間です。まず、プロジェクトにいくつかのMaven依存関係を追加する必要があります："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You need Quarkus `3.9.0+`."
msgstr "Quarkus `3.9.0+` が必要です。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Next we create the OIDC configuration:"
msgstr "次にOIDCコンフィギュレーションを作成します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"By default, `quarkus.oidc.provider=strava` enables a Quarkus OIDC `web-app` application type that can support an authorization code flow.\n"
"But our endpoint acts as a Quarkus OIDC `service` that accepts the bearer access tokens from the custom  GPT.\n"
"Thus, we override the application type to `service`.\n"
"Instead, the OIDC Proxy will manage the authorization code flow."
msgstr "デフォルトでは、 `quarkus.oidc.provider=strava` は、認可コードフローをサポートできる Quarkus OIDC `web-app` アプリケーションタイプを有効にします。しかし、このエンドポイントは、カスタム GPT からベアラアクセストークンを受け入れる Quarkus OIDC `service` として動作します。 `service` 代わりに、OIDC プロキシが認可コードフローを管理します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Note how the extra https://developers.strava.com/docs/reference/[Strava API] scopes are added to the scopes which are already enabled by `quarkus.oidc.provider=strava`, instead of overriding them. See https://quarkus.io/guides/security-openid-connect-providers#provider-scope[Provider scopes] for more information."
msgstr "追加の link:https://developers.strava.com/docs/reference/[Strava API] スコープは、オーバーライドするのではなく、 `quarkus.oidc.provider=strava` 、すでに有効になっているスコープに追加されることに注意してください。詳しくは link:https://quarkus.io/guides/security-openid-connect-providers#provider-scope[Provider scopesを] 参照してください。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "The client id, secret and the extra scopes are not really required by the OIDC service endpoint. These properties are set to support OIDC Proxy which needs to know how to correctly handle the OIDC authorization code flow requests from the external SPA."
msgstr "クライアントID、secret、および余分なスコープは、OIDCサービスエンドポイントでは実際には必要ありません。これらのプロパティは、外部 SPA からの OIDC 認可コードフロー要求を正しく処理する方法を知る必要がある OIDC プロキシをサポートするために設定されています。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "We also add the following properties:"
msgstr "また、以下のプロパティも追加しました："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"First, we configure the REST client to point to the base Strava API endpoint.\n"
"We then tune a little bit the way https://quarkus.io/guides/openapi-swaggerui[Quarkus generates OpenAPI document] to make it acceptable by a custom GPT configuration process."
msgstr "まず、基本的なStrava APIエンドポイントを指すようにRESTクライアントを設定します。次に、 link:https://quarkus.io/guides/openapi-swaggerui[QuarkusがOpenAPIドキュメントを生成] する方法を少し調整し、カスタムのGPT設定プロセスで受け入れられるようにします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now that we have tied up the configuration, we need to define the REST client interface calling the Strava API.\n"
"It automatically https://quarkus.io/guides/security-openid-connect-providers#access-provider-services-with-token-propagation[propagates] the Strava access tokens to access the user-specific Strava data:"
msgstr "さて、設定を縛ったところで、Strava APIを呼び出すRESTクライアントインターフェースを定義する必要があります。これは、ユーザー固有のStravaデータにアクセスするためのStravaアクセストークンを自動的に link:https://quarkus.io/guides/security-openid-connect-providers#access-provider-services-with-token-propagation[伝播] します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Now, let's implement the primary endpoint of our application, which exposes the same API as Strava. It accepts the access tokens from a custom GPT and uses the REST client to forward them to Strava:"
msgstr "では、Stravaと同じAPIを公開するアプリケーションのプライマリエンドポイントを実装してみましょう。カスタムGPTからアクセストークンを受け取り、RESTクライアントを使ってStravaに転送します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Access to the `FitnessAdviserService` endpoint requires a verified access token."
msgstr "`FitnessAdviserService` エンドポイントへのアクセスには、検証済みのアクセストークンが必要です。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Note, to accept binary Strava access tokens, this endpoint verifies them indirectly by requesting `UserInfo` from Strava during the token authentication process, which is enabled by the `quarkus.oidc.provider=strava` declaration.\n"
"In this case, `UserInfo` represents a Strava athlete profile, which is already available to the endpoint by the time it makes an outbound  REST client call. For example, the `FitnessAdviserService` endpoint passes a `UserInfo` athlete `id` attribute to `StravaClient` to request the current authenticated athlete's stats."
msgstr "バイナリStravaアクセストークンを受け入れるために、このエンドポイントは、 `quarkus.oidc.provider=strava` 宣言によって有効化されるトークン認証プロセス中にStravaから `UserInfo` を要求することによって、間接的にそれらを検証することに注意してください。この場合、 `UserInfo` は Strava アスリートプロファイルを表し、REST クライアントコールを発信する時点で、エンドポイントはすでに利用可能です。たとえば、 `FitnessAdviserService` エンドポイントは、 `UserInfo` athlete `id` 属性を `StravaClient` に渡し、現在の認証済みアスリートの統計情報を要求します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "If it were an access token issued by a provider such as Keycloak or Auth0, then it would be verified locally with the Keycloak or Auth0 public verification keys and https://quarkus.io/guides/security-oidc-bearer-token-authentication#accessing-jwt-claims[injected directly as JsonWebToken]."
msgstr "KeycloakやAuth0のようなプロバイダが発行したアクセストークンであれば、KeycloakやAuth0の公開検証キーでローカルに検証され、 link:https://quarkus.io/guides/security-oidc-bearer-token-authentication#accessing-jwt-claims[JsonWebTokenとして直接注入さ] れます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 3 - OIDC Proxy"
msgstr "ステップ3 - OIDCプロキシ"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Finally, let's talk about the OIDC Proxy.\n"
"We have our OIDC Strava service endpoint calling the Stava API.\n"
"It is time to make it accessible to the external SPA using the OIDC Proxy and an authorization code flow authentication process."
msgstr "最後に、OIDCプロキシについて説明します。StavaAPIを呼び出すOIDC Stravaサービスのエンドポイントができました。OIDC Proxyと認可コードフロー認証プロセスを使用して、外部のSPAからアクセスできるようにします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "All we need to do is adding the following dependency:"
msgstr "あとは以下の依存関係を追加するだけです："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "It exposes the OIDC `/q/oidc/authorize` endpoint to accept custom GPT authentication redirects and the `/q/oidc/token` endpoint to exchange the authorization code and tokens."
msgstr "カスタム GPT 認証のリダイレクトを受け付ける OIDC `/q/oidc/authorize` エンドポイントと、認可コードとトークンを交換する `/q/oidc/token` エンドポイントを公開しています。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Let's now update the application configuration to setup our proxy:"
msgstr "アプリケーションの設定を更新して、プロキシをセットアップしましょう："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Request OIDC Proxy to create an endpoint that will support redirects from the actual OIDC provider. As explained in the <<strava_application_registration>> section, it can be helpful to register the known, trusted domain URL in the OIDC provider's dashboard. This property is already set to `/strava` with the Strava provider by default to restrict the possible callback URLs, as explained in the <<strava_application_registration>> section; this example shows how it can be customized. You do not have to use `quarkus.oidc.authentication.redirect-path`, but please be aware of this property."
msgstr "OIDC プロキシに、実際の OIDC プロバイダからのリダイレクトをサポートするエンドポイントの作成を依頼します。 <<strava_application_registration>> セクションで説明したように、OIDC プロバイダーのダッシュボードに既知の信頼できるドメイン URL を登録すると便利です。このプロパティは、 <<strava_application_registration>> セクションで説明したように、可能なコールバック URL を制限するために、デフォルトですでに Strava プロバイダで `/strava` に設定されています。この例では、どのようにカスタマイズできるかを示します。 `quarkus.oidc.authentication.redirect-path` を使用する必要はありませんが、このプロパティに注意してください。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "The external callback URL where OIDC Proxy will redirect the user to after accepting the `quarkus.oidc.authentication.redirect-path` callback."
msgstr "OIDCプロキシが `quarkus.oidc.authentication.redirect-path` 、ユーザーをリダイレクトする外部コールバックURL。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "<<ngrok, NGrok>> will terminate the HTTPS connection before calling an `HTTP` based endpoint, so the original `HTTPS` scheme must be used for building an external redirect URL."
msgstr "xref:ngrok[NGrok] は、 `HTTP` ベースのエンドポイントを呼び出す前に HTTPS 接続を終了するので、外部リダイレクト URL を作成する場合は、元の `HTTPS` スキームを使用する必要があります。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Set the external client id and secret that will be used during the integration with the 3rd party SPA. Use these properties if you do not want to expose\n"
"the real client id and secret to the SPA."
msgstr "サードパーティ製SPAとの統合時に使用する、外部クライアントIDとシークレットを設定します。実際のクライアント ID とシークレットを SPA に公開したくない場合は、これらのプロパティを使用します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "We're done! Let's run it:"
msgstr "終わりました！走りましょう"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "If you prefer to use the Quarkus _dev_ mode, then, to allow the redirects from the external SPA to the OIDC Proxy authorization endpoint, you have to disable the DevUI CORS control:"
msgstr "Quarkusの _開発_ モードを使用する場合、外部SPAからOIDC Proxy認証エンドポイントへのリダイレクトを許可するには、DevUIのCORSコントロールを無効にする必要があります："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 4 - NGrok"
msgstr "ステップ4 - NGrok"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "3rd party SPA will most likely require that the OIDC provider endpoints are HTTPS-based, therefore, to make OIDC Proxy endpoints use the HTTPS scheme on the localhost, using https://ngrok.com/[NGrok] is the simplest way to do it."
msgstr "サードパーティのSPAは、OIDCプロバイダのエンドポイントがHTTPSベースであることを要求する可能性が高いため、OIDCプロキシエンドポイントがローカルホスト上でHTTPSスキームを使用するようにするには、 link:https://ngrok.com/[NGrokを] 使用するのが最も簡単な方法です。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Note that:"
msgstr "注意してください："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"does not prevent the NGrok warning that the website is served for free from NGrok, which confuses the custom GPT's OAuth authorization code flow support.\n"
"In this case you should enable an HTTP tunnel as described in this https://stackoverflow.com/questions/73017353/how-to-bypass-ngrok-browser-warning[Stack Overflow post], for example:"
msgstr "を使用しても、ウェブサイトが NGrok から無料で提供されているという NGrok の警告は表示されず、カスタム GPT の OAuth 認可コードフローサポートが混乱します。この場合、例えばこの link:https://stackoverflow.com/questions/73017353/how-to-bypass-ngrok-browser-warning[Stack Overflow の投稿で] 説明されているように HTTP トンネルを有効にする必要があります："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 5 - Create the custom GPT"
msgstr "ステップ5 - カスタムGPTの作成"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "As noted in the <<gpt_actions>> section, custom GPT actions can only be created with ChatGPT Plus and Enterprise subscriptions. Please see the <<next-steps>> section below for other suggestions to experiment with OIDC Proxy."
msgstr "<<gpt_actions>> にあるように、カスタム GPT アクションは ChatGPT Plus と Enterprise サブスクリプションでのみ作成できます。OIDC プロキシを使用した他の提案については、以下の <<next-steps>> セクションを参照してください。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Login to your ChatGPT account, and choose `Create` in `My GPTs`:"
msgstr "ChatGPTアカウントにログインし、 `My GPTs` で `Create` を選択してください："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Name it as `Quarkus Fitness Adviser` and provide its description:"
msgstr "名前を `Quarkus Fitness Adviser` とし、その説明を記入してください："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Next, choose an `OAuth` authentication option:"
msgstr "次に、 `OAuth` 認証オプションを選択します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "and set the OAuth2 authorize and token endpoint addresses, keeping in mind your free <<ngrok>> domain name and that you have set the OIDC Proxy root address to `/oidc` in the <<oidc_proxy>> section:"
msgstr "で、OAuth2 の authorize と token のエンドポイントアドレスを設定します。このとき、 <<ngrok>> のドメイン名と、 <<oidc_proxy>> の OIDC Proxy のルートアドレスが `/oidc` に設定されていることに注意してください："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Set the client id and secret to the external client id and external client secret properties which you configured in the <<oidc_proxy>> section."
msgstr "クライアントIDとシークレットを、 <<oidc_proxy>> セクションで設定した外部クライアントIDと外部クライアントシークレットのプロパティに設定します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now you can see that this custom GPT's OAuth setup has been completed without sharing a single detail related to the Strava provider configuration in the Quarkus OIDC service endpoint.\n"
"You also do not need to set the scopes, OIDC Proxy knows about them from the Quarkus OIDC endpoint configuration."
msgstr "これで、このカスタムGPTのOAuth設定が、Quarkus OIDCサービスエンドポイントのStravaプロバイダ設定に関連する詳細を共有することなく完了したことがわかります。また、スコープを設定する必要もありません。OIDC ProxyはQuarkus OIDCエンドポイントの設定からスコープを知っています。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Next, import an OpenAPI schema by choosing an `Import from URL` option and entering `http://<your-free-ngrok-domain>/q/openapi`:"
msgstr "次に、 `Import from URL` オプションを選択し、次のように入力して OpenAPI スキーマをインポートします。 `http://<your-free-ngrok-domain>/q/openapi` :"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "At this point you are ready to save this GPT and start using it."
msgstr "この時点で、このGPTを保存して使い始める準備ができました。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Note this GPT's callback, this is the external callback URI value you configured in the <<oidc_proxy>> section:"
msgstr "このGPTのコールバックに注意してください。これは <<oidc_proxy>> セクションで設定した外部コールバックURI値です："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You have to decide if you would like to share this GPT. Most likely, after testing it, you will prefer to share it with your team to test it, and eventually, with your customers."
msgstr "このGPTを共有するかどうかを決めなければなりません。たいていの場合、テストした後、チームでテストし、最終的には顧客と共有することを好むでしょう。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "In this case, the first thing you have to do is to ask ChatGPT for a typical privacy policy text, if you do not already have it, and after modifying it as necessary, save it, for example, in a `privacy.txt` document in the `src/main/resources/META-INF/resources/` of your <<strava_service>> application and link to it in the `Privacy Policy` configuration field as `http://<your-free-ngrok-domain>/privacy.txt`. Finally, publish it using the `Anyone with a link` option."
msgstr "この場合、まず、ChatGPT に典型的なプライバシーポリシーテキストを要求し、必要に応じて修正した後、例えば、 <<strava_service>> アプリケーションの `src/main/resources/META-INF/resources/` の `privacy.txt` ドキュメントに保存し、 `Privacy Policy` 設定フィールドに次のようにリンクします。 `http://<your-free-ngrok-domain>/privacy.txt` .最後に、 `Anyone with a link` オプションを使って公開します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "`Quarkus Fitness Adviser` is now ready:"
msgstr "`Quarkus Fitness Adviser` の準備が整いました："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Step 6 - Use the custom GPT"
msgstr "ステップ6 - カスタムGPTの使用"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Let's start with asking `Quarkus Fitness Adviser` to check the athlete profile:"
msgstr "まずは `Quarkus Fitness Adviser` 、選手のプロフィールを確認してもらいましょう："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "When you ask the GPT the first question, it will attempt to sign you in using the OAuth authentication option. Select the `Sign in` option and you will be redirected to OIDC Proxy which will in turn redirect to Strava to authenticate:"
msgstr "GPTに最初の質問をすると、OAuth認証オプションを使ってサインインを試みます。 `Sign in` オプションを選択すると、OIDC Proxy にリダイレクトされ、Strava にリダイレクトされて認証されます："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Enter your Strava name and password and continue. You will be asked to authenticate again only when the access token acquired with the authorization code flow has expired."
msgstr "Strava名とパスワードを入力し、次へ進みます。認可コードフローで取得したアクセストークンの有効期限が切れた場合のみ、再度認証を求められます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "After the successful authentication you will be asked to authorize the `Quarkus Fitness Adviser` applicaton which you registered in the <<strava_application_registration>> section:"
msgstr "認証に成功すると、 <<strava_application_registration>> セクションで登録した `Quarkus Fitness Adviser` アプリケーションの認証を求められます："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "The https://developers.strava.com/docs/authentication/#detailsaboutrequestingaccess[Strava API scopes] which have been configured for the <<strava_service>> affect what you will be asked to authorize."
msgstr "<<strava_service>> に設定されている link:https://developers.strava.com/docs/authentication/#detailsaboutrequestingaccess[Strava APIスコープは] 、認証を求められる内容に影響します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"You will now be redirected to the custom GPT with the authorization code which will be exchanged for the access and refresh tokens using OIDC Proxy.\n"
"The GPT will now want to talk to the Quarkus API and ask you to approve it:"
msgstr "認可コードとともにカスタムGPTにリダイレクトされ、OIDC Proxyを使用してアクセスおよびリフレッシュトークンと交換されます。GPTはQuarkus APIと対話し、承認を求めます："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Approve it and `Quarkus Fitness Adviser` will provide the first answer:"
msgstr "承認すると、 `Quarkus Fitness Adviser` 、最初の回答が表示されます："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "It also provides information about your bike, running shoes, and gives some initial recommendations. You can now ask for some advice on balancing cycling and swimming, running, etc."
msgstr "また、自転車やランニングシューズの情報を提供し、最初のおすすめをいくつか教えてくれます。サイクリングと水泳、ランニングなどのバランスについてアドバイスを求めることもできます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Next, let's ask about the the latest activity:"
msgstr "次に、最近の活動についてお聞きします："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Ask it to be more specific about the latest activity and provide some advice. Quarkus Fitness Adviser responds:"
msgstr "最新のアクティビティについてより具体的に説明し、アドバイスを提供するよう求めてください。Quarkus Fitness Adviserが回答します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "and concludes with a sound advice to have good rest and recovery."
msgstr "そして、休養と回復のための適切なアドバイスで締めくくられています。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Finally, let's ask it to check the profile again and provide more recommendations. `Quarkus Fitness Adviser` is happy to help and provides, in my case, eight personalized recommendations, I will only show the start of the response:"
msgstr "最後に、もう一度プロフィールをチェックして、さらにおすすめを提供してくれるよう頼んでみましょう。 `Quarkus Fitness Adviser` 、喜んでお手伝いし、私の場合は8つのパーソナライズされたおすすめを提供してくれました。ここでは、回答の最初だけを表示します："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "and the end of it:"
msgstr "そして終わり："

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "We will return to this advice later in this post."
msgstr "このアドバイスについては、この記事の後半で触れることにします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Let's finish by saying `Thank you`:"
msgstr "最後に `Thank you` ："

#: _posts/2024-03-27-oidc-proxy.adoc
msgid "Next Steps"
msgstr "次のステップ"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"So far, `Quarkus Fitness Adviser` has helped to analyze the authenticated athlete's profile and activities.\n"
"Please experiment further by creating a more advanced version of `Quarkus Fitness Adviser` by checking the routes, zones, and other fitness data supported by the https://developers.strava.com/docs/reference/[Strava API]."
msgstr "これまでのところ、 `Quarkus Fitness Adviser` は認証されたアスリートのプロフィールとアクティビティを分析するのに役立っています。 link:https://developers.strava.com/docs/reference/[StravaAPIが] サポートするルート、ゾーン、その他のフィットネスデータをチェックすることで、より高度なバージョンの `Quarkus Fitness Adviser` 。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Create a new custom GPT with the help of https://quarkus.io/guides/security-openid-connect-providers[any other well-known social provider supported in Quarkus]."
msgstr "link:https://quarkus.io/guides/security-openid-connect-providers[Quarkusでサポートされている他の有名なソーシャルプロバイダーを] 使用して、新しいカスタムGPTを作成します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Also note, your Quarkus OIDC service endpoint does not have to propagate the access token. For example, if you use Keycloak or Auth0, then the access tokens in JWT formats issued by these OIDC compliant providers can be verified by Quarkus OIDC to provide a role-based or permission-based access control for custom GPT's requests, with the service endpoint returning data from the database, etc."
msgstr "また、Quarkus OIDCサービスのエンドポイントは、アクセストークンを伝播する必要はないことに注意してください。たとえば、KeycloakやAuth0を使用している場合、これらのOIDC準拠プロバイダーが発行したJWT形式のアクセストークンをQuarkus OIDCで検証することで、カスタムGPTのリクエストに対してロールベースまたはパーミッションベースのアクセス制御を提供し、サービスエンドポイントがデータベースからデータを返すなどすることができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You are also encouraged to look closely at the https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j] project which provides a top class integration between Quarkus and the https://github.com/langchain4j/langchain4j[LangChain4j] library."
msgstr "また、 link:https://github.com/quarkiverse/quarkus-langchain4j[Quarkusと] link:https://github.com/langchain4j/langchain4j[LangChain4j] ライブラリ間のトップクラスの統合を提供する link:https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j] プロジェクトをよく見ることをお勧めします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "How about creating a custom GPT which will use OIDC Proxy to authenticate custom GPT users to Keycloak or Auth0 or Azure and access Quarkus OIDC service endpoint powered by https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j] ? Give it a try please !"
msgstr "OIDCプロキシを使用して、カスタムGPTユーザーをKeycloakやAuth0、Azureで認証し、Quarkusの link:https://github.com/quarkiverse/quarkus-langchain4j[LangChain4jを] 使用したQuarkus OIDCサービスエンドポイントにアクセスするカスタムGPTを作成するのはどうでしょうか？試してみてください！"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "What if you do not have ChatGPT Plus or Enterprise subscriptions ?"
msgstr "ChatGPT PlusやEnterpriseを契約していない場合は？"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Not a problem, OIDC Proxy will work with any SPA which implements an authorization code flow and prefers to have an OIDC provider neutral integration, please test OIDC Proxy with such SPAs."
msgstr "問題ありません。OIDC Proxyは、認可コードフローを実装し、OIDCプロバイダに依存しない統合を好むSPAであれば動作します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Alternatively, experiment with configuring Quarkus OIDC `web-app` applications using OIDC Proxy to authenticate users before calling OIDC service endpoints. For example, imagine three different Quarkus OIDC `web-app` applications using the same Keycloak realm to authenticate the users with an authorization code flow and propagating the access tokens to the same OIDC `service` application. Now, instead of setting the Keycloak specific details in all of the OIDC `web-app` applications, you can try to add OIDC Proxy to the OIDC Service endpoint and configure the OIDC `web-app` applications to use OIDC Proxy."
msgstr "または、OIDCサービスエンドポイントを呼び出す前にユーザーを認証するために、OIDC Proxyを使用してQuarkus OIDC `web-app` アプリケーションを構成することもできます。例えば、3つの異なるQuarkus OIDC `web-app` アプリケーションが、同じKeycloakレルムを使用して認可コードフローでユーザーを認証し、アクセストークンを同じOIDC `service` アプリケーションに伝搬するとします。ここで、すべてのOIDC `web-app` アプリケーションにKeycloak固有の詳細を設定する代わりに、OIDCサービスのエンドポイントにOIDC Proxyを追加し、OIDC `web-app` アプリケーションがOIDC Proxyを使用するように設定することができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "セキュリティ"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You have already seen several OIDC Proxy security features in the <<oidc_proxy>> section."
msgstr "OIDCプロキシのセキュリティ機能については、 <<oidc_proxy>> 。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "General OIDC Proxy feature is about hiding all the real OIDC provider specific details from the SPA, including all the OAuth2 or OIDC provider specific details, as well as the extra scopes which are requested during the authentication redirect to the provider."
msgstr "一般的な OIDC プロキシ機能は、OAuth2 や OIDC プロバイダ固有の詳細や、プロバイダへの認証リダイレクト中に要求される余分なスコープなど、実際の OIDC プロバイダ固有の詳細すべてを SPA から隠します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "OIDC Proxy allows you to set the trusted domain in the allowed callback URI which is registered in the OIDC provider and enables a callback bridge between the real OIDC provider and the external SPA."
msgstr "OIDC プロキシでは、OIDC プロバイダに登録されるコールバック許可 URI に信頼されたドメインを設定し、実際の OIDC プロバイダと外部 SPA とのコールバックブリッジを可能にします。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You can hide the real client id and client secret which OIDC Proxy must use from the external SPA."
msgstr "OIDCプロキシが使用しなければならない本当のクライアントIDやクライアントシークレットを、外部のSPAから隠すことができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "You can request that OIDC Proxy does not return a refresh and/or ID token from the authorization code token exchange to the SPA."
msgstr "OIDC Proxyは、認可コードトークン交換からSPAにリフレッシュおよび/またはIDトークンを返さないように要求することができます。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid ""
"Refresh token is the most powerful token, usually with a long life-span. If an SPA leaks it, alongside the client id and secret, the attacker can\n"
"refresh and use access tokens to access the API for a long time. Therefore, if you are concerned about SPA, such as a custom GPT, possibly leaking this information, add `quarkus.oidc-proxy.allow-refresh-token=false` to the configuration to request OIDC Proxy to remove the refresh token value from the authorization code flow response which it is about to return to the GPT. It will not block a given custom GPT from using the Quarkus API, it will only require this GPT to re-authenticate the user when the access token has expired, as opposed to refreshing it."
msgstr "リフレッシュトークンは最も強力なトークンで、通常は寿命が長いです。もしSPAがクライアントIDやシークレットと一緒にこれを漏らすと、攻撃者は長い間APIにアクセスするためにアクセストークンをリフレッシュして使用することができます。したがって、カスタムGPTのようなSPAがこの情報を漏えいする可能性を懸念する場合は、 `quarkus.oidc-proxy.allow-refresh-token=false` を設定に追加して、OIDC ProxyがGPTに返そうとしている認可コードフローのレスポンスからリフレッシュトークンの値を削除するように要求してください。この設定によって、カスタムGPTがQuarkus APIを使用することがブロックされることはありません。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "ID token contains information about the currently authenticated user. If you know that the SPA does not need an ID token, such as a custom GPT which only works with the access and refresh tokens, then it is recommended to block returning it with `quarkus.oidc-proxy.allow-id-token=false`"
msgstr "IDトークンには、現在認証されているユーザーに関する情報が含まれます。アクセストークンとリフレッシュトークンのみで動作するカスタムGPTなど、SPAがIDトークンを必要としないことがわかっている場合は、IDトークンを返すのを `quarkus.oidc-proxy.allow-id-token=false`"

#: _posts/2024-03-27-oidc-proxy.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "In this post, we looked at how https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] can help to integrate OIDC service endpoints with SPA without having to expose the internal OIDC connection details. We have built `Quarkus Fitness Adviser`, a https://platform.openai.com/docs/actions/introduction[custom GPT], which uses OIDC Proxy to authenticate users with https://quarkus.io/guides/security-openid-connect-providers#strava[Strava] and provides fitness advice by reading the authenticated user-specific data from the Quarkus OIDC Strava service."
msgstr "この投稿では、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] 、内部のOIDC接続の詳細を公開することなく、OIDCサービスエンドポイントをSPAに統合するのに役立つ方法を見てきました。 `Quarkus Fitness Adviser` この link:https://platform.openai.com/docs/actions/introduction[GPTは] 、OIDC Proxyを使用して link:https://quarkus.io/guides/security-openid-connect-providers#strava[Stravaで] ユーザーを認証し、Quarkus OIDC Stravaサービスから認証されたユーザー固有のデータを読み込んでフィットネスアドバイスを提供します。"

#: _posts/2024-03-27-oidc-proxy.adoc
#, fuzzy
msgid "Enjoy Quarkus, and, as the `Quarkus Fitness Adviser` recommended, enjoy the ride!"
msgstr "`Quarkus Fitness Adviser` ！"

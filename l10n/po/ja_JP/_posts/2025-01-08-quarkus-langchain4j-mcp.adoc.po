msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Using the Model Context Protocol with Quarkus+LangChain4j"
msgstr "Quarkus+LangChain4j でのモデル・コンテキスト・プロトコルの使用"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Executing tools via the Model Context Protocol with Quarkus+LangChain4j"
msgstr "Quarkus+LangChain4jによるモデル・コンテキスト・プロトコル経由のツールの実行"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We are thrilled to announce that starting with version 0.23.0, the Quarkus\n"
"LangChain4j project integrates calling tools using the\n"
"https://modelcontextprotocol.io[Model Context Protocol (MCP)]."
msgstr "バージョン0.23.0から、Quarkus LangChain4jプロジェクトは、 link:https://modelcontextprotocol.io[モデルコンテキストプロトコル（MCP] ）を使用した呼び出しツールを統合しています。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "What is the Model Context Protocol?"
msgstr "モデル・コンテキスト・プロトコルとは何ですか？"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"MCP is an open protocol that standardizes how applications provide context\n"
"to LLMs. An MCP server is an application that can provide tools, resources\n"
"(be it a set of static documents or dynamically accessed data, for example\n"
"from a database), or pre-defined prompts that your AI-infused application\n"
"can use when talking to LLMs. When you package such functionality into an\n"
"MCP server, it can be plugged into and used by any LLM client toolkit that\n"
"supports MCP, including Quarkus and LangChain4j. There is also already a\n"
"growing ecosystem of reusable MCP servers that you can use out of the box,\n"
"and Quarkus also offers the\n"
"https://github.com/quarkiverse/quarkus-mcp-server[quarkus-mcp-server extension] that allows you\n"
"to create MCP servers, but in this article, we will focus on the client\n"
"side. More on creating MCP servers later."
msgstr "MCPは、アプリケーションがLLMにコンテキストを提供する方法を標準化するオープンプロトコルです。MCPサーバーは、ツールやリソース（静的なドキュメントのセットであれ、データベースから動的にアクセスされるデータであれ）、あらかじめ定義されたプロンプトを提供することができるアプリケーションです。このような機能をMCPサーバにパッケージすれば、QuarkusやLangChain4jなど、MCPをサポートするLLMクライアントツールキットに接続して使用することができます。再利用可能なMCPサーバーのエコシステムもすでに拡大しており、QuarkusはMCPサーバーを作成できる link:https://github.com/quarkiverse/quarkus-mcp-server[quarkus-mcp-serverエクステンションを] 提供していますが、この記事ではクライアント側に焦点を当てます。MCPサーバーの作成については後で詳しく説明します。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"In version 0.23.x,\n"
"https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4j]\n"
"implements the client side of the MCP protocol to allow tool execution.\n"
"Support for resources and prompts is planned for future releases."
msgstr "バージョン0.23.xでは、 link:https://github.com/quarkiverse/quarkus-langchain4j[Quarkus LangChain4jに] MCPプロトコルのクライアント側が実装され、ツールの実行が可能になりました。リソースとプロンプトのサポートは、将来のリリースを予定しています。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"In this article, we will show you how to use Quarkus and LangChain4j to\n"
"easily create an application that connects to an MCP server providing\n"
"filesystem-related tools and exposes a chatbot that a user can use to\n"
"interact with the local filesystem, that means read and write files as\n"
"instructed by the user."
msgstr "この記事では、QuarkusとLangChain4jを使って、ファイルシステム関連ツールを提供するMCPサーバに接続し、ユーザがローカルファイルシステムと対話するために使用できるチャットボットを公開するアプリケーションを簡単に作成する方法を紹介します。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"There is no need to set up an MCP server separately, we will configure\n"
"Quarkus to run one as a subprocess. As you will see, setting up MCP with\n"
"Quarkus is extremely easy."
msgstr "サブプロセスとしてMCPサーバーを実行するようにQuarkusを設定します。このように、QuarkusでのMCPの設定は非常に簡単です。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"To download the final project, visit the\n"
"https://github.com/quarkiverse/quarkus-langchain4j/tree/0.23.0/samples/mcp-tools[\n"
"quarkus-langchain4j samples]. That sample contains the final functionality\n"
"developed in this article, plus some stuff on top, like a JavaScript-based\n"
"UI. In this article, for simplicity, we will skip the creation of that UI,\n"
"and we will only use the Dev UI chat page that comes bundled in Quarkus out\n"
"of the box."
msgstr "最終的なプロジェクトをダウンロードするには、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/0.23.0/samples/mcp-tools[quarkus-langchain4j samplesを] ご覧ください。このサンプルには、この記事で開発した最終的な機能に加えて、JavaScriptベースのUIなどが含まれています。この記事では、シンプルにするために、UIの作成は省略し、Quarkusに同梱されているDev UIのチャットページのみを使用します。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Apache Maven 3.9+"
msgstr "Apache Maven 3.9+"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "The `npm` package manager installed on your machine"
msgstr "あなたのマシンにインストールされている `npm` パッケージマネージャ"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Creating a Filesystem assistant project"
msgstr "ファイルシステムアシスタントプロジェクトの作成"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We will assume that you are using OpenAI as the LLM provider. If you are\n"
"using a different provider, you will need to swap out the\n"
"`quarkus-langchain4j-openai` extension and use something else."
msgstr "LLMプロバイダとしてOpenAIを使用していると仮定します。別のプロバイダを使用している場合は、 `quarkus-langchain4j-openai` の拡張子を入れ替えて、別のものを使用する必要があります。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Start by generating a Quarkus project. If you are using the Quarkus CLI, you can do it like this:"
msgstr "Quarkusプロジェクトを生成することから始めます。Quarkus CLIを使用している場合は、次のようにします："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"If you prefer to use the web-based project generator, go to\n"
"https://code.quarkus.io/[code.quarkus.io] and select the same extensions."
msgstr "ウェブベースのプロジェクトジェネレーターを使用したい場合は、 link:https://code.quarkus.io/[code.quarkus.ioに] アクセスし、同じ拡張子を選択します。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Whenever you run the application, make sure the\n"
"`QUARKUS_LANGCHAIN4J_OPENAI_API_KEY` environment variable is set to your\n"
"OpenAI API key."
msgstr "アプリケーションを実行するときはいつでも、 `QUARKUS_LANGCHAIN4J_OPENAI_API_KEY` 環境変数に OpenAI API キーが設定されていることを確認してください。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Create the directory to be used by the agent"
msgstr "エージェントが使用するディレクトリの作成"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Under the root directory of the Maven project, create a directory named `playground`.\n"
"This will be the only directory that the agent will be allowed to interact with."
msgstr "Maven プロジェクトのルートディレクトリの下に、 `playground` という名前のディレクトリを作成します。これはエージェントが対話することを許可される唯一のディレクトリになります。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Inside that directory, create any files that you want for testing. For\n"
"example, create a file named `playground/hello.txt` with the following\n"
"contents:"
msgstr "そのディレクトリの中に、テスト用に必要なファイルを作成します。例えば、 `playground/hello.txt` という名前のファイルを以下の内容で作成します："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Hello, world!"
msgstr "こんにちは、世界よ！"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Create the AI service"
msgstr "AIサービスの作成"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Next, we need to define an AI service that will define how the bot should\n"
"behave. The interface will look like this:"
msgstr "次に、ボットの動作を定義するAIサービスを定義する必要があります。インターフェースは次のようになります："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Feel free to adjust the system message to your liking, but this one should\n"
"be suitable to get the application working as expected."
msgstr "システムメッセージはお好みで自由に調整できますが、このメッセージはアプリケーションが期待通りに動作するのに適しているはずです。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Configure the MCP server and the connection to it"
msgstr "MCPサーバーとその接続の設定"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"We will use\n"
"https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem[server-filesystem]\n"
"MCP server that comes as an NPM package, this is why you need to have `npm`\n"
"installed on your machine. It is assumed that you have the `npm` binary\n"
"available on your `PATH` (the `PATH` variable that the Quarkus process\n"
"sees)."
msgstr "NPMパッケージとして提供されている link:https://www.npmjs.com/package/@modelcontextprotocol/server-filesystem[server-filesystem] MCPサーバーを使用します。そのため、 `npm` をマシンにインストールする必要があります。 `PATH` （Quarkusプロセスが参照する `PATH` 変数）には、 `npm` バイナリがあるものとします。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Starting the server and configuring the connection to it is extremely easy.\n"
"We will simply tell Quarkus to start up a `server-filesystem` MCP server as\n"
"a subprocess and then communicate with it over the `stdio` transport. All\n"
"you need to do is to add two lines into your `application.properties`:"
msgstr "サーバーの起動と接続の設定は非常に簡単です。Quarkusに、 `server-filesystem` MCPサーバーをサブプロセスとして起動し、 `stdio` トランスポートを介して通信するように指示するだけです。 `application.properties` に2行追加するだけです："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"With this configuration, Quarkus will know that it should create a MCP\n"
"client that will be backed by a server that will be started by executing\n"
"`npm exec @modelcontextprotocol/server-filesystem@0.6.2 playground` as a\n"
"subprocess. The `playground` argument denotes the path to the directory that\n"
"the agent will be allowed to interact with. The `stdio` transport means that\n"
"the client will communicate with the server over standard input and output."
msgstr "この設定により、Quarkusは、 `npm exec @modelcontextprotocol/server-filesystem@0.6.2 playground` をサブプロセスとして実行することで起動するサーバーによってバックアップされるMCPクライアントを作成する必要があることを認識します。 `playground` 引数は、エージェントが対話できるディレクトリへのパスを示します。 `stdio` トランスポートは、クライアントが標準入出力でサーバと通信することを意味します。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"When you configure one or more MCP connections this way, Quarkus also\n"
"automatically generates a `ToolProvider`. Any AI service that does not\n"
"explicitly specify a tool provider will be automatically wired up to this\n"
"generated one, so you don't need to do anything else to make the MCP\n"
"functionality available to the AI service."
msgstr "この方法で1つまたは複数のMCP接続を設定すると、Quarkusは自動的に `ToolProvider` 。ツールプロバイダを明示的に指定していないAIサービスは、自動的にこの生成されたツールプロバイダに接続されます。したがって、AIサービスでMCP機能を使用できるようにするために、他に何もする必要はありません。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Optionally, if you want to see the actual traffic between the application\n"
"and the MCP server, add these three additional lines to your\n"
"`application.properties`:"
msgstr "アプリケーションとMCPサーバー間の実際のトラフィックを確認したい場合は、 `application.properties` に以下の3行を追加してください："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "And that's all! Now, let's test it."
msgstr "以上です！では、テストしてみましょう。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Try it out"
msgstr "お試しください"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"Since we didn't create any UI for our application that a user could use,\n"
"let's use the Dev UI that comes with Quarkus out of the box. With the\n"
"application running in development mode, access\n"
"http://localhost:8080/q/dev-ui in your browser and click the `Chat` link in\n"
"the `LangChain4j` card (either that, or go to\n"
"http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat\n"
"directly)."
msgstr "ユーザーが使用できるアプリケーションのUIを作成していないので、Quarkusに付属しているDev UIを使用しましょう。アプリケーションを開発モードで実行している状態で、ブラウザで link:http://localhost:8080/q/dev-ui[http://localhost:8080/q/dev-ui に] アクセスし、 `LangChain4j` カード内の `Chat` リンクをクリックします（または、 http://localhost:8080/q/dev-ui/io.quarkiverse.langchain4j.quarkus-langchain4j-core/chat に直接アクセスします）。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Try a prompt to ask the agent to read a file that you created previously, such as:"
msgstr "以前に作成したファイルを読み込むようにエージェントに依頼するプロンプトを、次のように試してください："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Read the contents of the file hello.txt."
msgstr "ファイルhello.txtの内容を読んでください。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"If all is set up correctly, the agent will respond with the contents of the\n"
"file, like in this screenshot:"
msgstr "すべてが正しく設定されていれば、エージェントはこのスクリーンショットのようにファイルの内容で応答します："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "The bot can also write files, so try a prompt such as:"
msgstr "ボットはファイルを書き込むこともできます："

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Write a Python script that prints \"Hello, world!\" and save it as hello.py."
msgstr "Hello, world!\"を表示するPythonスクリプトを書いて、hello.pyとして保存してください。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid "Then have a look into your `playground` directory, and you should see the new Python file there!"
msgstr "そして `playground` ディレクトリを見てください。新しい Python ファイルがあるはずです！"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"The Model Context Protocol allows you to easily integrate reusable sets of\n"
"tools and resources to AI-infused applications in a portable way. With the\n"
"Quarkus LangChain4j extension, you can instruct Quarkus to run a server\n"
"locally as a subprocess, and configuring application to use it is just a\n"
"matter of adding a few configuration properties."
msgstr "モデルコンテキストプロトコルを使用すると、再利用可能なツールやリソースのセットを、ポータブルな方法でAIを組み込んだアプリケーションに簡単に統合できます。QuarkusのLangChain4j拡張機能を使用すると、Quarkusにサーバーをサブプロセスとしてローカルで実行するように指示できます。"

#: _posts/2025-01-08-quarkus-langchain4j-mcp.adoc
#, fuzzy
msgid ""
"And that's not all. Stay tuned, because Quarkus also has an extension that\n"
"allows you to create MCP servers! More about that soon. *UPDATE:* The post\n"
"about the server side is now available:\n"
"https://quarkus.io/blog/mcp-server/[Implementing a MCP server in Quarkus]."
msgstr "それだけではありません。Quarkusには、MCPサーバーを作成できる拡張機能もあります！詳しくは近日中に。 *UPDATE:* サーバーサイドに関する投稿を公開しました： link:https://quarkus.io/blog/mcp-server/[QuarkusでのMCPサーバーの実装] 。"

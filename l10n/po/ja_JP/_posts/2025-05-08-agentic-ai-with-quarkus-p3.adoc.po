msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Agentic AI with Quarkus - part 3"
msgstr "QuarkusによるエージェントAI - パート3"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "The https://quarkus.io/blog/agentic-ai-with-quarkus/[first part] of this blog post series briefly introduced agentic AI and discussed workflow patterns. Subsequently, the https://quarkus.io/blog/agentic-ai-with-quarkus-p2/[second installment] explored the proper agentic patterns, showing how to implement them using Quarkus and its LangChain4j extension."
msgstr "このブログ記事シリーズの link:https://quarkus.io/blog/agentic-ai-with-quarkus/[最初のパートでは] 、エージェント型AIを簡単に紹介し、ワークフローパターンについて説明しました。その後、 link:https://quarkus.io/blog/agentic-ai-with-quarkus-p2/[第2回] では、QuarkusとそのLangChain4jエクステンションを使った実装方法を紹介しながら、適切なエージェントパターンを探りました。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "This third article aims to clarify the differences between these two approaches, discuss their pros and cons, and demonstrate with a practical example how to migrate an AI-infused service using a workflow pattern to a pure agentic implementation."
msgstr "この第3回目の記事では、これら2つのアプローチの違いを明確にし、その長所と短所を議論し、ワークフローパターンを使用してAIを組み込んだサービスを純粋なエージェント型実装に移行する方法を実例で示します。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "In essence, the most relevant difference between the two is that workflow patterns are programmatically orchestrated through handcrafted code paths, while agents autonomously decide their own processes and tool usage, maintaining control over how they execute tasks. This makes them more flexible and adaptable to various scenarios, but it also makes them less predictable and, in some cases, more prone to hallucinations."
msgstr "本質的に、この2つの最も関連性のある違いは、ワークフローパターンが手作りのコードパスを通してプログラム的にオーケストレーションされるのに対し、エージェントは自律的にプロセスやツールの使い方を決定し、タスクの実行方法をコントロールすることです。そのため、より柔軟で様々なシナリオに適応することができますが、予測しにくく、場合によっては幻覚を見やすいとも言えます。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "AI Workflow Vs. Pure Agentic AI"
msgstr "AIワークフローと純粋なエージェントAI"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "From Workflow to Agents"
msgstr "ワークフローからエージェントへ"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "https://quarkus.io/blog/agentic-ai-with-quarkus/#routing[Routing] is one of the workflow patterns presented in the first article of this series. There, we used a first LLM service to categorize the user request and then used that category to programmatically reroute that request to one of three other LLMs acting as medical, legal, or technical experts."
msgstr "link:https://quarkus.io/blog/agentic-ai-with-quarkus/#routing[ルーティングは] 、このシリーズの最初の記事で紹介したワークフローパターンの一つです。そこでは、最初のLLMサービスを使ってユーザーのリクエストを分類し、その分類を使って、医療、法律、技術の専門家として働く他の3人のLLMのうちの1人に、そのリクエストをプログラムでリルートしました。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Routing pattern"
msgstr "ルーティングパターン"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "In that example, each expert was implemented as a separate and independent LLM service, and the routing to one of them was performed programmatically by the application code. Tracing the execution of a request like:"
msgstr "この例では、各エキスパートは別個の独立したLLMサービスとして実装され、そのうちの1つへのルーティングはアプリケーションコードによってプログラム的に実行されました。のようなリクエストの実行をトレースします："

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "The resulting traces show the sequence of steps performed to fulfill the user request: first, the relatively fast, less than 2 seconds, classification phase conducted by the Router Agent, then the more expensive invocation of the selected expert service, which took almost 25 seconds to generate its answer."
msgstr "まず、ルーターエージェントによる2秒未満の比較的高速な分類フェーズが行われ、次に、選択されたエキスパートサービスの呼び出しが行われます。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Tracing routing workflow pattern execution"
msgstr "ルーティングワークフローパターン実行のトレース"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid ""
"In this example, we use the same model to classify and generate the response. However, it is possible to use specialized models for the classification and each experts.\n"
"Now, let’s see how we can transform this workflow approach into a more agentic one."
msgstr "この例では、分類と回答の生成に同じモデルを使用しています。しかし、分類と各エキスパートに特化したモデルを使用することも可能です。では、このワークフローのアプローチを、よりエージェント的なものに変換する方法を見てみましょう。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Quarkus integration makes it straightforward to turn these AI “expert” services into _tools_ that another AI service can invoke. You only need to annotate the AI service methods with `@Tool` and configure the caller AI service with `@Toolbox`. This approach preserves the possibility of also invoking the single expert directly as an independent LLM service, and also using specialized models for each expert. Note that this `@Tool` annotation is not related with the presence of any MCP server and has the purpose of exposing the AI service also as a tool for other AI services. It is planned to discuss MCP in the next blog post of this series."
msgstr "Quarkusの統合により、これらのAI「エキスパート」サービスを、別のAIサービスが呼び出せる _ツールに_ 簡単に変えることができます。AIサービスのメソッドに `@Tool` のアノテーションを付け、呼び出し元のAIサービスを `@Toolbox` で設定するだけです。このアプローチでは、単一のエキスパートを独立したLLMサービスとして直接呼び出したり、各エキスパートに特化したモデルを使用したりすることもできます。この `@Tool` の注釈は、MCPサーバーの存在とは関係なく、AIサービスを他のAIサービスのためのツールとしても公開することを目的としています。MCPについては、このシリーズの次のブログ記事で説明する予定です。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "This way, it is possible to provide a second alternative implementation of the same expert interrogation service, this time using a pure agentic approach. The Router Agent is replaced by a single LLM, having the three experts as _tools_, that can autonomously decide to which expert the question must be delegated."
msgstr "このようにして、今度は純粋なエージェント的アプローチを使用して、同じ専門家質問サービスの第2の代替実装を提供することが可能です。ルータエージェントは、3人の専門家を _ツールとして_ 持つ単一のLLMに置き換えられ、どの専門家に質問を委ねるかを自律的に決定することができます。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "The `@ToolBox` annotation is used to specify the list of tools the agent can use, in this case, the three experts. Note that, similarly to what has been done for other agentic examples in the previous post of this series, this AI service has been configured to use a model capable of reasoning and requesting tool invocations. In our example, the model is configured in the `application.properties` file and is using  `qwen2.5` with 7 billion parameters. In addition, the `temperature` is set to 0 to make the classification more predictable and minimize the possibility of hallucinations."
msgstr "`@ToolBox` アノテーションは、エージェントが使用できるツールのリスト、この場合は3人のエキスパートを指定するために使用されます。このシリーズの前の投稿で他のエージェントの例で行われたのと同様に、このAIサービスは、推論してツールの呼び出しを要求できるモデルを使用するように設定されていることに注意してください。この例では、モデルは `application.properties` ファイルで設定され、70 億のパラメータで `qwen2.5` を使用しています。また、 `temperature` は、分類をより予測しやすくし、幻覚の可能性を最小限にするために0に設定されています。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "At this point, the agentic implementation of this expert interrogation service is also ready and can be exposed with a different REST endpoint, making it possible to use and compare these two alternative solutions."
msgstr "この時点で、このエキスパート質問サービスのエージェント実装も準備が整い、別のRESTエンドポイントで公開することができるため、これら2つの代替ソリューションを使用して比較することが可能になります。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Comparing the workflow and agentic approaches"
msgstr "ワークフローとエージェントのアプローチの比較"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "The two approaches are equivalent in terms of functionality, but they differ in how they are implemented and the levels of control and flexibility they offer. In particular, the pure agentic solution is much simpler and more elegant, as it does not require additional code to route the request to the right expert. The agent can do that by itself. It could also use more than one expert for a single query if needed, which would be impossible with the workflow approach, where the routing is hardcoded in the application code."
msgstr "この2つのアプローチは、機能的には同等ですが、実装方法と提供する制御と柔軟性のレベルが異なります。特に、ピュアエージェントソリューションは、リクエストを適切なエキスパートにルーティングするための追加コードを必要としないため、よりシンプルでエレガントです。エージェントはそれ自身でそれを行うことができます。また、ルーティングがアプリケーションコードにハードコードされているワークフローアプローチでは不可能ですが、必要に応じて1つのクエリに対して複数のエキスパートを使用することができます。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "On the other hand, the workflow approach is more predictable and easier to debug, as the routing logic is explicit and can be easily traced. It can also be tested and controlled separately. For instance, the behavior of the Router Agent alone could be controlled and corrected with an output guardrail. Moreover, it also allows for more complex workflows, where the routing decision can depend on multiple factors and not just the user’s request."
msgstr "一方、ワークフローアプローチは、ルーティングロジックが明示的でトレースが容易なため、より予測可能でデバッグが容易です。また、個別にテストや制御が可能です。例えば、ルータエージェントの動作だけを制御し、出力ガードレールで修正することができます。さらに、ルーティングの決定がユーザのリクエストだけでなく複数の要因に依存するような、より複雑なワークフローも可能になります。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Finally, as evidenced by tracing of the agentic execution, its current implementation has a significant drawback: the overall time to fulfill the user request is significantly increased."
msgstr "最後に、エージェント実行のトレースから明らかなように、現在の実装には重大な欠点があります。"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "Tracing agentic routing execution"
msgstr "エージェントによるルーティング実行のトレース"

#: _posts/2025-05-08-agentic-ai-with-quarkus-p3.adoc
#, fuzzy
msgid "This depends on how the agent uses the LLM expert as a tool: even though it has been explicitly required to forward the expert’s response as it is and without any modification, it seems to ignore this instruction. It can't avoid wasting significant time reprocessing the expert's answer before returning it. In other words, this is a side-effect of the fact that the agent is in complete control of the execution, and there is no way to forward this control to a different LLM, as it would be convenient in this case."
msgstr "これは、エージェントがLLMエキスパートをツールとしてどのように使用するかに依存します。エキスパートの回答をそのまま、何の修正も加えずに転送するよう明示的に要求されているにもかかわらず、この指示を無視しているようです。返送する前にエキスパートの回答を再処理することは、時間の浪費を避けることができません。言い換えれば、これはエージェントが実行を完全に制御しているという事実の副作用であり、この場合便利なように、この制御を別のLLMに転送する方法はありません。"

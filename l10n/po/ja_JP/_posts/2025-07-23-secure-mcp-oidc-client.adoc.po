msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use Quarkus MCP client to access secure MCP HTTP server from command line"
msgstr "Quarkus MCPクライアントを使用して、コマンドラインからセキュアなMCP HTTPサーバーにアクセスします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Explain how Quarkus LangChain4j MCP client can access MCP HTTP servers with access tokens from CLI"
msgstr "Quarkus LangChain4j MCPクライアントがCLIからアクセストークンを使用してMCP HTTPサーバーにアクセスする方法を説明します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/secure-mcp-client/[Use Quarkus MCP client to access secure MCP HTTP servers] blog post, we explained how a user can login to Quarkus LangChain4j AI server application with GitHub OAuth2 and have Google AI Gemini use https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] to access a secure https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] user name provider tool with a GitHub access token."
msgstr "link:https://quarkus.io/blog/secure-mcp-client/[Use Quarkus MCP client to access secure MCP HTTP servers] ブログポストでは、ユーザーがQuarkus LangChain4j AIサーバーアプリケーションにGitHub OAuth2でログインし、Google AI Geminiが link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Clientを] 使用して、セキュアな link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCPサーバーの] ユーザー名プロバイダーツールにGitHubアクセストークンでアクセスする方法を説明しました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "However, not every AI service application is going to be designed to require a user login: for example, it may run as a command line application or cron scheduler. But also, not every AI service application that requires a user login will be able to use a user login token to access a secure MCP server because such a server may only support tokens of different type."
msgstr "ただし、すべてのAIサービス・アプリケーションがユーザー・ログインを必要とするように設計されているわけではありません。例えば、コマンドライン・アプリケーションやcronスケジューラとして実行される場合もあります。また、ユーザー・ログインを必要とするすべてのAIサービス・アプリケーションが、ユーザー・ログイン・トークンを使用してセキュアなMCPサーバーにアクセスできるとは限りません。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In this blog post, we will explain how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] that runs in a command line Quarkus LangChain4j AI application can itself acquire an access token using an OAuth2 `client_credentials` grant and use it to access a secure https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] service account name provider tool."
msgstr "このブログポストでは、コマンドラインのQuarkus LangChain4j AIアプリケーションで実行される link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCPクライアントが] 、OAuth2 `client_credentials` グラントを使用してアクセストークンを取得し、そのアクセストークンを使用して安全な link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCPサーバーの] サービスアカウントプロバイダーツールにアクセスする方法について説明します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "We will work with https://www.keycloak.org/[Keycloak] and rely on it to demonstrate how to approach securing complex, distributed AI applications that may span multiple security boundaries, by requiring that access tokens are restricted to specific audiences, and exchanging them to acquire new, correct audiences."
msgstr "私たちは link:https://www.keycloak.org/[Keycloakと] 協力し、複数のセキュリティ境界にまたがる可能性のある複雑な分散型AIアプリケーションの安全性を確保する方法を実証するために、 link:https://www.keycloak.org/[Keycloakに] 依存しています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Demo architecture"
msgstr "デモ建築"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "As you can see in the diagram above, a command line agent uses a `Poem Service` AI service to create a poem. The `Poem Service` uses `AI Gemini` and requests `MCP Client` to complete a tool call to help `AI Gemini` to find out the service account name."
msgstr "上の図でわかるように、コマンドラインエージェントは `Poem Service` AIサービスを使用して詩を作成します。 `Poem Service` は `AI Gemini` を使用し、 `AI Gemini` がサービスアカウント名を調べるためのツールコールを完了するよう、 `MCP Client` に要求します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The MCP client must use an access token. It uses an OAuth2 `client_credential` grant to acquire a service account token and propagate it to the secure MCP server. This service account token's audience restricts it to accessing the MCP server only."
msgstr "MCPクライアントはアクセストークンを使用する必要があります。OAuth2（ `client_credential` ）を使用してサービス・アカウント・トークンを取得し、セキュアな MCPサーバに送信します。このサービ ス・アカウント・トークンの利用者は、MCPサーバへのアクセスのみを制限します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The MCP server tool implementation must access a REST server to complete the tool action. However, it can not use the current access token that is restricted to accessing this MCP server because the REST server accepts tokens that are meant to access this REST server only."
msgstr "MCP サーバ・ツールの実装は、ツールのアクションを完了するために REST サーバにアクセスする必要があ ります。ただし、REST サーバはこの REST サーバにアクセスするためだけのトークンを受け付けるため、この MCP サーバへのアクセスに制限されている現在のアクセストークンを使用することはできません。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Therefore, the MCP server exchanges the current token to set the REST server audience before propagating it, with the REST server successfully completing the secure tool call, with the response returned to the MCP Client."
msgstr "そのため、MCP サーバは、REST サーバ・オーディエンスを設定するために現在のトークンを交換し てからそれを伝播し、REST サーバはセキュアなツールの呼び出しを正常に完了し、その応答が MCP ク ライアントに返されます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "We are now ready to start working on the demo."
msgstr "これでデモに取り掛かる準備が整いました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-cmd-client-server[Quarkus LangChain4j Command Line Secure MCP Client Server sample]."
msgstr "プロジェクトの完全なソースは、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-cmd-client-server[Quarkus LangChain4j Command Line Secure MCP Client Serverサンプルに] あります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Step 1 - Create and start MCP server"
msgstr "ステップ1 - MCPサーバーの作成と起動"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP SSE server that can enforce an authenticated access to its tool, verify that the access token has a correct audience, and complete a tool action by exchanging the current access token for a new access token with the REST server audience and propagating this token to the REST server to get the required service account name."
msgstr "まず、安全なQuarkus MCP SSEサーバーを作成します。このサーバーは、ツールへの認証アクセスを実施し、アクセストークンが正しい対象者であることを検証します。そして、現在のアクセストークンをRESTサーバーの対象者と新しいアクセストークンと交換し、このトークンをRESTサーバーに伝播して必要なサービスアカウント名を取得することで、ツールのアクションを完了します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP サーバーの maven 依存関係"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "以下の依存関係を追加します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-mcp-server-sse` is required to support MCP Streamable HTTP and SSE transports."
msgstr "`quarkus-mcp-server-sse` は、MCP Streamable HTTPおよびSSEトランスポートをサポートするために必要です。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` は、MCP SSE エンドポイントへのアクセスを保護するために必要です。そのバージョンはQuarkusのBOMに定義されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-rest` is required to support REST server that the MCP tool has to call. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-rest` は、MCPツールが呼び出す必要のあるRESTサーバーをサポートするために必要です。そのバージョンはQuarkusのBOMに定義されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-rest-client-oidc-token-propagation` also brings `quarkus-rest-client` and is required to support a REST client call to REST server with the token exchange and propagation. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-rest-client-oidc-token-propagation` また、 、トークンの交換と伝搬を伴うRESTサーバーへのRESTクライアント呼び出しをサポートするために必要です。そのバージョンはQuarkusのBOMで定義されています。 `quarkus-rest-client` "

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "MCP Service Account Name Tool"
msgstr "MCPサービスアカウント名ツール"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Let's create a tool that can return a name of the current service account."
msgstr "現在のサービスアカウント名を返すツールを作ってみましょう。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Provide a tool that can return a name of the current service account."
msgstr "現在のサービスアカウント名を返すツールを提供します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use an injected `ServiceAccountNameRestClient` to access the REST server to complete the service account name request. See the <<service-account-name-rest-client>> section below for more details."
msgstr "注入された `ServiceAccountNameRestClient` を使用して REST サーバーにアクセスし、サービスアカウント名のリクエストを完了します。詳細は以下の <<service-account-name-rest-client>> セクションを参照してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The MCP server tool can be invoked only if the current MCP request is authenticated."
msgstr "MCPサーバ・ツールは、現在のMCP要求が認証されている場合にのみ起動できます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In this blog post we do not enforce the secure tool access with annotations such as https://quarkus.io/blog/secure-mcp-client/#mcp-server-tool[@PermissionAllowed] or https://quarkus.io/blog/secure-mcp-sse-server/#tool[@Authenticated] but only use the HTTP security policy configuration instead."
msgstr "このブログ記事では、 link:https://quarkus.io/blog/secure-mcp-client/#mcp-server-tool[@PermissionAllowed] や link:https://quarkus.io/blog/secure-mcp-sse-server/#tool[@Authenticated の] ようなアノテーションで安全なツールアクセスを強制するのではなく、代わりに HTTP セキュリティポリシー設定のみを使用します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "See how both main MCP SSE and tool endpoints are secured in the <<mcp-server-configuration>> section below."
msgstr "メインのMCP SSEとツール・エンドポイントの両方がどのように保護されているかは、以下の <<mcp-server-configuration>> のセクションを参照してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Service Account Name REST client"
msgstr "サービス アカウント名 REST クライアント"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The <<mcp-server-tool>> uses the Service Account Name REST client to call the REST server to complete a service account name request."
msgstr "<<mcp-server-tool>> は、サービスアカウント名 REST クライアントを使用して REST サーバーを呼び出し、サービスアカウント名要求を完了します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "This REST client looks like this:"
msgstr "このRESTクライアントは次のようになります："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Get a service account name from the REST server. See the <<service-account-name-rest-server>> section below for more details."
msgstr "RESTサーバーからサービスアカウント名を取得します。詳しくは、以下の <<service-account-name-rest-server>> のセクションを参照してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use `@AccessToken` annotation to require the access token exchange and propagation. This single `@AccessToken` annotation, supported by an additional configuration in the <<mcp-server-configuration>> section below, is all that is required to support this complex access token flow."
msgstr "アクセストークンの交換と伝搬を要求するには、 `@AccessToken` アノテーションを使用します。この複雑なアクセストークンフローをサポートするために必要なのは、以下の <<mcp-server-configuration>> セクションの追加構成でサポートされる、この単一の `@AccessToken` アノテーションだけです。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Service Account Name REST server"
msgstr "サービスアカウント名 RESTサーバー"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The <<mcp-server-tool>> uses the <<service-account-name-rest-client>> to get a service account name from the Service Account Name REST server."
msgstr "<<mcp-server-tool>> は、 <<service-account-name-rest-client>> を使用して、サービスアカウント名 REST サーバーからサービスアカウント名を取得します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "This REST server looks like this:"
msgstr "このRESTサーバーは次のようになります："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Provide a secure REST resource method that can return a service account name"
msgstr "サービスアカウント名を返すことができる安全なRESTリソースメソッドを提供します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use an injected `SecurityIdentity` to complete the method's task, in this case - return a service account identity name."
msgstr "注入された `SecurityIdentity` を使ってメソッドのタスクを完了させます。この場合は、サービスアカウントの ID 名を返します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In this demo, the REST server is collocated with the MCP server to simplify the demo. Of course, in production, such REST servers will most likely be remote."
msgstr "このデモでは、デモを簡単にするために、REST サーバを MCP サーバに併設しています。もちろん、本番環境では、このようなRESTサーバはほとんどの場合リモートになります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Next, let's have a look, in the <<mcp-server-configuration>> section, how access to both the <<mcp-server-tool>> and this server is restricted to tokens with specific audiences only."
msgstr "次に、 <<mcp-server-configuration>> セクションで、 <<mcp-server-tool>> とこのサーバーの両方へのアクセスを、特定の対象者のみを持つトークンに制限する方法を見てみましょう。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCPサーバーの構成"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Let's configure our secure MCP server:"
msgstr "安全なMCPサーバーを設定しましょう："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Declare MCP server and enable traffic logging."
msgstr "MCPサーバーを宣言し、トラフィック・ロギングを有効にします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Enforce an authenticated access to the main MCP SSE and tool endpoints. The configured pattern covers both the initial '/mcp/sse' handshake and '/mcp/messages/' requests."
msgstr "メインの MCP SSE およびツール・エンドポイントへの認証されたアクセスを強制します。構成されたパターンは、最初の「/mcp/sse」ハンドシェイクと「/mcp/messages/」リクエストの両方をカバーします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Default OIDC tenant that secures the MCP SSE endpoint and tool. It is supported by Keycloak Dev Service in dev mode. In simple cases you do not even have to configure the default OIDC tenant. But in this demo, the default OIDC tenant is required to enforce that the tokens which reach the MCP server contain a `quarkus-mcp-server` audience."
msgstr "MCP SSEエンドポイントとツールを保護するデフォルトのOIDCテナント。devモードのKeycloak Dev Serviceでサポートされています。単純なケースでは、デフォルトのOIDCテナントを設定する必要はありません。しかし、このデモでは、MCPサーバーに到達するトークンに `quarkus-mcp-server` 。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Request an access token exchange before the <<service-account-name-rest-client>> propagates it."
msgstr "<<service-account-name-rest-client>> が伝播する前にアクセストークンの交換を要求します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Configure OIDC client to perform the token exchange"
msgstr "トークン交換を行うためのOIDCクライアントの設定"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Set the https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers[type] of a new token that the current token will be exchanged for to `access_token`. Starting from Quarkus 3.25, an expected new  token type will be set to `access_token` by default, and users will not have to configure this property when the access token type is required when exchanging tokens."
msgstr "`access_token` Quarkus 3.25以降、新しいトークンの link:https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers[タイプは] デフォルトで `access_token` に設定され、トークンの交換時にアクセストークンタイプが要求される場合、ユーザーはこのプロパティを設定する必要がなくなります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Configure the <<service-account-name-rest-client>> with the REST server address. The REST server is collocated with the MCP server only to simplify the demo."
msgstr "<<service-account-name-rest-client>> に REST サーバのアドレスを設定します。REST サーバは、デモを簡略化するために MCP サーバにのみ配置されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The OIDC tenant that protects the REST server only."
msgstr "RESTサーバーのみを保護するOIDCテナント。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The OIDC tenant that protects the REST server requires that the tokens that are used to access it contain a REST server `quarkus-mcp-service` audience."
msgstr "REST サーバーを保護する OIDC テナントでは、REST サーバーへのアクセスに使用するトークンに REST サーバー `quarkus-mcp-service` オーディエンスが含まれている必要があります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Configure Keycloak dev service to use one of the latest released Keycloak images, and make it run on a fixed `8081` port to simplify the <<poem-service-configuration>> where an access to Keycloak is also required."
msgstr "最新のKeycloakイメージを使用するようにKeycloak dev serviceを設定し、Keycloakへのアクセスも必要な <<poem-service-configuration>> を簡素化するために、固定 `8081` ポートで実行するようにします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "MCPサーバーをdevモードで起動"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Now let's start the MCP server in dev mode:"
msgstr "では、MCPサーバーをdevモードで起動してみましょう："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "and go to the <<keycloak-setup>> in the next section to complete the Keycloak configuration that is required to support the secure MCP server token audience and exchange requirements."
msgstr "をクリックし、次のセクションの <<keycloak-setup>> 、安全なMCPサーバートークンの受信と交換の要件をサポートするために必要なKeycloakの設定を完了します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Step 2 - Keycloak setup"
msgstr "ステップ2 - Keycloakのセットアップ"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "When we <<start-mcp-server,started the MCP server in dev mode>>, Keycloak Dev Service launched a Keycloak container, made it available on port `8081`, created a `quarkus` realm with the `quarkus-mcp-server` client - this client name was configured with the `quarkus.oidc.client-id=quarkus-mcp-server` property in the <<mcp-server-configuration>> section."
msgstr "xref:start-mcp-server[MCPサーバーをdevモードで起動] すると、Keycloak Dev ServiceはKeycloakコンテナを起動し、ポート `8081` 、 `quarkus-mcp-server` クライアントで `quarkus` レルムを作成します。このクライアント名は、 <<mcp-server-configuration>> セクションの `quarkus.oidc.client-id=quarkus-mcp-server` プロパティで構成されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The `quarkus-mcp-server` client represents a confidential OIDC client that protects the MCP server."
msgstr "`quarkus-mcp-server` クライアントは、MCP サーバを保護する機密 OIDC クライアントを表します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "But MCP server and REST server have additional token audience and exchange requirements and we must complete the Keycloak setup to support those requirements. Let's do it."
msgstr "しかし、MCPサーバーとRESTサーバーには、トークンの視聴と交換の要件が追加されているため、これらの要件をサポートするためにKeycloakのセットアップを完了する必要があります。やってみましょう。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Go to `http://localhost:8081` and login as a Keycloak admin, with the `admin` name and `admin` password credentials."
msgstr "にアクセスしてください。 `http://localhost:8081` にアクセスし、 `admin` の名前と `admin` のパスワードを使ってKeycloakの管理者としてログインしてください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Select the `quarkus` realm:"
msgstr "`quarkus` レルムを選択します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "First, create a `quarkus-mcp-client` OIDC client that the Quarkus MCP client will use to acquire OAuth2 `client_credentials` tokens for accessing the MCP server."
msgstr "まず、Quarkus MCP クライアントが MCP サーバーにアクセスするための OAuth2 `client_credentials` トークンを取得するために使用する `quarkus-mcp-client` OIDC クライアントを作成します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Start with the `General Settings`:"
msgstr "まずは `General Settings` から："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "and enable `Client authentication` and `Service accounts roles` capabilities:"
msgstr "と `Client authentication` 、 `Service accounts roles` 機能を有効にします："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Save the `quarkus-mcp-client` OIDC client. Click on its `Credentials` tab and copy the generated secret to export it later as the <<oidc-client-secret>> in order to run the command line AI `Poem Service` application."
msgstr "`quarkus-mcp-client` OIDCクライアントを保存します。 `Credentials` タブをクリックし、生成されたシークレットをコピーして、後でコマンドラインAI `Poem Service` アプリケーションを実行するために <<oidc-client-secret>> としてエクスポートします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "For the Quarkus MCP client to be able to access MCP server with access tokens that the `quarkus-mcp-client` OIDC client will acquire, these tokens must contain an audience (`aud`) claim with a `quarkus-mcp-server` audience. The MCP server is configured in the <<mcp-server-configuration>> section to require this audience."
msgstr "Quarkus MCPクライアントが、 `quarkus-mcp-client` OIDCクライアントが取得するアクセストークンでMCPサーバーにアクセスできるようにするには、これらのトークンに `quarkus-mcp-server` オーディエンス（ `aud` ）が含まれている必要があります。MCPサーバは、このオーディエンスを要求するよう、 <<mcp-server-configuration>> セクションで構成されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Keycloak supports several options for adding an audience (`aud`) claim to issued tokens. We will use an option that involves creating a custom `Client scope` with an `Audience` mapping."
msgstr "Keycloakは、発行されたトークンにオーディエンス（ `aud` ）の主張を追加するためのいくつかのオプションをサポートしています。ここでは、 `Audience` マッピングでカスタム `Client scope` を作成するオプションを使用します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Go to the `Client scopes` and create an `Optional` `quarkus-mcp-server-scope`:"
msgstr "`Client scopes` にアクセスし、 `Optional` `quarkus-mcp-server-scope` を作成します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Once the `quarkus-mcp-server-scope` scope is created, go to its `Mappings` tab, and choose `Configure a new mapper` option and select `Audience`:"
msgstr "`quarkus-mcp-server-scope` スコープを作成したら、その `Mappings` タブを開き、 `Configure a new mapper` オプションを選択し、 `Audience` を選択します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Name this mapper as `quarkus-mcp-server-as-audience` and choose `quarkus-mcp-server` as an `Included Client Audience`:"
msgstr "このマッパーを `quarkus-mcp-server-as-audience` と名付け、 `quarkus-mcp-server` を `Included Client Audience` として選択します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Once the `quarkus-mcp-server-scope` is created, add it as an `Optional` scope to the `quarkus-mcp-client`:"
msgstr "`quarkus-mcp-server-scope` を作成したら、 `Optional` スコープとして `quarkus-mcp-client` に追加します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Now, when Quarkus MCP client will use the `quarkus-mcp-client` OIDC client to acquire tokens, it will request a `quarkus-mcp-server-scope` token scope, resulting in Keycloak issuing tokens with an audience that contains the `quarkus-mcp-server` - exactly what the Quarkus MCP server requires."
msgstr "これで、Quarkus MCPクライアントが `quarkus-mcp-client` OIDCクライアントを使用してトークンを取得すると、 `quarkus-mcp-server-scope` トークンのスコープが要求され、その結果、Keycloakは `quarkus-mcp-server` を含むオーディエンスでトークンを発行します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Next, we need to support Quarkus MCP server exchanging the incoming access token with the `quarkus-mcp-server` audience for a new token that will contain a REST server audience instead."
msgstr "次に、Quarkus MCPサーバーが、受信したアクセストークンを `quarkus-mcp-server` 、代わりにRESTサーバーのオーディエンスを含む新しいトークンと交換できるようにする必要があります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Create a `quarkus-mcp-service` OIDC client that represents the REST server, similarly to how you created the `quarkus-mcp-client` OIDC client. Next, create a `quarkus-mcp-service-scope` client scope, similarly to how you created the `quarkus-mcp-server-scope` client scope, choosing the `quarkus-mcp-service` as an `Included Client Audience` when creating an audience mapping for this scope."
msgstr "`quarkus-mcp-client` OIDCクライアントの作成方法と同様に、RESTサーバーを表す `quarkus-mcp-service` OIDCクライアントを作成します。次に、 `quarkus-mcp-server-scope` クライアントスコープを作成した方法と同様に、 `quarkus-mcp-service-scope` クライアントスコープを作成します。このスコープのオーディエンスマッピングを作成する場合は、 `quarkus-mcp-service` を `Included Client Audience` として選択します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Once the `quarkus-mcp-service-scope` is created, add it as an `Optional`  client scope to the `quarkus-mcp-server` MCP Server OIDC client, similarly to how you added the `quarkus-mcp-server-scope` to the `quarkus-mcp-client` above."
msgstr "`quarkus-mcp-service-scope` が作成されたら、 `quarkus-mcp-server` MCP Server OIDCクライアントの `Optional` クライアント・スコープとして追加します。 `quarkus-mcp-server-scope` を上記の `quarkus-mcp-client` に追加した方法と同様です。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Finally, update the `quarkus-mcp-server` capability to support a `Standard Token Exchange`, see the https://www.keycloak.org/securing-apps/token-exchange#_standard-token-exchange-enable[How to enable token exchange] example in the Keycloak documentation."
msgstr "最後に、 `Standard Token Exchange` をサポートするように `quarkus-mcp-server` 機能を更新します。Keycloak ドキュメントの link:https://www.keycloak.org/securing-apps/token-exchange#_standard-token-exchange-enable[トークン交換を有効にする方法の] 例を参照してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Now, the `quarkus-mcp-server` OIDC client that secures the MCP server can also exchange the incoming token and request a new `quarkus-mcp-service` audience by adding the `quarkus-mcp-service-scope` scope to the token exchange grant request, exactly what the REST server requires."
msgstr "MCPサーバを保護する `quarkus-mcp-server` OIDCクライアントは、トークン交換許可リクエストに `quarkus-mcp-service-scope` スコープを追加することで、受信したトークンを交換し、新しい `quarkus-mcp-service` オーディエンスをリクエストすることができます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "If you actively work with another OAuth2 provider that can produce tokens with required audiences and exchange them using a standard token exchange grant, then you can also try to adapt this demo to work with that provider instead."
msgstr "必要なオーディエンスを持つトークンを生成し、標準的なトークンエクスチェンジグラントを使用して交換できる別の OAuth2 プロバイダを積極的に使用している場合は、代わりにそのプロバイダで動作するようにこのデモを適応させてみることもできます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Step 3 - Create and run Poem Service from command line"
msgstr "ステップ3 - コマンドラインからPoem Serviceを作成して実行します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The MCP server is now <<start-mcp-server,running>> and ready to accept tool calls. Let's create a command line AI `Poem Service` that will work with AI Gemini and use Quarkus MCP client to complete tool calls."
msgstr "これでMCPサーバーが xref:start-mcp-server[起動] し、ツールコールを受け付ける準備ができました。AI Geminiで動作するコマンドラインAI `Poem Service` を作成し、ツールコールを完了するためにQuarkus MCPクライアントを使用してみましょう。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Poem Service Maven dependencies"
msgstr "ポエムサービスのMaven依存関係"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-ai-gemini` brings support for AI Gemini."
msgstr "`quarkus-langchain4j-ai-gemini` AIジェミニをサポートします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-mcp` provides core MCP Client support."
msgstr "`quarkus-langchain4j-mcp` は、MCP クライアントのコア・サポートを提供します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-oidc-cient-mcp-auth-provider` provides an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] that can supply access tokens that it itself acquires with an OAuth2 `client_credentials` grant (or any other supported grant that does not require a user input). Note, this dependency is different from the `quarkus-langchain4j-oidc-mcp-auth-provider` one that supplies tokens already available after an authorization code flow completes, it was demoed in the https://quarkus.io/blog/secure-mcp-client/#poem-service-maven-dependencies[Use Quarkus MCP client to access secure MCP HTTP servers] blog post to propagate GitHub login access tokens."
msgstr "`quarkus-langchain4j-oidc-cient-mcp-auth-provider` link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider は McpClientAuthProvider] の実装を提供し、OAuth2 グラント（または、ユーザー入力を必要としないその他のサポートされるグラント）で取得したアクセストークンを提供できます。この依存関係は、認証コードフローが完了した後にすでに利用可能なトークンを提供する のものとは異なることに注意してください。この依存関係は、 `client_credentials` `quarkus-langchain4j-oidc-mcp-auth-provider` link:https://quarkus.io/blog/secure-mcp-client/#poem-service-maven-dependencies[Use Quarkus MCP client to access secure MCP HTTP servers] blog post to propagate GitHub login access tokens でデモされています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`quarkus-picocli` supports building command-line Quarkus applications. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-picocli` コマンドラインのQuarkusアプリケーションの構築をサポートします。バージョンはQuarkus BOMで定義されています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "AI Gemini API key"
msgstr "AI Gemini APIキー"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`Poem Service` relies on AI Gemini to create a poem."
msgstr "`Poem Service` AIジェミニが詩を創作。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Get https://aistudio.google.com/app/apikey[AI Gemini API key] and export it as an `AI_GEMINI_API_KEY` environment property."
msgstr "link:https://aistudio.google.com/app/apikey[AI Gemini APIキーを] 取得し、 `AI_GEMINI_API_KEY` 環境プロパティとしてエクスポートします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "OIDC client secret"
msgstr "OIDCクライアントシークレット"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Quarkus MCP client will use an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] provided by the `quarkus-langchain4j-oidc-cient-mcp-auth-provider` dependency."
msgstr "Quarkus MCP クライアントは、 `quarkus-langchain4j-oidc-cient-mcp-auth-provider` 依存関係によって提供される link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] の実装を使用します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "This `McpClientAuthProvider` uses the <<poem-service-configuration,configured OIDC client>> to acquire access tokens using an OAuth2 `client_credentials` grant, where an OIDC client secret must be provided."
msgstr "この `McpClientAuthProvider` は xref:poem-service-configuration[、設定された OIDC クライアントを] 使用して、OAuth2 `client_credentials` グラントを使用してアクセストークンを取得します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Export the OIDC `quarkus-mcp-client` client secret that you copied when working through the <<keycloak-setup>> section as an `OIDC_CLIENT_SECRET` environment property."
msgstr "<<keycloak-setup>> セクションで作業したときにコピーした OIDC `quarkus-mcp-client` クライアント・シークレットを `OIDC_CLIENT_SECRET` 環境プロパティとしてエクスポートします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Poem Service"
msgstr "詩のサービス"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "`Poem Service` is a simple Quarkus LangChain4j AI service:"
msgstr "`Poem Service` は、シンプルなQuarkus LangChain4j AIサービスです："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Request to write a poem about Java."
msgstr "Javaに関する詩の執筆依頼。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use Quarkus MCP `service-account-name` client configured in the <<poem-service-configuration>> section to call a tool that can provide a service account name."
msgstr "サービスアカウント名を提供できるツールを呼び出すには、 <<poem-service-configuration>> セクションで構成した Quarkus MCP `service-account-name` クライアントを使用します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "This service is called from the `PoemCommand`:"
msgstr "このサービスは `PoemCommand` から呼び出されます："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Call `PoemService`."
msgstr "電話 `PoemService` 。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Poem Service Configuration"
msgstr "詩のサービス構成"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Let's see how the command line `Poem Service` configuration looks like:"
msgstr "コマンドライン `Poem Service` の設定を見てみましょう："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Enable MCP client HTTP transport. In this demo we use SSE, but `Streamable HTTP` is also supported."
msgstr "MCPクライアントのHTTPトランスポートを有効にします。このデモではSSEを使用していますが、 `Streamable HTTP` もサポートされています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Point to the Quarkus MCP server endpoint that you started in the <<start-mcp-server>> step."
msgstr "<<start-mcp-server>> ステップで開始した Quarkus MCP サーバーエンドポイントを指定します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Configure https://quarkus.io/guides/security-openid-connect-client-reference[OIDC client] to acquire access tokens using OAuth2 `client_credentials` grant, a default grant type supported by the OIDC client. OIDC client points to a Keycloak `quarkus` realm, note the fixed `8081` port that you requested Keycloak Dev Service to use for Keycloak in the <<keycloak-setup>> section."
msgstr "link:https://quarkus.io/guides/security-openid-connect-client-reference[OIDCクライアントが] サポートするデフォルトのグラントタイプであるOAuth2 `client_credentials` グラントを使用してアクセストークンを取得するように link:https://quarkus.io/guides/security-openid-connect-client-reference[OIDCクライアントを] 設定します。OIDCクライアントはKeycloak `quarkus` realmを指します。 <<keycloak-setup>> セクションでKeycloak Dev ServiceにKeycloakで使用するように要求した固定 `8081` ポートに注意してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "OIDC client id, you created the OIDC `quarkus-mcp-client` client in the <<keycloak-setup>> section."
msgstr "OIDCクライアントIDは、 <<keycloak-setup>> セクションでOIDC `quarkus-mcp-client` クライアントを作成した場合に表示されます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "OIDC `quarkus-mcp-client` client secret that you exported during the <<oidc-client-secret>> step."
msgstr "<<oidc-client-secret>> ステップでエクスポートした OIDC `quarkus-mcp-client` クライアントシークレット。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Request that the tokens issued to `quarkus-mcp-client` must contain a `quarkus-mcp-server` MCP server audience. You created a client `quarkus-mcp-server-scope` scope with a `quarkus-mcp-server` client audience mapping in the <<keycloak-setup>> section."
msgstr "`quarkus-mcp-client` に発行されるトークンには、 `quarkus-mcp-server` MCPサーバ・オーディエンスを含める必要があることを要求します。 <<keycloak-setup>> セクションで、 `quarkus-mcp-server` クライアント・オーディエンスをマッピングしたクライアント `quarkus-mcp-server-scope` スコープを作成しました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "AI Gemini key that you acquired and exported during the <<ai-gemini-key>> step."
msgstr "<<ai-gemini-key>> ステップで取得し、エクスポートしたAI Geminiキー。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Enable AI Gemini request and response logging"
msgstr "AI Geminiのリクエストとレスポンスのロギングを有効にします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Please pay attention to the fact that the MCP client configuration has a `service-account-name` name. You referred to this configuration with the `@McpToolBox(\"service-account-name\")` annotation in the <<poem-service>> section."
msgstr "MCPクライアント・コンフィギュレーションが `service-account-name` という名前を持っていることに注意してください。 <<poem-service>> セクションで、 `@McpToolBox(\"service-account-name\")` 注釈を使用してこの構成を参照しました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Package Poem Service"
msgstr "詩のパッケージサービス"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Package the command line `Poem Service`:"
msgstr "コマンドラインのパッケージ `Poem Service` ："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Run Poem Service"
msgstr "ラン・ポエム・サービス"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Run the command line `Poem Service` that you packaged in the <<package-poem-service>> section:"
msgstr "<<package-poem-service>> セクションでパッケージ化したコマンドライン `Poem Service` を実行します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "You should get a response such as:"
msgstr "というような返事が返ってくるはずです："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "How about trying another language ?"
msgstr "他の言語を試してみるのはどうですか？"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Have token audiences made any difference ?"
msgstr "トークンオーディエンスは何か違いをもたらしましたか？"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "For the command line `Poem Service` to <<run-poem-service, run successfully>>, Quarkus MCP client had to acquire a token with a `quarkus-mcp-server` audience to access the MCP server."
msgstr "コマンドライン（ `Poem Service` ）を xref:run-poem-service[正常に実行] するには、Quarkus MCPクライアントがMCPサーバーにアクセスするためのトークン（ `quarkus-mcp-server` ）を取得する必要があります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Here is how a token that Keycloak issues to the MCP client looks like:"
msgstr "KeycloakがMCPクライアントに発行するトークンは以下のようになります："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The token `aud` claim contains two audience values, one of them is a required `quarkus-mcp-server` audience."
msgstr "トークン `aud` クレームには2つのオーディエンス値があり、そのうちの1つは必須 `quarkus-mcp-server` オーディエンスです。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "For the MCP `quarkus-mcp-server` server to complete the Quarkus MCP client request, it had to verify that the token had a correct `quarkus-mcp-server` audience, and exchange it for a new token with a `quarkus-mcp-service` audience to access the REST server."
msgstr "MCP `quarkus-mcp-server` サーバーが Quarkus MCP クライアントリクエストを完了するには、トークンが正しい `quarkus-mcp-server` オーディエンスを持っていることを確認し、REST サーバーにアクセスするための `quarkus-mcp-service` オーディエンスのある新しいトークンと交換する必要があります。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Here is how an exchanged token that a Keycloak issues to the MCP server looks like:"
msgstr "キークロークがMCPサーバーに発行する交換トークンは以下のようになります："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The token `aud` claim contains a required `quarkus-mcp-service` audience."
msgstr "トークン `aud` クレームには、必須 `quarkus-mcp-service` オーディエンスが含まれています。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Note this token still retains a record of the original `quarkus-mcp-client` client that acquired the previous token, but also lists `quarkus-mcp-server` as the authorizing party (`azp`)."
msgstr "このトークンは、前のトークンを取得した元の `quarkus-mcp-client` クライアントの記録を保持したままですが、 `quarkus-mcp-server` を認証当事者 ( `azp` ) としてリストしていることに注意してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Let's try to access both MCP server and REST server without an audience claim."
msgstr "MCPサーバーとRESTサーバーの両方に、オーディエンス・クレームなしでアクセスしてみましょう。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Ensure the MCP server is <<start-mcp-server,running>> and <<keycloak-setup,Keycloak is configured>>."
msgstr "MCPサーバーが xref:start-mcp-server[稼動] し、 xref:keycloak-setup[Keycloakが設定されている] ことを確認します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In the demo, the OIDC `quarkus-mcp-client` client acquires tokens that are used to access the MCP server."
msgstr "デモでは、OIDC `quarkus-mcp-client` クライアントは、MCP サーバーへのアクセスに使用されるトークンを取得します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use the following curl command to acquire a `client_credentials` token for the `quarkus-mcp-client` client, omitting a `quarkus-mcp-server-scope` grant property:"
msgstr "以下のcurlコマンドを使用して、 `quarkus-mcp-server-scope` グラント・プロパティを省略して、 `quarkus-mcp-client` クライアント用の `client_credentials` トークンを取得します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "and confirm at https://jwt.io/[jwt.io] that the returned JWT token has no audience claim."
msgstr "そして、返されたJWTトークンにオーディエンス・クレームがないことを link:https://jwt.io/[jwt.ioで] 確認してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Try to access the MCP server with this token:"
msgstr "このトークンを使用して、MCP サーバにアクセスしてみます："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "and you will get HTTP 401."
msgstr "と入力すると、HTTP 401が返されます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "What about the REST server ? In the demo, the OIDC `quarkus-mcp-server` client acquires tokens that are used to access the REST server."
msgstr "REST サーバについてはどうですか？デモでは、OIDC `quarkus-mcp-server` クライアントは REST サーバーにアクセスするために使用されるトークンを取得します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Use the following curl command to acquire a `client_credentials` token  for the `quarkus-mcp-server` client, omitting a `quarkus-mcp-service-scope` grant property:"
msgstr "以下のcurlコマンドを使用して、 `quarkus-mcp-service-scope` グラント・プロパティを省略して、 `quarkus-mcp-server` クライアント用の `client_credentials` トークンを取得します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Try to access the REST server with this token:"
msgstr "このトークンを使ってRESTサーバーにアクセスしてみてください："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "You can also enforce a stricter verification by requiring that tokens received by both MCP and REST servers were issued to the `quarkus-mcp-client` and `quarkus-mcp-server` respectively by adding the following configuration fragment to the <<mcp-server-configuration>>:"
msgstr "また、MCPサーバとRESTサーバの両方が受信したトークンが、それぞれ `quarkus-mcp-client` と `quarkus-mcp-server` に対して発行されたものであることを要求することで、より厳格な検証を実施することもできます。そのためには、 <<mcp-server-configuration>> に以下の構成フラグメントを追加します："

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Note about Resource Indicators"
msgstr "資源指標に関する注意事項"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "The https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-06-18 MCP authorization specification] https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[requires] the use of https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicators]."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[最新の2025-06-18 MCP認可] link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[仕様では、] link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソース・インジケータの] 使用が link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[要求されて] います。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "OAuth2 Resource Indicator allows for a fine grained token audience restriction, in the presence of multiple, diverse resource servers that must be accessed with tokens."
msgstr "OAuth2 Resource Indicator は、トークンでアクセスしなければならない複数の多様なリソースサーバーが存在する場合に、きめ細かなトークン利用者の制限を可能にします。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "For a simple demo that we created in this blog post, having a token to contain an audience only is sufficient."
msgstr "このブログ記事で作成したシンプルなデモでは、オーディエンスのみを含むトークンを持つことで十分です。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "If your provider already supports https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicators] and you need to have a token to also include a resource indicator, configure OIDC client to request it."
msgstr "プロバイダがすでに link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソースインジケータを] サポートしており、リソースインジケータを含むトークンが必要な場合は、OIDCクライアントがそれを要求するように設定してください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "For example, you can add `quarkus.oidc-client.grant.client.extra-params.resource=http://localhost:8080/mcp` to the <<poem-service-configuration>>."
msgstr "例えば、 <<poem-service-configuration>> に `quarkus.oidc-client.grant.client.extra-params.resource=http://localhost:8080/mcp` を追加できます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In this case, to have the MCP server verify that an access token contains a correct resource indicator, add `quarkus.oidc.token.required-claims.resource=http://localhost:8080/mcp` to the <<mcp-server-configuration>>."
msgstr "この場合、アクセストークンに正しいリソース・インジケータが含まれていることを MCPサーバーに検証させるには、 <<mcp-server-configuration>> に `quarkus.oidc.token.required-claims.resource=http://localhost:8080/mcp` を追加します。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "セキュリティ"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Ensuring that each participant in your distributed AI system is properly secured and accepts tokens thar are meant to access this participant only is crucial."
msgstr "分散AIシステムの各参加者が適切に保護され、その参加者のみにアクセスするためのトークンを受け入れることを保証することは非常に重要です。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Token audience restriction is one of the key OAuth2 mechanisms that supports this goal, with <<resource-indicator,resource indicators>> allowing to achieve a finer-grained audience restriction."
msgstr "トークンの視聴者制限は、この目標をサポートする OAuth2 メカニズムの主要なものの一つであり、 xref:resource-indicator[リソースインジケータによって] 、よりきめ細かい視聴者制限を実現することができます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "https://datatracker.ietf.org/doc/html/rfc8693[Token exchange] can help to correctly switch the OAuth2 security context when the tokens are flowing in a multi-hop distributed AI application."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc8693[トークン交換は] 、トークンがマルチホップ分散AIアプリケーションで流れているときに、OAuth2セキュリティコンテキストを正しく切り替えるのに役立ちます。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "Read more about the https://modelcontextprotocol.io/specification/draft/basic/authorization#access-token-privilege-restriction[Access Token Privilege Restriction] in the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-06-18 MCP authorization specification]."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[最新の2025-06-18 MCP認証仕様で] 、 link:https://modelcontextprotocol.io/specification/draft/basic/authorization#access-token-privilege-restriction[アクセストークンの特権制限の] 詳細をお読みください。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "In this blog post, we demonstrated how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can access secure MCP servers by acquiring access tokens using an OAuth2 `client_credentials` grant and propagating them to the secure Quarkus MCP server."
msgstr "このブログ記事では、OAuth2 `client_credentials` グラントを使用してアクセストークンを取得し、セキュアな Quarkus MCP サーバーに伝搬することで、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP クライアントが] セキュアな MCP サーバーにアクセスできることを示しました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "We also looked into restricting tokens to specific audiences and started learning about an important OAuth2 https://datatracker.ietf.org/doc/html/rfc8693[token exchange] grant."
msgstr "また、トークンを特定の対象者に制限することを検討し、重要な OAuth2 link:https://datatracker.ietf.org/doc/html/rfc8693[トークン交換] 助成金について学び始めました。"

#: _posts/2025-07-23-secure-mcp-oidc-client.adoc
#, fuzzy
msgid "We have more content dedicated to AI and MCP security lined up for you, stay tuned !"
msgstr "AIとMCPセキュリティに特化したコンテンツは、まだまだご用意しています！"

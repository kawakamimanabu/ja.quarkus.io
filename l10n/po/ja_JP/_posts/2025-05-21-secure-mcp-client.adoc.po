msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Use Quarkus MCP client to access secure MCP HTTP servers"
msgstr "Quarkus MCPクライアントを使用して安全なMCP HTTPサーバーにアクセス"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Explain how Quarkus LangChain4j MCP client can access MCP HTTP servers with access tokens"
msgstr "Quarkus LangChain4j MCPクライアントがアクセストークンを使用してMCP HTTPサーバーにアクセスする方法を説明します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "MCP servers that use the _Streamable HTTP_ or HTTP/SSE transports may require MCP client authentication."
msgstr "_Streamable HTTP_ またはHTTP/SSEトランスポートを使用するMCPサーバは、MCPク ライアント認証を必要とする場合があります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, we explained how to enforce MCP client authentication with the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] and demonstrated how https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server DevUI] can use Keycloak access tokens to access the MCP server in dev mode and how https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector[MCP Inspector] and https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server[curl] can use GitHub access tokens to access the MCP server in prod mode."
msgstr "link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP Serverを使用したセキュアなMCPの準備」の] ブログ記事では、 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Serverで] MCPクライアント認証を実施する方法を説明し、 link:https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server DevUIで] Keycloakアクセストークンを使用して開発モードでMCPサーバーにアクセスする方法と、 link:https://quarkus.io/blog/secure-mcp-sse-server/#mcp-inspector[MCP Inspectorと] link:https://quarkus.io/blog/secure-mcp-sse-server/#use-curl-to-access-the-mcp-server[curlで] GitHubアクセストークンを使用して開発モードでMCPサーバーにアクセスする方法を示しました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "In this blog post, we will explain how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can use access tokens to access secure MCP servers."
msgstr "このブログ記事では、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCPクライアントが] アクセストークンを使用して安全なMCPサーバーにアクセスする方法について説明します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "We will show how to log in to Quarkus LangChain4j AI `Poem Service` application with GitHub OAuth2 and have Google AI Gemini use tools with the help from Quarkus MCP Client that can propagate the GitHub access token to the secure Quarkus MCP Server."
msgstr "GitHub OAuth2を使用してQuarkus LangChain4j AI `Poem Service` アプリケーションにログインし、Quarkus MCP Clientの助けを借りてGoogle AI Geminiにツールを使用させ、GitHubアクセストークンをセキュアなQuarkus MCPサーバーに伝搬させる方法を紹介します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Demo architecture"
msgstr "デモ建築"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "As you can see in the diagram above, the user logs in into the Quarkus REST `Poem Service` application endpoint. To support the user request to create a poem, the `Poem Service` uses `AI Gemini` and requests `MCP Client` to complete a tool call to help `AI Gemini` to find out the name of the logged-in user."
msgstr "上の図でわかるように、ユーザーは Quarkus REST `Poem Service` アプリケーションエンドポイントにログインします。詩を作成するユーザーリクエストをサポートするために、 `Poem Service` は `AI Gemini` を使用し、 `MCP Client` にツールコールを要求して、 `AI Gemini` でログインユーザーの名前を確認します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "An essential point is that both `Poem Service` and `MCP Client` are part of the same single Quarkus REST application that only users who logged in with GitHub can access. The users do not login to `MCP Client`, they login to the `Poem Service` application, using the `MCP client` is an implementation detail of how this application completes the user request."
msgstr "重要な点は、 `Poem Service` と `MCP Client` の両方が、GitHub でログインしたユーザーだけがアクセスできる、同じ単一の Quarkus REST アプリケーションの一部であるということです。ユーザーは `MCP Client` にログインするのではなく、 `Poem Service` アプリケーションにログインします。 `MCP client` を使用するのは、このアプリケーションがどのようにユーザーリクエストを完了するかの実装の詳細です。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Therefore, this demo does not demonstrate an implementation of the https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[MCP Authorization] flow which is primarily of interest to public MCP clients implemented as Single-page applications (SPA), such as as Anthropic Claude, that will be able to initiate a user login into an imported MCP server."
msgstr "したがって、このデモでは、インポートされたMCPサーバにユーザ・ログインを開始できる、Anthropic Claudeのようなシングル・ページ・アプリケーション（SPA）として実装されたパブリックMCPクライアントが主に関心を持つ、 link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[MCP認証] フローの実装を示しません。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "This demo shows a typical `OAuth2` authorization code flow where a user logs-in to a REST endpoint and authorizes it to access another service on the user's behalf. It also strengthens the message about the https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security[AI security being an integral part of your application security]."
msgstr "このデモは、ユーザーがRESTエンドポイントにログインし、ユーザーに代わって別のサービスにアクセスすることを承認する、典型的な `OAuth2` 認可コードフローを示しています。また、 link:https://quarkus.io/blog/gemini-personal-assistant/#integrated-ai-security[AIのセキュリティがアプリケーションのセキュリティの不可欠な一部で] あるというメッセージを強化しています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "For example, let's temporarily update the diagram by removing the `AI Gemini`, replacing `MCP Client` with `REST Client`, `MCP Server` with `Poem Creator service` and `GitHub` with `OAuth2`:"
msgstr "例えば、 `AI Gemini` を削除し、 `MCP Client` を `REST Client` に、 `MCP Server` を `Poem Creator service` に、 `GitHub` を `OAuth2` に置き換えて、ダイアグラムを一時的に更新してみましょう："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "You will very likely find similarities between this diagram and what you do in your projects. It is the OAuth2 authorization code flow in action: the user logs in to the application and authorizes it to access another service offering a poem creation on the user's behalf."
msgstr "この図とあなたのプロジェクトで行っていることの間に類似点が見つかる可能性が高いでしょう。ユーザーがアプリケーションにログインし、ユーザーに代わって詩の作成を提供する別のサービスにアクセスすることを許可します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The demo shows that Quarkus MCP Client can work effectively in such architectures by being able to use access tokens acquired during the user login, without you having to write any custom code."
msgstr "このデモでは、Quarkus MCPクライアントがこのようなアーキテクチャで効果的に動作することを示しています。このアーキテクチャでは、ユーザーログイン時に取得したアクセストークンを使用できるため、カスタムコードを記述する必要がありません。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "We are now ready to start working on the `Secure MCP Client Server` demo."
msgstr "`Secure MCP Client Server` デモに取り掛かる準備が整いました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample]."
msgstr "プロジェクトの完全なソースは、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Serverサンプルに] あります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Step 1 - Create and start MCP server"
msgstr "ステップ1 - MCPサーバーの作成と起動"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP SSE server."
msgstr "まず、安全なQuarkus MCP SSEサーバーを作成します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "If you already created the MCP server https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server[as described] in the the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, then you will find instructions below familiar and should be able to reuse the project you created earlier with minor updates."
msgstr "link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP ServerでセキュアなMCPの準備をする] 」のブログポストで link:https://quarkus.io/blog/secure-mcp-sse-server/#initial-mcp-server[説明したように] 、すでにMCPサーバーを作成している場合は、以下の手順が参考になります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "MCP server requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools. Additionally, the MCP server endpoint that provides access to tools requires that the security identity has a `read:name` permission."
msgstr "MCPサーバは、Server-Sent Events（SSE）接続を確立するため、およびツールを呼び出すた めに認証を必要とします。さらに、ツールへのアクセスを提供するMCPサーバのエンドポイントでは、セキュリティ IDに `read:name` 。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP サーバーの maven 依存関係"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "以下の依存関係を追加します："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-mcp-server-sse` is required to support MCP SSE transport."
msgstr "`quarkus-mcp-server-sse` はMCP SSEトランスポートをサポートするために必要です。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` は、MCP SSE エンドポイントへのアクセスを保護するために必要です。そのバージョンはQuarkusのBOMに定義されています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-hibernate-orm-panache` and `quarkus-jdbc-postgresql` are required to support the <<security-identity-augmentation>>. Their versions are defined in the Quarkus BOM."
msgstr "`quarkus-hibernate-orm-panache` `quarkus-jdbc-postgresql` <<security-identity-augmentation>> これらのバージョンは、QuarkusのBOMで定義されています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "MCP server tool"
msgstr "MCPサーバーツール"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Let's create a tool that can return the name of the currently logged-in user. It can be invoked only if the current MCP request is authenticated but also if the security identity has a `read:name` permission:"
msgstr "現在ログインしているユーザの名前を返すツールを作成しましょう。このツールは、現在のMCP要求が認証されている場合にのみ呼び出すことができますが、セキュリティIDが `read:name` パーミッションを持っている場合にも呼び出すことができます："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Provide a tool that can return the name of the current user."
msgstr "現在のユーザー名を返すツールを提供します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid ""
"Require authenticated tool access with an additional authorization `read:name` permission constraint - yes, the only difference with an unauthenticated MCP server tool is `@PermissionsAllowed(\"read:name\")`, that's it!\n"
"See also how the main MCP SSE endpoint is secured in the <<mcp-server-configuration>> section below."
msgstr "`read:name` 認証されていないMCPサーバ・ツールとの違いは、 `@PermissionsAllowed(\"read:name\")` 、それだけです！メインのMCP SSEエンドポイントがどのようにセキュリティで保護されているかについては、以下の <<mcp-server-configuration>> のセクションも参照してください。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Use the injected `SecurityIdentity` to return the current user's name. Alternatively, it can be acquired from the injected `quarkus.oidc.UserInfo`."
msgstr "現在のユーザー名を返すには、注入された `SecurityIdentity` 。あるいは、注入された `quarkus.oidc.UserInfo` から取得することもできます。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Security Identity Augmentation"
msgstr "セキュリティ・アイデンティティの強化"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "To meet the `@PermissionsAllowed(\"read:name\")` authorization constraint, the security identity created after verifying the GitHub access token must be augmented to have a `read:name` permission."
msgstr "`@PermissionsAllowed(\"read:name\")` 権限の制約を満たすには、GitHub アクセストークンを検証して作成したセキュリティ ID に `read:name` 権限を持たせる必要があります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The demo expects that a database has a record with a GitHub account name and the assigned permission. The security identity augmentor uses the identity name to retrieve this record and enhance the identity with the discovered permission."
msgstr "このデモでは、データベースに GitHub のアカウント名と割り当てられたパーミッションのレコードがあることを想定しています。セキュリティ ID オーグメントは ID 名を使ってこのレコードを取得し、発見されたパーミッションで ID を強化します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Let's see how this rather complex task can be easily achieved in Quarkus."
msgstr "Quarkusで、このやや複雑なタスクをどのように簡単に実現できるかを見てみましょう。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "First, we create a Panache entity that keeps the account name and permission values:"
msgstr "まず、アカウント名と権限の値を保持するPanacheエンティティを作成します："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Utility method to find an identity record with a matching GitHub account name."
msgstr "GitHub アカウント名にマッチする ID レコードを探すユーティリティメソッド。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Second, we create an `import.sql` script to have a demo record added to the database:"
msgstr "次に、 `import.sql` スクリプトを作成して、データベースにデモレコードを追加します："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Insert a demo record. You will provide your GitHub account name when starting MCP server."
msgstr "デモレコードを挿入します。MCPサーバーの起動時にGitHubのアカウント名を入力します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Finally, we create a security identity augmentor:"
msgstr "最後に、セキュリティ・アイデンティティ・オーギュメンターを作成します："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Custom `SecurityIdentityAugmentor` can augment the already verified security identity."
msgstr "カスタム `SecurityIdentityAugmentor` 、すでに確認されているセキュリティIDを補強することができます。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Run the augmentation in a blocking mode because it requires access to the database."
msgstr "データベースへのアクセスが必要なため、オーグメンテーションをブロッキング・モードで実行します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Find the recorded `Identity` matching the current user's name."
msgstr "現在のユーザー名に一致する録音された `Identity` を検索します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Initialize a security identity builder from the current identity."
msgstr "現在の ID からセキュリティ ID ビルダーを初期化します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Add the permission allocated to this user and create an updated `SecurityIdentity`."
msgstr "このユーザーに割り当てられた権限を追加し、更新された `SecurityIdentity` を作成します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "This is all, the augmentation step is done with a few lines of code only."
msgstr "これだけです。オーグメンテーションのステップは、数行のコードだけで行われます。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCPサーバーの構成"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Let's configure our secure MCP server:"
msgstr "安全なMCPサーバーを設定しましょう："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Enable MCP server traffic logging"
msgstr "MCPサーバーのトラフィック・ロギングの有効化"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<mcp-server-tool>> section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*`."
msgstr "最初のハンドシェイク中に、メインの MCP SSE エンドポイントへの認証されたアクセスを強制します。上記の <<mcp-server-tool>> セクションの注釈を使用してツールを保護する方法も参照してください。ただし、構成にメイン・エンドポイントとツール・エンドポイントの両方を記載することで、ツールへのアクセスを保護することもできます（例： `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*` ."

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Requires that only GitHub access tokens can be used to access MCP server."
msgstr "MCPサーバーへのアクセスにはGitHubアクセストークンのみを使用する必要があります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "By default, `quarkus.oidc.provider=github` supports an authorization code flow only. `quarkus.oidc.application-type=service` overrides it and requires the use of bearer tokens."
msgstr "デフォルトでは、 `quarkus.oidc.provider=github` は認証コードフローのみをサポートしています。 `quarkus.oidc.application-type=service` はこれを上書きし、ベアラートークンの使用を要求します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Database that keeps the identity records is supported by the PostgreSQL DevService."
msgstr "ID レコードを保持するデータベースは、PostgreSQL DevService でサポートされています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Start MCP server on port `8081` - this is done for the Quarkus LangChain4j `Poem Service` application that uses an MCP client to be able to start on the default `8080` port."
msgstr "ポート `8081` でMCPサーバーを起動します。これは、MCPクライアントを使用するQuarkus LangChain4j `Poem Service` アプリケーションが、デフォルトのポート `8080` で起動できるようにするために行います。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "MCPサーバーをdevモードで起動"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Use your GitHub account name, for example, `mvn quarkus:dev -Duser.name=\"John Doe\"`. It is required to correctly import the user name and permission data to the database."
msgstr "GitHubのアカウント名を使用します。例えば、 `mvn quarkus:dev -Duser.name=\"John Doe\"` 。これは、ユーザー名と権限データをデータベースに正しくインポートするために必要です。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The MCP server's security-related configuration remains exactly the same in prod mode, therefore we are not going to talk about running the MCP server in prod to save some blog post space. Please check the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample] if you would like to run MCP server in prod mode - you will only need to make sure PostresSQL is available in prod mode too."
msgstr "MCPサーバのセキュリティ関連の設定は、prodモードでも全く同じです。したがって、ブログ記事のスペースを節約するために、prodモードでMCPサーバを実行することについては説明しません。ProdモードでMCPサーバを実行したい場合は、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4jセキュアMCPクライアントサーバのサンプルを] 確認してください。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Step 2 - Create and start Poem Service that uses AI Gemini and MCP client"
msgstr "ステップ2 - AI GeminiとMCPクライアントを使用するポエムサービスの作成と開始"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The MCP server is now running and ready to accept tool calls. Let's create an AI `Poem Service` that will work with AI Gemini and use an MCP client to complete tool calls."
msgstr "MCPサーバーが起動し、ツールコールを受け付ける準備ができました。AI Geminiで動作し、MCPクライアントを使用してツールコールを完了するAI `Poem Service` を作成しましょう。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Poem Service Maven dependencies"
msgstr "ポエムサービスのMaven依存関係"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-ai-gemini` brings support for AI Gemini."
msgstr "`quarkus-langchain4j-ai-gemini` AIジェミニをサポートします。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-mcp` provides core MCP Client support."
msgstr "`quarkus-langchain4j-mcp` は、MCP クライアントのコア・サポートを提供します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-langchain4j-oidc-mcp-auth-provider` provides an implementation of https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] that can supply access tokens acquired during the GitHub OAuth2 authorization code flow."
msgstr "`quarkus-langchain4j-oidc-mcp-auth-provider` は link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html#_authorization[McpClientAuthProvider] の実装で、GitHub OAuth2 の認証コードフローで取得したアクセストークンを提供します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-oidc` supports GitHub OAuth2 login to secure access to `Poem Service`. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` GitHub OAuth2ログインをサポートし、 へのセキュアなアクセスを実現します。そのバージョンはQuarkusのBOMで定義されています。 `Poem Service`"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`quarkus-rest-qute` generates an HTML page to welcome the logged-in user. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-rest-qute` は、ログインしたユーザーを歓迎するHTMLページを生成します。そのバージョンはQuarkus BOMで定義されています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Register GitHub OAuth2 application"
msgstr "GitHub OAuth2アプリケーションの登録"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Register a GitHub OAuth2 application that you will authorize when logging in to the `Poem Service` application."
msgstr "`Poem Service` アプリケーションにログインする際に認証する GitHub OAuth2 アプリケーションを登録します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Follow the https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 registration] process, and make sure to register the `http://localhost:8080/login` callback URL."
msgstr "link:https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 の登録] 手順に従って、必ず `http://localhost:8080/login` コールバック URL を登録します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Use the generated GitHub client id and secret to either set `GITHUB_CLIENT_ID` and `GITHUB_CLIENT_SECRET` environment properties or update the `quarkus.oidc.client-id=${github_client_id}` and `quarkus.oidc.credentials.secret=${github_client_secret}` properties in application.properties by replacing `${github_client_id}` with the generated client id and `${github_client_secret}` with the generated client secret."
msgstr "生成された GitHub クライアント ID と secret を使って `GITHUB_CLIENT_ID` と `GITHUB_CLIENT_SECRET` 環境プロパティを設定するか、 `${github_client_id}` を生成されたクライアント ID、 `${github_client_secret}` を生成されたクライアント secret に置き換えて application.properties の `quarkus.oidc.client-id=${github_client_id}` と `quarkus.oidc.credentials.secret=${github_client_secret}` プロパティを更新します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header. However, GitHub may require that both client id and secret are submitted as form parameters instead."
msgstr "デフォルトでは、Quarkus GitHubプロバイダはHTTP AuthorizationヘッダーにクライアントIDとsecretを送信します。しかし、GitHubは、クライアントIDとシークレットの両方をフォームパラメータとして送信することを要求する場合があります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "If you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server, try to replace `quarkus.oidc.credentials.secret=${github.client.secret}` property with the following two properties instead:"
msgstr "GitHubにログインした後にHTTP 401エラーが発生し、Quarkus MCPサーバーにリダイレクトされる場合は、 `quarkus.oidc.credentials.secret=${github.client.secret}` プロパティを次の2つのプロパティに置き換えてみてください："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "AI Gemini API key"
msgstr "AI Gemini APIキー"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "`Poem Service` relies on AI Gemini to create a poem for the logged-in user."
msgstr "`Poem Service` AIジェミニは、ログインしたユーザーのために詩を作成します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Get https://aistudio.google.com/app/apikey[AI Gemini API key] and either set an `AI_GEMINI_API_KEY` environment property or update the `quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}` property in `application.properties` by replacing `${ai_gemini_api_key}` with the API key value."
msgstr "link:https://aistudio.google.com/app/apikey[AI Gemini API キーを] 取得し、 `AI_GEMINI_API_KEY` 環境プロパティを設定するか、 `${ai_gemini_api_key}` を API キー値で置き換えて `application.properties` の `quarkus.langchain4j.ai.gemini.api-key=${ai_gemini_api_key}` プロパティを更新します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "GitHub Login Endpoint"
msgstr "GitHub ログインエンドポイント"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The `Poem Service` needs to have an endpoint that manages a GitHub OAuth2 login. Typically, such an endpoint welcomes the logged-in user and offers links for the user to navigate to the rest of the secured application."
msgstr "`Poem Service` には、GitHub OAuth2 ログインを管理するエンドポイントが必要です。通常、このようなエンドポイントはログインしたユーザーを歓迎し、セキュアなアプリケーションの残りの部分に移動するためのリンクを提供します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Let's implement this login endpoint:"
msgstr "このログイン・エンドポイントを実装してみましょう："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Require an authenticated access. It forces an authorization code flow for users who did not login with GitHub yet and a session verification for the already authenticated users."
msgstr "認証アクセスを要求します。まだ GitHub にログインしていないユーザーには認証コードフローを、すでに認証済みのユーザーにはセッション認証を強制します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific `UserInfo` representation."
msgstr "GitHubのアクセストークンはバイナリであり、Quarkus OIDCは、それを使用してGitHub固有の `UserInfo` 表現を要求することで、間接的に検証します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "After the user logs in to GitHub and is redirected to this endpoint, an HTML page with a user name and a link to the <<jaxrs-poem-resource,Poem Resource endpoint>> is generated with a simple https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html[Qute template] and returned to the user."
msgstr "ユーザーがGitHubにログインし、このエンドポイントにリダイレクトされると、ユーザー名と xref:jaxrs-poem-resource[Poem Resourceエンドポイントへの] リンクを含むHTMLページがシンプルな link:https://github.com/quarkiverse/quarkus-langchain4j/blob/main/samples/secure-mcp-sse-client-server/secure-mcp-client/src/main/resources/templates/poem.html[Quteテンプレートで] 生成され、ユーザーに返されます。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Create Poem Resource endpoint"
msgstr "ポエム・リソース・エンドポイントの作成"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "The `Poem Resource` endpoint accepts poem requests from authenticated users and delegates these requests to AI `Poem Service` that uses `AI Gemini`. `AI Gemini` relies on the MCP client to get the name of the logged-in user."
msgstr "`Poem Resource` エンドポイントは、認証されたユーザーからの詩の要求を受け入れ、これらの要求を `AI Gemini` を使用する AI `Poem Service` に委譲します。 `AI Gemini` は、ログインしているユーザーの名前を取得するために MCP クライアントに依存します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Require authenticated poem requests."
msgstr "認証された詩のリクエストが必要です。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "AI Poem Service interface."
msgstr "AIポエムサービスのインターフェース。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Refer to the MCP client `user-name` configuration, see the <<poem-service-configuration>> section below."
msgstr "MCPクライアント `user-name` 、以下の <<poem-service-configuration>> セクションを参照してください。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Poem Service Configuration"
msgstr "詩のサービス構成"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Let's see how the `Poem Service` configuration looks like:"
msgstr "`Poem Service` の設定を見てみましょう："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Enable MCP client HTTP transport. In this demo we use SSE, with `Streamable HTTP` to be supported in the future."
msgstr "MCPクライアントのHTTPトランスポートを有効にします。このデモではSSEを使用していますが、将来的には `Streamable HTTP` 。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Point to the Quarkus MCP server endpoint that you started in the <<start-mcp-server>> step."
msgstr "<<start-mcp-server>> ステップで開始した Quarkus MCP サーバーエンドポイントを指定します。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Require GitHub OAuth2 login."
msgstr "GitHub OAuth2 ログインが必要です。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "GitHub client id and secret that were generated during the <<register-github-application>> step."
msgstr "<<register-github-application>> ステップで生成された GitHub クライアント ID とシークレット。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "AI Gemini key that you acquired during the <<ai-gemini-key>> step."
msgstr "<<ai-gemini-key>> ステップで取得した AI Gemini キー。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Enable AI Gemini request and response logging"
msgstr "AI Geminiのリクエストとレスポンスのロギングを有効にします。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Please pay attention to the fact that the MCP client configuration has a `user-name` name. You referred to this configuration with the `@McpToolBox(\"user-name\")` annotation in the <<jaxrs-poem-resource>> step."
msgstr "MCPクライアント構成に `user-name` という名前があることに注意してください。 <<jaxrs-poem-resource>> ステップで、 `@McpToolBox(\"user-name\")` アノテーションを使用してこの構成を参照しました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Start Poem Service in dev mode"
msgstr "Poemサービスをdevモードで起動"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "All the Poem Service configuration remains exactly the same in prod mode, therefore we are not going to talk about running it in prod to save some blog post space. Please check the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client Server sample] if you would like to run it in prod mode."
msgstr "すべてのPoem Serviceの設定はprodモードでもまったく同じなので、ブログ記事のスペースを節約するためにprodモードでの実行については触れません。prodモードで実行したい場合は、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/secure-mcp-sse-client-server[Quarkus LangChain4j Secure MCP Client] Serverのサンプルを確認してください。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "We are ready to test our AI `Poem Service` application."
msgstr "私たちのAI `Poem Service` アプリケーションをテストする準備が整いました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Step 3 - Test Poem Service"
msgstr "ステップ3 - ポエムサービスのテスト"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Access http://localhost:8080 and login to `Poem Service`:"
msgstr "link:http://localhost:8080[http://localhost:8080 に] アクセスし、 `Poem Service` にログインします："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "You should get a response with your name and a link to the `Poem Service` endpoint:"
msgstr "あなたの名前と `Poem Service` エンドポイントへのリンクが返信されます："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "At this point, Quarkus MCP Client was not involved in getting your name produced, it was done by the <<github-login-endpoint>>."
msgstr "この時点で、Quarkus MCP Clientは、お客様の名前の作成には関与していません。 <<github-login-endpoint>> 。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Click on the link to get a poem created and have AI Gemini producing a poem about Java for you:"
msgstr "リンクをクリックして詩を作成し、AIジェミニにJavaに関する詩を作ってもらいましょう："

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "This time, Quarkus MCP Client helped AI Gemini to get your name from the secure Quarkus MCP server."
msgstr "今回、Quarkus MCP Clientは、AI Geminiが安全なQuarkus MCPサーバーからあなたの名前を取得するのに役立ちました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Access token delegation considerations"
msgstr "アクセストークンの委譲に関する考慮事項"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "In general, access tokens issued by social providers such as GitHub are not designed to be used in your distributed application architecture, with a service such as `Poem Service` accessing GitHub API indirectly through another service such as `Quarkus MCP server`."
msgstr "一般的に、GitHub のようなソーシャル・プロバイダーが発行するアクセストークンは、分散アプリケーション・アーキテクチャで使用するようには設計されていません。 `Poem Service` のようなサービスは、 `Quarkus MCP server` のような別のサービスを通じて間接的に GitHub API にアクセスします。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Quarkus REST service that has users logged in with GitHub can access GitHub API directly. For example, `Poem Service` can use a great Quarkus LangChain4j capability to mark REST Clients as tools to access GitHub API. See how https://quarkus.io/blog/gemini-personal-assistant/#implementation[it was done with the Google Calendar service]."
msgstr "GitHubでログインしたユーザーを持つQuarkus RESTサービスは、GitHub APIに直接アクセスできます。例えば、 `Poem Service` 、Quarkusの優れたLangChain4j機能を使って、RESTクライアントをGitHub APIにアクセスするためのツールとしてマークすることができます。 link:https://quarkus.io/blog/gemini-personal-assistant/#implementation[Google Calendarサービスで] どのように link:https://quarkus.io/blog/gemini-personal-assistant/#implementation[行われたかを見て] みましょう。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "In this demo, we show the https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client]'s capability to interoperate with MCP servers and use access tokens to access secure MCP servers. We use GitHub OAuth2 because it is easily accessible to most developers."
msgstr "このデモでは、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCPクライアントが] MCPサーバーと相互運用し、アクセストークンを使用して安全なMCPサーバーにアクセスできることを示します。ほとんどの開発者が簡単にアクセスできるGitHub OAuth2を使用しています。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Providers such as `Keycloak` and `Auth0` can create access tokens that are meant to be propagated from one service to another one. You will quite likely have your Quarkus MCP server implementations dealing with such tokens in the enterprise. Alternatively, when possible, the AI service application which accepts an authenticated user can request the token issuer to exchange its access token for another token that will be used to access the downstream MCP Server instead."
msgstr "`Keycloak` 、 `Auth0` などのプロバイダは、あるサービスから別のサービスへ伝搬されることを意図したアクセストークンを作成できます。Quarkus MCPサーバーの実装では、企業内でこのようなトークンを扱うことになるでしょう。また、可能であれば、認証されたユーザーを受け入れるAIサービスアプリケーションは、トークン発行者にアクセストークンを別のトークンと交換するよう要求し、そのトークンを使用して下流のMCPサーバーにアクセスすることもできます。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Quarkus AI Service applications may have to and can support a delegation flow such as `GitHub access token -> Poem Service -> MCP Client -> MCP Server tool -> GitHub API` with additional security measures that the Quarkus team wil discuss in the future blog posts and the identity augmentation like the one shown in this demo."
msgstr "QuarkusのAIサービスアプリケーションは、 `GitHub access token → Poem Service → MCP Client → MCP Server tool → GitHub API` のようなデリゲーションフローをサポートする必要がある場合があります。"

#: _posts/2025-05-21-secure-mcp-client.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "In this blog post, we demonstrated how https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Client] can access secure MCP servers by propagating access tokens available to the Quarkus LangChain4j AI Service application after the OAuth2 authorization code flow is complete."
msgstr "このブログ記事では、OAuth2の認証コードフローが完了した後、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus] LangChain4j AI Serviceアプリケーションにアクセストークンを伝搬することで、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/mcp.html[Quarkus MCP Clientが] セキュアなMCPサーバーにアクセスできることを示しました。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Stay tuned for more upcoming blog posts about using MCP securely with Quarkus MCP client and MCP Server."
msgstr "QuarkusのMCPクライアントとMCPサーバーでMCPを安全に使用する方法については、今後のブログ記事にご期待ください。"

#: _posts/2025-05-21-secure-mcp-client.adoc
#, fuzzy
msgid "Enjoy !"
msgstr "お楽しみください！"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid " Implementing a MCP server in Quarkus"
msgstr "QuarkusでのMCPサーバーの実装"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Shows how to implement an MCP server in Quarkus and use it in various clients such as Claude Desktop and LangChain4j"
msgstr "QuarkusでMCPサーバーを実装し、Claude DesktopやLangChain4jなどのさまざまなクライアントで使用する方法を示します。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The Model Context Protocol (MCP) is an emerging standard that enables AI models to safely interact with external tools and resources. In this tutorial, I'll show you how to implement an MCP server using Quarkus, allowing you to extend AI applications with custom tools powered by the Java ecosystem."
msgstr "モデルコンテキストプロトコル（MCP）は、AIモデルが外部のツールやリソースと安全にやり取りできるようにする新しい標準です。このチュートリアルでは、Quarkusを使用してMCPサーバーを実装する方法を紹介します。これにより、Javaエコシステムを利用したカスタムツールでAIアプリケーションを拡張できます。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "What we'll be building"
msgstr "私たちが作るもの"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "We'll implement a simple MCP server that provides tools to get weather forecasts and alerts for US-based locations. We've chosen this example because it aligns with the official MCP quickstart guide at https://modelcontextprotocol.io/quickstart/server[modelcontextprotocol.io/quickstart/server], making it easier to compare implementations across different languages."
msgstr "ここでは、米国を拠点とする場所の天気予報とアラートを取得するツールを提供する、シンプルな MCP サーバを実装します。この例を選んだ理由は、 link:https://modelcontextprotocol.io/quickstart/server[modelcontextprotocol.io/quickstart/serverに] ある公式のMCPクイックスタートガイドと一致しており、異なる言語間での実装を比較しやすいからです。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Our server will expose two tools: `getAlerts` and `getForecast`. Once built, we'll connect it to an MCP host that runs the server as a subprocess. Here's how it looks when integrated with Claude:"
msgstr "私たちのサーバーは、 `getAlerts` と `getForecast` という2つのツールを公開します。構築したら、サーバをサブプロセスとして実行するMCPホストに接続します。これがClaudeと統合されたときの様子です："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Core MCP Concepts"
msgstr "MCPのコア・コンセプト"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "MCP servers can provide three main types of capabilities:"
msgstr "MCPサーバーは主に3種類の機能を提供できます："

#: _posts/2025-01-13-mcp-server.adoc
msgid "Resources"
msgstr "リソース"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "File-like data that can be read by clients (like API responses or file contents)"
msgstr "クライアントが読み取ることができるファイルのようなデータ（APIのレスポンスやファイルの内容など）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Tools"
msgstr "ツール"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Functions that can be called by the LLM (with user approval)"
msgstr "LLMが呼び出せる関数（ユーザーの承認が必要）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Prompts"
msgstr "プロンプト"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Pre-written templates that help users accomplish specific tasks"
msgstr "ユーザーが特定のタスクを達成するのに役立つ、あらかじめ記述されたテンプレート"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "This tutorial focuses on implementing tools."
msgstr "このチュートリアルでは、ツールの実装に焦点を当てます。"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To follow this tutorial you need:"
msgstr "このチュートリアルに従うには、以下のものが必要です："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Familiarity with Quarkus and Java"
msgstr "QuarkusおよびJavaに精通していること"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Understanding of LLMs (OpenAI, Granite, Anthropic, Google, etc.)"
msgstr "LLMへの理解（OpenAI、Granite、Anthropic、Googleなど）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "System requirements"
msgstr "システム要件"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Quarkus CLI"
msgstr "Quarkus CLI"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "JBang (optional)"
msgstr "JBang（オプション）"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Set up your project"
msgstr "プロジェクトの設定"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "First, create a new Quarkus project with rest-client, qute and mcp server extension without default boilerplate code:"
msgstr "まず、rest-client、qute、およびmcpサーバー拡張機能を持つ新しいQuarkusプロジェクトを、デフォルトのボイラープレートコードなしで作成します："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "We're using the `stdio` variant as it's required for MCP hosts that run the server as a subprocess. While an `sse` variant exists for Server-Sent Events streaming, we'll focus on the standard input/output approach."
msgstr "サーバをサブプロセスとして実行するMCPホストでは、 `stdio` 。Server-Sent Eventsストリーミングのために `sse` 。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Building the server"
msgstr "サーバーの構築"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Create a new file `src/main/java/org/acme/Weather.java`. The complete code for this example is available https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/weather[here]."
msgstr "新しいファイル `src/main/java/org/acme/Weather.java` を作成します。この例の完全なコードは link:https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/weather[こちらで] 入手できます。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Weather API Integration"
msgstr "天気APIの統合"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "First, let's set up the REST client for the weather API:"
msgstr "まず、天気APIのRESTクライアントをセットアップしましょう："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To handle the API responses, we'll define some data classes. Note that we're only including the fields we need, as the complete API response contains much more data:"
msgstr "APIレスポンスを処理するために、いくつかのデータクラスを定義します。完全なAPIレスポンスにはもっと多くのデータが含まれるため、必要なフィールドだけを含めることに注意してください："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Since the Weather API uses redirects, add this to your `application.properties`:"
msgstr "Weather API はリダイレクトを使用するので、これを `application.properties` に追加してください："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Formatting Helpers"
msgstr "フォーマットヘルパー"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "We'll use Qute templates to format the weather data:"
msgstr "Quteテンプレートを使って気象データをフォーマットします："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Implementing MCP Tools"
msgstr "MCPツールの導入"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Now let's implement the actual MCP tools. The `@Tool` annotation from `io.quarkiverse.mcp.server` marks methods as available tools, while `@ToolArg` describes the parameters:"
msgstr "それでは、実際のMCPツールを実装してみましょう。 `io.quarkiverse.mcp.server` の `@Tool` アノテーションは、利用可能なツールとしてメソッドをマークし、 `@ToolArg` はパラメータを記述します："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The forecast API requires a two-step process where we first get point metadata and then use a URL from that response to fetch the actual forecast."
msgstr "予測APIでは、まずポイントのメタデータを取得し、そのレスポンスからURLを使って実際の予測をフェッチするという2段階のプロセスが必要です。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Running the Server"
msgstr "サーバーの実行"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To simplify deployment and development, we'll package the server as an uber-jar. This makes it possible to `mvn install` and publish as a jar to a Maven repository which makes it easiier to share and run for us and others."
msgstr "デプロイと開発を簡単にするために、サーバーをuber-jarとしてパッケージ化します。これにより、 `mvn install` 、Mavenリポジトリにjarとして公開することが可能になり、私たちや他の人たちの共有や実行がより簡単になります。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Finally, we can optionally enable file logging as without it we would not be able to see any logs from the server as standard input/output is reserved for the MCP protocol."
msgstr "標準入出力がMCPプロトコルのために予約されているためです。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid ""
"After running `mvn install`, you can use JBang to run the server using its Maven coordinates: `org.acme:weather:1.0.0-SNAPSHOT:runner`\n"
"or manually using `java -jar target/weather-1.0.0-SNAPSHOT-runner.jar`."
msgstr "`mvn install` を実行した後、JBang を使用して Maven 座標 `org.acme:weather:1.0.0-SNAPSHOT:runner` または手動で `java -jar target/weather-1.0.0-SNAPSHOT-runner.jar` を使用してサーバーを実行できます。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Integration with Claude Desktop"
msgstr "クロードデスクトップとの統合"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Add this to your `claude_desktop_config.json`:"
msgstr "`claude_desktop_config.json` に追加してください："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The `--quiet` flag prevents JBang's output from interfering with the MCP protocol."
msgstr "`--quiet` フラグは、JBangの出力がMCPプロトコルに干渉するのを防ぎます。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "You can also run the server directly without using java - then it would be something like `java -jar <FULL PATH>/weather-1.0.0-SNAPSHOT-runner.jar`. We use JBang here because simpler if you want to share with someone who does not want to build the MCP server locally."
msgstr "また、Javaを使わずに直接サーバーを実行することもできます - その場合は `java -jar <FULL PATH>/weather-1.0.0-SNAPSHOT-runner.jar` のようになります。MCPサーバーをローカルで構築したくない人と共有する場合は、JBangを使用した方が簡単です。"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Development Tools"
msgstr "開発ツール"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "MCP Inspector"
msgstr "MCPインスペクター"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "For development and testing, you can use the MCP Inspector tool:"
msgstr "開発およびテストには、MCP Inspector ツールを使用できます："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "This starts a local web server where you can test your MCP server:"
msgstr "これにより、MCPサーバーをテストするためのローカルWebサーバーが起動します："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Integration with LangChain4j"
msgstr "LangChain4jとの統合"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Since version 0.23.0, Quarkus LangChain4j supports MCP, meaning it acts as an MCP client. For detailed information, see https://quarkus.io/blog/quarkus-langchain4j-mcp/[Using the Model Context Protocol with Quarkus+LangChain4j]."
msgstr "バージョン 0.23.0 以降、Quarkus LangChain4j は MCP をサポートしています。詳細については、 link:https://quarkus.io/blog/quarkus-langchain4j-mcp/[Quarkus+LangChain4jでのモデル・コンテキスト・プロトコルの使用を] 参照してください。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "To use our weather server with LangChain4j, add this configuration:"
msgstr "LangChain4jで私たちの天気サーバを使用するには、この設定を追加します："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Other Clients/MCP Hosts"
msgstr "他のクライアント/MCPホスト"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The Model Context Protocol has a page listing https://modelcontextprotocol.io/clients[known clients]."
msgstr "モデルコンテキストプロトコルには、 link:https://modelcontextprotocol.io/clients[既知のクライアントを] リストしたページがあります。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "While I have not tested all the various clients and MCP hosts, the similar approach of using `jbang --quiet <GAV>` should work for most if not all of them."
msgstr "さまざまなクライアントやMCPホストをすべてテストしたわけではありませんが、 `jbang --quiet <GAV>` を使用する同様のアプローチは、すべてではないにしても、ほとんどのクライアントで機能するはずです。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Testing the Server"
msgstr "サーバーのテスト"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "You can test the server through Claude or other MCP hosts with queries like:"
msgstr "Claude や他の MCP ホストを使って、以下のようなクエリでサーバーをテストできます："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "\"What is the weather forecast for Solvang?\""
msgstr "「ソルバングの天気予報は？"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "\"What are the weather alerts for New York?\""
msgstr "「ニューヨークの気象警報は？"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Here's what happens behind the scenes:"
msgstr "舞台裏はこんな感じです："

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Your question goes to the LLM along with available tools information"
msgstr "あなたの質問は、利用可能なツール情報とともにLLMへ"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The LLM analyzes the question and determines which tools to use"
msgstr "LLMは質問を分析し、どのツールを使用するかを決定します。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The client executes the selected tools via the MCP server"
msgstr "クライアントは、MCPサーバー経由で選択したツールを実行します。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Results return to the LLM"
msgstr "結果はLLMへ"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "The LLM formulates an answer using the tool results"
msgstr "LLMは、ツールの結果を使用して回答を作成します。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "You see the final response!"
msgstr "最終的な回答はご覧の通りです！"

#: _posts/2025-01-13-mcp-server.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "We've seen how Quarkus makes implementing an MCP server straightforward, requiring minimal boilerplate code compared to other implementations. The combination of Quarkus's extension system and JBang makes development and deployment quite a joy."
msgstr "QuarkusがMCPサーバーの実装をいかに簡単にしているか、他の実装と比較して最小限の定型コードで済むことを見てきました。Quarkusの拡張システムとJBangの組み合わせは、開発とデプロイをとても楽しいものにしてくれます。"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "Further Reading"
msgstr "さらに読む"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io[Model Context Protocol Documentation]"
msgstr "link:https://modelcontextprotocol.io[モデルコンテキストプロトコルのドキュメント]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-mcp-server/dev/[Quarkus MCP Extension Guide]"
msgstr "link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/[Quarkus MCP拡張ガイド]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://weather.gov/api[Weather API Documentation]"
msgstr "link:https://weather.gov/api[天気APIドキュメント]"

#: _posts/2025-01-13-mcp-server.adoc
#, fuzzy
msgid "https://quarkus.io/blog/quarkus-langchain4j-mcp/[Using MCP with Quarkus+LangChain4j]"
msgstr "link:https://quarkus.io/blog/quarkus-langchain4j-mcp/[Quarkus+LangChain4jでのMCPの使用]"

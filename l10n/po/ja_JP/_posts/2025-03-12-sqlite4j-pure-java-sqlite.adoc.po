msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Running SQLite in Pure Java with Quarkus"
msgstr "Quarkusを使用したピュアJavaでのSQLiteの実行"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "What if you could run a C-based database in pure Java, with zero configuration, and even compile it to a native image effortlessly? With the new Quarkiverse extension https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4j], you can do exactly that."
msgstr "Cベースのデータベースを純粋なJavaで実行し、設定なしで、さらにネイティブイメージに簡単にコンパイルできるとしたらどうでしょうか。Quarkiverseの新しい拡張機能 link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4jを] 使えば、まさにそれが可能です。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Traditionally, embedded databases in Java require reimplementing their C counterparts, often leading to differences in behavior, missing optimizations, and delayed bug fixes. However, https://github.com/roastedroot/sqlite4j[sqlite4j] provides a JDBC driver that leverages the original SQLite C implementation while running safely inside a sandbox."
msgstr "伝統的に、Javaの組み込みデータベースは、Cの対応するものを再実装する必要があり、多くの場合、動作の違い、最適化の欠落、バグ修正の遅れにつながります。しかし、 link:https://github.com/roastedroot/sqlite4j[sqlite4jは] 、サンドボックス内で安全に実行しながら、オリジナルのSQLite C実装を活用するJDBCドライバを提供します。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Hands-on Example"
msgstr "実践例"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "To see https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4j] in action, you can start with any existing Quarkus application or one of the https://github.com/quarkusio/quarkus-quickstarts[quickstarts]. If you prefer a ready-made example, check out https://github.com/andreaTP/demo-hibernate-orm-quickstart-wasm[this demo repository], which integrates SQLite within a Quarkus application using Hibernate ORM."
msgstr "link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4jの] 動作を確認するには、既存のQuarkusアプリケーションまたは link:https://github.com/quarkusio/quarkus-quickstarts[クイックスタートから] 始めることができます。既製のサンプルが必要な場合は、Hibernate ORMを使用してSQLiteをQuarkusアプリケーションに統合した link:https://github.com/andreaTP/demo-hibernate-orm-quickstart-wasm[デモリポジトリを] ご覧ください。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "By simply changing the JDBC driver dependency, you can embed a fully functional SQLite database inside your application while retaining all the benefits of the native SQLite implementation."
msgstr "JDBC ドライバの依存関係を変更するだけで、ネイティブ SQLite 実装のすべての利点を保持しながら、アプリケーション内に完全に機能する SQLite データベースを組み込むことができます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "To get started, add the extension dependency to your _pom.xml_:"
msgstr "始めるには、 _pom.xml_ に拡張機能の依存関係を追加します："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Then, configure your Quarkus application to use SQLite with standard JDBC settings:"
msgstr "次に、標準のJDBC設定でSQLiteを使用するようにQuarkusアプリケーションを構成します："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"You can now use your datasource as you normally would with Hibernate and Panache.\n"
"Note that we keep a minimum connection pool size > 0 to avoid redundant copies from disk to memory of the database."
msgstr "これで、HibernateとPanacheで通常と同じようにデータソースを使用することができます。データベースのディスクからメモリへの冗長なコピーを避けるために、 接続プールの最小サイズを > 0 にしていることに注意してください。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Running in a Secure Sandbox"
msgstr "安全なサンドボックスでの実行"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Under the hood, SQLite runs in a fully in-memory sandboxed environment, ensuring security and isolation."
msgstr "SQLiteは完全にインメモリ・サンドボックス化された環境で動作し、セキュリティと分離を保証します。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "When a connection to a local file is opened, the following occurs:"
msgstr "ローカルファイルへの接続がオープンされると、次のようになります："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "The database file is copied from disk to an in-memory Virtual FileSystem."
msgstr "データベースファイルはディスクからメモリ内の Virtual FileSystem にコピーされます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "A connection is established to the in-memory database."
msgstr "インメモリデータベースへの接続が確立されます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "While this approach is highly secure, many users need to persist database changes. One recommended solution is to periodically back up the in-memory database to disk. This can be achieved through a scheduled job that:"
msgstr "このアプローチは非常に安全ですが、多くのユーザーはデータベースの変更を永続化する必要があります。推奨されるソリューションの1つは、インメモリデータベースを定期的にディスクにバックアップすることです。これは、以下のようなスケジュールされたジョブによって実現できます："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Backs up the in-memory database to a new file."
msgstr "インメモリデータベースを新しいファイルにバックアップします。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Copies the backup to the host file system."
msgstr "バックアップをホストのファイルシステムにコピーします。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Atomically replaces the old database file with the new backup."
msgstr "アトミックに古いデータベースファイルを新しいバックアップに置き換えます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "This setup ensures a seamless experience while maintaining SQLite's sandboxed security. You can adapt this approach to fit your specific needs."
msgstr "この設定により、SQLite のサンドボックス化されたセキュリティを維持しながら、シームレスなエクスペリエンスが保証されます。特定のニーズに合わせてこのアプローチを変更することができます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Here's a sample implementation:"
msgstr "以下に実装例を示します："

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Technical Deep Dive"
msgstr "テクニカル・ディープ・ダイブ"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"https://github.com/roastedroot/sqlite4j[sqlite4j] compiles the official SQLite C https://www.sqlite.org/amalgamation.html[amalgamation] to WebAssembly (Wasm), which is then translated into Java bytecode using the https://chicory.dev/docs/experimental/aot[Chicory AOT compiler].\n"
"This enables SQLite to run in a pure Java environment while maintaining its full functionality."
msgstr "link:https://github.com/roastedroot/sqlite4j[sqlite4j は] 公式 SQLite C link:https://www.sqlite.org/amalgamation.html[を] WebAssembly (Wasm) にコンパイルし、 link:https://chicory.dev/docs/experimental/aot[Chicory AOT コンパイラを] 使用して Java バイトコードに変換します。これにより、SQLiteはその完全な機能を維持したまま、純粋なJava環境で実行できるようになります。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Security and Isolation"
msgstr "セキュリティと隔離"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"One of the key benefits of this approach is security.\n"
"Running SQLite inside a Wasm sandbox ensures memory safety and isolates it from the host system, making it an excellent choice for applications that require embedded databases while avoiding the risks of native code execution."
msgstr "このアプローチの主な利点の1つはセキュリティです。SQLiteをWasmサンドボックス内で実行することで、メモリの安全性が確保され、ホストシステムから分離されるため、ネイティブコード実行のリスクを回避しながら、組み込みデータベースを必要とするアプリケーションに最適です。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid ""
"With the new https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4j] extension, you get the best of both worlds: the power and reliability of SQLite combined with the safety and portability of Java.\n"
"This extension seamlessly integrates SQLite into Quarkus applications while maintaining a lightweight and secure architecture. Best of all, everything compiles effortlessly with __native-image__."
msgstr "新しい link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4j] 拡張機能を使用すると、SQLiteのパワーと信頼性をJavaの安全性と移植性と組み合わせることができます。この拡張機能は、軽量で安全なアーキテクチャを維持しながら、SQLiteをQuarkusアプリケーションにシームレスに統合します。何より、 _ネイティブイメージで_ 簡単にコンパイルできます。"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Ready to try it out? Give https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4j] a spin in your projects and experience the benefits of running SQLite in pure Java with Quarkus!"
msgstr "試す準備はできましたか？プロジェクトで link:https://github.com/quarkiverse/quarkus-jdbc-sqlite4j[quarkus-jdbc-sqlite4jを] 使用して、Quarkusを使用して純粋なJavaでSQLiteを実行する利点を体験してください！"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "Prior Art"
msgstr "先行技術"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "https://github.com/ncruces/go-sqlite3[ncruces/go-sqlite3]"
msgstr "link:https://github.com/ncruces/go-sqlite3[ncruces/go-sqlite3]"

#: _posts/2025-03-12-sqlite4j-pure-java-sqlite.adoc
#, fuzzy
msgid "https://www.infoq.com/articles/sqlite-java-integration-webassembly/[Ben Eckel - Infoq - WebAssembly, the Safer Alternative to Integrating Native Code in Java]"
msgstr "link:https://www.infoq.com/articles/sqlite-java-integration-webassembly/[Ben Eckel - Infoq - WebAssembly、Javaでネイティブコードを統合するより安全な選択肢]"

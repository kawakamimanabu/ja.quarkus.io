msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "Solving problems with Quarkus extensions (1/n)"
msgstr "Quarkusのエクステンションで問題を解く (1/n)"

#. type: YAML Front Matter: synopsis
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "The unique build infrastructure of Quarkus allows you to solve complex issues in a very simple way by developing custom extensions."
msgstr "Quarkusのユニークなビルドインフラストラクチャでは、カスタムエクステンションを開発することで、非常にシンプルな方法で複雑な問題を解決することができます。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "This is the first post of what I hope will be a series of several articles showing how you can solve complex problems by leveraging the unique Quarkus build infrastructure and extension framework."
msgstr "この記事は、Quarkus独自のビルドインフラとエクステンションフレームワークを活用して複雑な問題を解決する方法を紹介する、数回にわたる連載の最初の記事です。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"First things first, bootstraping a Quarkus extension is easy: in one command, you can get it scaffolded and get started on the actual implementation.\n"
"But that's not the subject of this post!"
msgstr "まず最初に、Quarkusエクステンションのブートストラップは簡単です。1つのコマンドで、雛形ができ、実際の実装に取り掛かることができます。しかし、それはこの記事の主題ではありません!"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"An extension, apart from providing some runtime code to your application, also allows to tweak the build of your application and do all sorts of things at the build level.\n"
"This is what we will focus on in this series."
msgstr "エクステンションは、アプリケーションにランタイムコードを提供するだけでなく、アプリケーションのビルドを調整し、ビルドレベルであらゆる種類のことを行うことができます。このシリーズでは、この点に焦点を当てます。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**Problem of the day:** to ensure binary compatibility, the Hub4j GitHub API introduces some bridge methods that confuse Mockito and more specifically ByteBuddy and ultimately make our tests unreliable. How can we solve that?"
msgstr "**今日の問題:** バイナリ互換性を確保するために、Hub4j GitHub APIは、Mockito、特にByteBuddyを混乱させ、最終的に我々のテストの信頼性を低下させるいくつかのブリッジ・メソッドを導入しています。どうすればそれを解決できるでしょうか？\n"

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "Some context"
msgstr "いくつかのコンテキスト"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"You might have heard about https://github.com/quarkiverse/quarkus-github-app[my Quarkus GitHub App extension]\n"
"that allows you to develop GitHub Apps based on Quarkus at light speed with very little boilerplate\n"
"(shameless ad: it is awesome!)."
msgstr "link:https://github.com/quarkiverse/quarkus-github-app[私のQuarkus GitHub Appエクステンション]は、QuarkusをベースにしたGitHubアプリを、ほとんど定型文を使わずに軽快に開発できます（恥知らずな宣伝：素晴らしいです！）。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"My dear colleague https://github.com/yrodiere[Yoann Rodière] (he is awesome too!) wrote some test infrastructure for it based on https://site.mockito.org[Mockito]\n"
"(which uses https://bytebuddy.net/[ByteBuddy] under the hood).\n"
"That was all good until we started noticing confusing and non reproducible failures in our tests\n"
"with Mockito sometimes not actually calling the method we would expect."
msgstr "私の親愛なる同僚である link:https://github.com/yrodiere[Yoann Rodière]（彼も素晴らしい！）は、 link:https://site.mockito.org[Mockito]（これはフードの下で link:https://bytebuddy.net/[ByteBuddy]を使用します）に基づいて、そのためのテストインフラをいくつか書きました。しかし、すべて順調だったのは、Mockitoが実際に期待するメソッドを呼び出さないことがあり、テストが混乱したり、再現性のない失敗をしたりすることに気づくまででした。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "The source of the problem is that, to ensure binary compatibility, the https://github.com/hub4j/github-api[Hub4j GitHub API] we use in Quarkus GitHub App introduces bridge methods in the bytecode."
msgstr "問題の原因は、バイナリ互換性を確保するために、Quarkus GitHub Appで使用している link:https://github.com/hub4j/github-api[Hub4j GitHub API]では、バイトコードにブリッジメソッドを導入していることです。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "For instance, let's take this method of the `GitHub` class of the GitHub API:"
msgstr "たとえば、GitHub API の `GitHub` クラスのこのメソッドを例に挙げてみましょう。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Historically, it used to return a `GHUser` but, in newer versions, it returns a `GHMyself`,\n"
"which broke the binary compatibility."
msgstr "歴史的に見ると、以前は `GHUser` を返していたが、新しいバージョンでは `GHMyself` を返すようになり、バイナリ互換性が壊れました。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To restore it and with the help of the `@WithBridgeMethods` annotation, the GitHub API build will create two methods in the bytecode:\n"
"one returning `GHMyself` and one returning `GHUser`.\n"
"This is very useful if you have compiled your application with an old version of the GitHub API and you just want to use the new version without recompiling your application.\n"
"Typically, in the case of Jenkins, you can switch to a new version of the GitHub API without having to recompile all the Jenkins plugins using GitHub API."
msgstr "これを復元するために、 `@WithBridgeMethods` アノテーションの助けを借りて、GitHub API ビルドはバイトコードに 2 つのメソッドを作成します。1 つは `GHMyself` を返し、もう 1 つは `GHUser` を返します。これは、GitHub APIの古いバージョンでアプリケーションをコンパイルしていて、アプリケーションを再コンパイルせずに新しいバージョンを使いたい場合に非常に便利です。一般的にJenkinsの場合、GitHub APIを使用するJenkinsプラグインをすべて再コンパイルすることなく、GitHub APIの新しいバージョンに切り替えることができます。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "At the bytecode level, you end up with something equivalent to the following:"
msgstr "バイトコードレベルでは、以下のようなものになります。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "`invokevirtual` of `getMyself()` that returns `GHMyself`"
msgstr "`GHMyself` を返す`getMyself()` の `invokevirtual`"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "And if your existing compiled code calls `GHUser getMyself()`, it will still work after the change of return type."
msgstr "また、既存のコンパイル済みコードが `GHUser getMyself()` を呼び出す場合、戻り値の型を変更した後も動作します。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This bridge methods approach solves a real problem and it's not that big of a deal as it's fully transparent for the developer...\n"
"except when you start using Mockito due to https://github.com/raphw/byte-buddy/issues/1162[a ByteBuddy issue]:\n"
"ByteBuddy can get confused if there are several methods with the same signature but different return types."
msgstr "このブリッジ・メソッドのアプローチは実際の問題を解決するもので、開発者にとっては完全に透過的なので、それほど大きな問題ではありません... link:https://github.com/raphw/byte-buddy/issues/1162[ByteBuddyの問題]でMockitoを使い始める場合を除けば。ByteBuddyは、同じシグネチャで異なる戻り値の型を持つメソッドが複数ある場合、混乱することがあります。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"ByteBuddy is an amazing library and this blog post should not be seen as a critique of ByteBuddy.\n"
"This is an extreme corner case that doesn't happen with standard bytecode."
msgstr "ByteBuddyは素晴らしいライブラリであり、このブログ記事はByteBuddyの批評として見るべきではありません。これは標準的なバイトコードでは起きない極端なコーナーケースです。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "This issue was causing our tests to be unreliable because sometimes ByteBuddy was choosing the wrong method to apply Mockito magic."
msgstr "この問題は、ByteBuddyがMockitoマジックを適用するために間違った方法を選択することがあり、テストの信頼性を低下させる原因となっていました。"

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "How can we work around this?"
msgstr "どうすれば回避できるのか？"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In the case of Quarkus GitHub App, we don't really care about binary compatibility:\n"
"when upgrading to a new version of the GitHub API,\n"
"users will rebuild their application."
msgstr "Quarkus GitHub Appの場合、バイナリ互換性はあまり気にしません。GitHub APIの新しいバージョンにアップグレードする場合、ユーザーはアプリケーションを再ビルドすることになります。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"So given these bridge methods are problematic,\n"
"one solution would be to get rid of them."
msgstr "ですから、これらのブリッジ方式が問題であることを考えると、これを廃止することが一つの解決策になると思います。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "Obviously, we could fork the GitHub API and avoid generating the bridge methods."
msgstr "もちろん、GitHub API をフォークしてブリッジメソッドを生成しないようにすることもできます。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"But forking and maintaining a fork forever is definitely not something we should consider if we can avoid it.\n"
"Especially since we want to continue benefiting from all the future improvements of the GitHub API."
msgstr "しかし、フォークして永遠に維持することは、避けられるのであれば絶対に考えるべきことではありません。特に、GitHub API の将来の改良の恩恵を受け続けたいのですから。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "So could we somehow keep the library standard but have Quarkus adjust the bytecode when building the application?"
msgstr "そこで、ライブラリは標準のまま、アプリケーションのビルド時にQuarkusでバイトコードを調整することはできないでしょうか。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"If you are in a rush, the short answer is yes.\n"
"Now let's go for the (not so) long answer."
msgstr "急いでいるのなら、短い答えは「イエス」です。では、（そうではない）長い答えに行きましょう。"

#. type: Title ===
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "Let's identify the methods"
msgstr "メソッドを特定しよう"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"In Quarkus, we can index the annotations with Jandex so, in a perfect world,\n"
"we would index the GitHub API jar with Jandex (which we already do for other purposes)\n"
"and interrogate Jandex to get all the methods annotated with `@WithBridgeMethods`:"
msgstr "Quarkusでは、Jandexでアノテーションのインデックスを作成できます。完璧な世界では、JandexでGitHub API jarのインデックスを作成し（他の目的ですでに行っています）、Jandexに問い合わせて、 `@WithBridgeMethods` でアノテーションされたすべてのメソッドを取得することができます。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, fuzzy
msgid ""
"Unfortunately, `@WithBridgeMethods` has a `CLASS` retention policy\n"
"- which makes perfect sense for its usage -\n"
"and Jandex only considers annotations with a `RUNTIME` retention policy."
msgstr "残念ながら、 `@WithBridgeMethods` は、 `CLASS` の保持ポリシーを持っています。これは、その使い方としては完璧に理にかなっているのですが、Jandexは、 `RUNTIME` の保持ポリシーを持つ注釈しか考慮しません。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"This limitation will be alleviated in Jandex 3 but, for the time being,\n"
"we cannot use Jandex."
msgstr "この制限はJandex 3で緩和される予定ですが、当面はJandexを使用することはできません。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Unfortunately, until then, we don't have many options here:\n"
"we have to list the methods manually."
msgstr "残念ながら、それまでは、ここに多くの選択肢はありません。手動でメソッドをリストアップするしかないのです。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "For more flexibility, we introduced a `BuildItem`:"
msgstr "より柔軟に対応するために、 `BuildItem` を導入しました。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "And we will produce a `GitHubApiClassWithBridgeMethodsBuildItem` for each class:"
msgstr "そして、各クラスごとに `GitHubApiClassWithBridgeMethodsBuildItem` を作成します。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"Once this is done, we are able to consume the `GitHubApiClassWithBridgeMethodsBuildItem` from any Quarkus `@BuildStep`\n"
"so this list is generally available to the Quarkus build."
msgstr "これが完了すると、どのQuarkus `@BuildStep` からでも、 `GitHubApiClassWithBridgeMethodsBuildItem` を消費できるようになるので、このリストはQuarkusビルドで一般的に利用できるようになります。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "I won't go into detail on the Quarkus build process but the principle of it is extremely simple:"
msgstr "Quarkusのビルドプロセスの詳細は省きますが、その原理は極めてシンプルです。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "It is composed of build steps (methods annotated with `@BuildStep`)."
msgstr "ビルドステップ（ `@BuildStep` でアノテーションされたメソッド）で構成されています。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "A build step can consume build items."
msgstr "ビルドステップはビルドアイテムを消費することができます。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "A build step produces build items."
msgstr "ビルドステップはビルドアイテムを生成します。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "Then it is just a matter of resolving the dependencies of the build steps to get to the final result: your application."
msgstr "あとは、ビルドステップの依存関係を解決して、最終結果であるアプリケーションを完成させるだけです。"

#. type: delimited block =
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "You can learn more about it in the link:/guides/writing-extensions#build-step-processors[Writing extensions guide]."
msgstr "link:/guides/writing-extensions#build-step-processors[Writing extensionsガイド]で詳しく解説しています。"

#. type: Title ===
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "Removing the methods"
msgstr "メソッドの削除"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "Now that we have the list of methods handy, the next step is to remove them."
msgstr "これでメソッドのリストが手元に揃ったので、次のステップではメソッドを削除します。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"To manipulate bytecode during the build, Quarkus offers the `BytecodeTransformerBuildItem`.\n"
"Adjusting the bytecode of a class is just a matter of producing one for the given class."
msgstr "ビルド中にバイトコードを操作するために、Quarkusは `BytecodeTransformerBuildItem` を提供します。 クラスのバイトコードを調整するには、与えられたクラスに対してバイトコードを生成するだけです。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"For instance, to remove the bridge methods from our GitHub API methods,\n"
"we add the following build step to our extension:"
msgstr "たとえば、GitHub API のメソッドからブリッジメソッドを削除するには、次のようなビルドステップをエクステンションに追加します。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "We are going to produce ``BytecodeTransformerBuildItem``s."
msgstr "`BytecodeTransformerBuildItem`sを作成します。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "We consume the previously produced ``GitHubApiClassWithBridgeMethodsBuildItem``s."
msgstr "先に生産された `GitHubApiClassWithBridgeMethodsBuildItem`s を消費します。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "`RemoveBridgeMethodsClassVisitor` is a classic https://asm.ow2.io[ASM] `ClassVisitor` that will modify the bytecode:"
msgstr "`RemoveBridgeMethodsClassVisitor` は、バイトコードを修正する古典的な link:https://asm.ow2.io[ASM] `ClassVisitor` です。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "If the method name matches and the method is a bridge and synthetic method..."
msgstr "メソッド名が一致し、そのメソッドがブリッジで合成メソッドである場合..."

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "... we remove it from the bytecode by returning `null`."
msgstr "... `null` を返すことで、バイトコードからそれを削除します。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "If not, we just delegate to the superclass method that will incorporate the method in the bytecode."
msgstr "そうでない場合は、バイトコードにそのメソッドを組み込むスーパークラスのメソッドに委ねるだけです。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "And that's it!"
msgstr "以上です!"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"During the build process, Quarkus will create a class file containing the modified bytecode\n"
"and will use it instead of the class coming from the GitHub API jar.\n"
"Thus the bridge methods we wanted to remove will never be visible to ByteBuddy."
msgstr "ビルドプロセスで、Quarkusは修正されたバイトコードを含むクラスファイルを作成し、GitHub API jarから来るクラスの代わりにそれを使用します。そのため、削除したいブリッジメソッドがByteBuddyから見えることはありません。"

#. type: Title ==
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid ""
"At conferences, we often say that Quarkus is doing things differently from other frameworks\n"
"and that the magic relies in its innovative build process."
msgstr "カンファレンスでは、Quarkusは他のフレームワークとは異なることを行っており、その革新的なビルドプロセスに魔法がかかっているとよく言われます。"

#. type: Plain text
#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "This build process is the key to the low memory footprint and fast startup times of Quarkus."
msgstr "このビルドプロセスが、Quarkusのメモリフットプリントの少なさと起動時間の速さの秘訣です。"

#: _posts/2022-04-20-solving-problems-with-extensions.adoc
msgid "**But it is also a very powerful tool to customize the build of your applications.**"
msgstr "**しかし、アプリケーションのビルドをカスタマイズするための非常に強力なツールでもあるのです。**\n"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Obtaining heap dump on OutOfMemoryError with Quarkus native"
msgstr "QuarkusネイティブでのOutOfMemoryError時のヒープダンプの取得"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Generating and inspecting heap dumps in Quarkus native when `OutOfMemoryError` errors occur"
msgstr "`OutOfMemoryError` エラー発生時の Quarkus ネイティブでのヒープダンプの生成と検査"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Starting with GraalVM for JDK 21,\n"
"native executables can run with the `-XX:+HeapDumpOnOutOfMemoryError` option to generate a heap dump when a `java.lang.OutOfMemoryError` is thrown.\n"
"In this blog post we will explore how to use the flag,\n"
"we will inspect what a GraalVM Native Image heap dump looks like and how it compares with one produced by HotSpot."
msgstr "GraalVM for JDK 21から、ネイティブ実行可能ファイルは、 `java.lang.OutOfMemoryError` がスローされたときにヒープダンプを生成する `-XX:+HeapDumpOnOutOfMemoryError` オプションを付けて実行することができます。このブログポストでは、このフラグの使い方を調べ、GraalVMネイティブ・イメージのヒープ・ダンプがどのように見えるか、そしてHotSpotによって生成されたものとどのように比較するかを検証します。"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Note: The heap of GraalVM Native Image executables has both read-only and read-write segments.\n"
"The read-only part is referred to as the \"image heap\" and contains the data pre-initialized during the image build to help speed up start-up time.\n"
"The read-write part is where allocations at runtime are made.\n"
"Therefore, heap dumps generated at runtime will contain content from both the \"image heap\" and the read-write heap."
msgstr "注：GraalVM ネイティブ・イメージ実行可能ファイルのヒープには、読み取り専用と読み取り書 き込みのセグメントがあります。読み取り専用部分は「イメージヒープ」と呼ばれ、起動時間を短縮するためにイメージビルド中に初期化されたデータが含まれています。読み書き可能な部分は、実行時に割り当てが行われる場所です。したがって、実行時に生成されるヒープ・ダンプには、「イメージ・ヒープ」と「読み書きヒープ」の両方の内容が含まれます。"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"To see this flag in action, we need to manufacture a situation where a Quarkus application runs out of memory.\n"
"One easy way to achieve this is to configure the application with a garbage collector that doesn't do any memory reclamation,\n"
"i.e. the Epsilon GC.\n"
"Once the Quarkus application is running with Epsilon GC,\n"
"apply some load and within a short space of time it will run out of memory and produce a heap dump."
msgstr "このフラグの動作を確認するには、Quarkusアプリケーションがメモリ不足になる状況を作り出す必要があります。これを実現する簡単な方法の1つは、メモリの再利用を行わないガベージコレクタ、つまりEpsilon GCでアプリケーションを構成することです。QuarkusアプリケーションをEpsilon GCで実行した後、何らかの負荷をかけると、短時間でメモリが不足し、ヒープダンプが生成されます。"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Let’s do this using a Quarkus application that simply responds to an HTTP endpoint request as a starting point.\n"
"The sample application can be downloaded from\n"
"https://code.quarkus.io[code.quarkus.io] using a browser\n"
"or via the command line:"
msgstr "HTTPエンドポイントリクエストに応答するだけのQuarkusアプリケーションを出発点として、これを実行してみましょう。サンプルアプリケーションは、ブラウザまたはコマンドラインを使用して link:https://code.quarkus.io[code.quarkus.ioから] ダウンロードできます："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Next, build a Quarkus native executable with GraalVM for JDK 21 configuring it to use Epsilon GC:"
msgstr "次に、Epsilon GCを使用するように設定したGraalVM for JDK 21で、Quarkusネイティブ実行可能ファイルをビルドします："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Note: The GC selection needs to be done at build time for Quarkus native applications."
msgstr "注：Quarkusネイティブアプリケーションの場合、GCの選択はビルド時に行う必要があります。"

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "While the Quarkus native executable is being produced you will be able to observe that GC is indeed configured to be EpsilonGC:"
msgstr "Quarkusのネイティブ実行可能ファイルが作成されている間、GCがEpsilonGCに設定されていることを確認できます："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Once the build completes,\n"
"start Quarkus with `-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError`.\n"
"The latter forces the application to shutdown when an `OutOfMemoryError` occurs rather than leave the process in an indeterminate state:"
msgstr "ビルドが完了したら、Quarkusを `-XX:+HeapDumpOnOutOfMemoryError -XX:+ExitOnOutOfMemoryError` 。後者は、 `OutOfMemoryError` が発生したときに、プロセスを不確定な状態にするのではなく、アプリケーションを強制的にシャットダウンします："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Next, apply some load to the HTTP endpoint exposed by the Quarkus application, for example using `curl` in a bash loop:"
msgstr "次に、Quarkusアプリケーションが公開するHTTPエンドポイントに負荷をかけます。たとえば、bashループで `curl` ："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Switching to the Quarkus console,\n"
"an `OutOfMemoryError` would be observed along with some messages indicating that a heap dump is being produced:"
msgstr "Quarkusのコンソールに切り替えると、 `OutOfMemoryError` 、ヒープダンプが生成されていることを示すメッセージが表示されます："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"Multiple graphical tools exist out there to inspect heap dumps,\n"
"such as https://visualvm.github.io/[VisualVM],\n"
"https://eclipse.dev/mat/[Eclipse Memory Analyzer (MAT)], etc.,\n"
"but some new ones are also available that you can run in the command line to get a quick picture of the heap dump,\n"
"for example\n"
"https://github.com/openjdk/jol[Java Object Layout (JOL)]:"
msgstr "link:https://visualvm.github.io/[VisualVM] 、 link:https://eclipse.dev/mat/[Eclipse Memory Analyzer (MAT)] など、ヒープ・ダンプを検査するためのグラフィカル・ツールは複数存在しますが、 link:https://github.com/openjdk/jol[Java Object Layout (JOL] )のように、ヒープ・ダンプを素早く把握するためにコマンド・ラインで実行できる新しいツールもあります："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"The presence of SubstrateVM,\n"
"the VM that powers native images built with GraalVM,\n"
"can be clearly observed because of the instances of `com.oracle.svm.core.monitor.JavaMonitor` present in the heap dump.\n"
"What would the heap dump look like if we repeat exactly the same exercise but instead we use Quarkus JVM mode? Let’s see:"
msgstr "GraalVMでビルドされたネイティブ・イメージを動かすVMであるSubstrateVMの存在は、ヒープ・ダンプに存在する `com.oracle.svm.core.monitor.JavaMonitor` 。QuarkusのJVMモードを使用する代わりに、まったく同じ演習を繰り返すと、ヒープダンプはどのように見えるでしょうか？見てみましょう："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "Rebuild the Quarkus app for JVM mode and run it with Epsilon GC:"
msgstr "QuarkusアプリをJVMモード用に再構築し、Epsilon GCで実行します："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "After applying the same load, you would observe the heap dump being generated in JVM mode as well:"
msgstr "同じ負荷をかけると、JVMモードでもヒープ・ダンプが生成されることがわかります："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid "And this is what the heap dump looks like with JOL:"
msgstr "そして、これがJOLのヒープダンプの様子です："

#: _posts/2024-04-23-heapdump-oome-native.adoc
#, fuzzy
msgid ""
"As expected, no SubstrateVM classes are present in this heap dump,\n"
"leaving only Quarkus, Vert.x and OpenJDK types in the heap dump."
msgstr "予想通り、このヒープ・ダンプにはSubstrateVMクラスは存在せず、Quarkus、Vert.x、OpenJDKタイプだけが残っています。"

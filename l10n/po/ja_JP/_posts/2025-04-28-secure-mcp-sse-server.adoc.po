msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Getting ready for secure MCP with Quarkus MCP Server"
msgstr "Quarkus MCP ServerでセキュアなMCPの準備"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Explain how MCP clients can access Quarkus MCP SSE servers with access tokens"
msgstr "MCPクライアントがアクセストークンを使用してQuarkus MCP SSEサーバーにアクセスする方法を説明します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io/specification/2025-03-26[The latest version of the Model Context Protocol (MCP) specification] introduces an https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[authorization] flow."
msgstr "link:https://modelcontextprotocol.io/specification/2025-03-26[モデル・コンテキスト・プロトコル（MCP）仕様の最新バージョンでは] 、 link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[認可] フローが導入されています。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "While it will take a bit of time for the new MCP specification to be widely supported, you can already add authentication to client and server following the https://modelcontextprotocol.io/specification/2024-11-05[previous MCP version]."
msgstr "新しいMCP仕様が広くサポートされるには少し時間がかかりますが、 link:https://modelcontextprotocol.io/specification/2024-11-05[以前のMCPバージョンに従って] クライアントとサーバーに認証を追加することはすでに可能です。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You only need an MCP client that can receive an access token and pass it to the MCP server and, obviously, an MCP server that verifies the token."
msgstr "必要なのは、アクセストークンを受け取ってMCPサーバに渡すMCPクライアントと、トークンを検証するMCPサーバだけです。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "In this post, we will detail how you can enforce authentication with the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP SSE Server]."
msgstr "この投稿では、 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP SSEサーバーで] 認証を強制する方法について詳しく説明します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "We will first use Keycloak as an OpenID Connect (OIDC) provider to login and use a Keycloak JWT access token to access the server with `Quarkus MCP SSE Server Dev UI` in dev mode."
msgstr "まずKeycloakをOpenID Connect（OIDC）プロバイダとして使ってログインし、Keycloak JWTアクセストークンを使って、 `Quarkus MCP SSE Server Dev UI` 、devモードでサーバーにアクセスします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Secondly, we will show how to log in using GitHub OAuth2 and use a GitHub binary access token to access the server in prod mode with both https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector] and the `curl` tools."
msgstr "次に、GitHub OAuth2 を使ってログインし、GitHub バイナリのアクセストークンを使って link:https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector] と `curl` ツールの両方で prod モードでサーバーにアクセスする方法を紹介します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Step 1 - Create an MCP server using the SSE transport"
msgstr "ステップ1 - SSEトランスポートを使用してMCPサーバーを作成します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP SSE server that requires authentication to establish Server-Sent Events (SSE) connection and also when invoking the tools."
msgstr "まず、安全なQuarkus MCP SSEサーバーを作成します。このサーバーでは、Server-Sent Events（SSE）接続を確立するときと、ツールを呼び出すときに認証が必要です。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server[Quarkus MCP SSE Server samples]."
msgstr "プロジェクトの完全なソースは、 link:https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server[Quarkus MCP SSE Serverサンプルに] あります。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Maven dependencies"
msgstr "Mavenの依存関係"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "以下の依存関係を追加します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "`quarkus-mcp-server-sse` is required to support MCP SSE transport."
msgstr "`quarkus-mcp-server-sse` はMCP SSEトランスポートをサポートするために必要です。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "`quarkus-oidc` is required to secure access to MCP SSE endpoints. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` は、MCP SSE エンドポイントへのアクセスを保護するために必要です。そのバージョンはQuarkusのBOMに定義されています。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Tool"
msgstr "工具"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Let's create a tool that can be invoked only if the current MCP request is authenticated:"
msgstr "現在のMCPリクエストが認証された場合にのみ起動できるツールを作成しましょう："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Provide a tool that can return a name of the current user. Note the `user-name-provider` tool name, you will use it later for a tool call."
msgstr "現在のユーザーの名前を返すことができるツールを提供します。 `user-name-provider` のツール名に注意してください。後でツールを呼び出す際に使用します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid ""
"Require authenticated tool access - yes, the only difference with an unauthenticated MCP server tool is `@Authenticated`, that's it!\n"
"See also how the main MCP SSE endpoint is secured in the <<initial-configuration>> section below."
msgstr "認証されたツール・アクセスが必要 - はい、認証されていない MCP サーバ・ツールとの唯一の違いは、 `@Authenticated` 、それだけです！メインのMCP SSEエンドポイントがどのようにセキュリティで保護されているかについては、以下の <<initial-configuration>> のセクションも参照してください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use the injected `SecurityIdentity` to return the current user's name."
msgstr "注入された `SecurityIdentity` を使用して、現在のユーザー名を返します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Configuration"
msgstr "設定"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Finally, let's configure our secure MCP server:"
msgstr "最後に、安全なMCPサーバーを設定しましょう："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<tool>> section above, though you can also secure access to the tool by listing both main and tools endpoints in the configuration, for example: `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*`."
msgstr "最初のハンドシェイク中に、メインの MCP SSE エンドポイントへの認証されたアクセスを強制します。上記の <<tool>> セクションの注釈を使用してツールを保護する方法も参照してください。ただし、構成にメイン・エンドポイントとツール・エンドポイントの両方を記載することで、ツールへのアクセスを保護することもできます（例： `quarkus.http.auth.permission.authenticated.paths=/mcp/sse,/mcp/messages/*` ."

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "We are ready to test our secure MCP server in dev mode."
msgstr "セキュアな MCP サーバーを開発モードでテストする準備ができました。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Step 2 - Access the MCP server in dev mode"
msgstr "ステップ2 - MCPサーバーにdevモードでアクセスします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "MCPサーバーをdevモードで起動"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "The configuration properties that we set in the <<initial-configuration>> section above are sufficient to start the application in dev mode."
msgstr "上記の <<initial-configuration>> セクションで設定したコンフィギュレーション・プロパティは、dev モードでアプリケーションを起動するのに十分です。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "The OIDC configuration is provided in dev mode automatically by https://quarkus.io/guides/security-openid-connect-dev-services[Dev Services for Keycloak]. It creates a default realm, client and adds two users, `alice` and `bob`, for you to get started with OIDC immediately. You can also register a custom Keycloak realm to work with the existing realm, client and user registrations."
msgstr "OIDCの設定は、 link:https://quarkus.io/guides/security-openid-connect-dev-services[KeycloakのDev Servicesによって] 自動的にdevモードで提供されます。デフォルトのレルムとクライアントが作成され、 `alice` と `bob` という2人のユーザーが追加され、すぐにOIDCを使い始めることができます。また、カスタムKeycloakレルムを登録して、既存のレルム、クライアント、ユーザー登録と連動させることもできます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You can also login to other OIDC and OAuth2 providers in OIDC Dev UI, see the <<mcp-server-devui>> section for more details."
msgstr "OIDC Dev UIで他のOIDCやOAuth2プロバイダにもログインできます。詳しくは <<mcp-server-devui>> セクションをご覧ください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use OIDC Dev UI to login and copy access token"
msgstr "OIDC Dev UIを使用してログインし、アクセストークンをコピーします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Go to http://localhost:8080/q/dev[Dev UI], find the OpenId Connect card:"
msgstr "link:http://localhost:8080/q/dev[Dev UI に] アクセスして、OpenId Connect カードを探します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Follow the `Keycloak Provider` link and https://quarkus.io/guides/security-openid-connect-dev-services#develop-service-applications[login to Keycloak] using an `alice` name and an `alice` password."
msgstr "`Keycloak Provider` リンクに従い、 `alice` 名前と `alice` パスワードを使って link:https://quarkus.io/guides/security-openid-connect-dev-services#develop-service-applications[Keycloakにログインして] ください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You can login to other providers such as `Auth0` or https://quarkus.io/guides/security-openid-connect-providers#github[GitHub] from OIDC DevUI as well. The only requirement is to update your application registration to allow callbacks to DevUI. For example, see how you can https://quarkus.io/guides/security-oidc-auth0-tutorial#looking-at-auth0-tokens-in-the-oidc-dev-ui[login to Auth0 from Dev UI]."
msgstr "OIDC DevUIから `Auth0` 、 link:https://quarkus.io/guides/security-openid-connect-providers#github[GitHubなどの] 他のプロバイダにもログインできます。唯一の要件は、DevUIへのコールバックを許可するようにアプリケーション登録を更新することです。例えば、 link:https://quarkus.io/guides/security-oidc-auth0-tutorial#looking-at-auth0-tokens-in-the-oidc-dev-ui[Dev UIからAuth0にログイン] する方法をご覧ください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "After logging in with `Keycloak` as `alice`, copy the acquired access token using a provided copy button:"
msgstr "`alice` として `Keycloak` でログインした後、取得したアクセストークンを所定のコピーボタンでコピーします："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use Quarkus MCP Server Dev UI to access the MCP server"
msgstr "Quarkus MCP Server Dev UIを使用して、MCPサーバーにアクセスします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Make sure to login and copy the access token as explained in the <<oidc-devui>> section above."
msgstr "上記の <<oidc-devui>> のセクションで説明したように、必ずログインしてアクセストークンをコピーしてください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Go to http://localhost:8080/q/dev[Dev UI], find the MCP Server card:"
msgstr "link:http://localhost:8080/q/dev[Dev UIに] 移動し、MCPサーバーカードを探します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Select its `Tools` option and choose to `Call` the `user-name-provider` tool:"
msgstr "その `Tools` オプションを選択し、 `Call` `user-name-provider` ツールを選択します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Paste the copied Keycloak access token into the Tool's `Bearer token` field, and request a new MCP SSE session:"
msgstr "コピーしたKeycloakアクセストークンをツールの `Bearer token` フィールドに貼り付け、新しいMCP SSEセッションを要求します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Make a tool call and get a response which contains the `alice` user name:"
msgstr "ツールを呼び出し、 `alice` ユーザー名を含むレスポンスを取得します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid ""
"All is good in dev mode; it is time to see how it will work in prod mode.\n"
"Before that, stop the MCP server, which runs in dev mode."
msgstr "devモードではすべて順調なので、prodモードでどのように動作するか見てみましょう。その前に、devモードで動作しているMCPサーバーを停止してください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Step 3 - Access the MCP server in prod mode"
msgstr "ステップ3 - prodモードでMCPサーバーにアクセスします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Register GitHub OAuth2 application"
msgstr "GitHub OAuth2アプリケーションの登録"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Before it was all in dev mode - using Quarkus devservices to try things out. Now, let's move to prod mode. If you already have a Keycloak instance running then you can use it. But to illustrate how OAuth2 works with more than just Keycloak, we will switch to GitHub OAuth2 when the application runs in _prod mode_."
msgstr "以前は、Quarkusのdevservicesを使用して、すべてをdevモードで試していました。では、prodモードに移行しましょう。すでにKeycloakのインスタンスを実行している場合は、それを使用できます。しかし、OAuth2 が Keycloak 以外でも使えることを説明するために、アプリケーションを _prod モードで_ 実行するときには GitHub OAuth2 に切り替えてみましょう。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "First, start with registering a GitHub OAuth2 application."
msgstr "まずは GitHub OAuth2 アプリケーションを登録しましょう。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Follow the https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 registration] process, and make sure to register the `http://localhost:8080/login` callback URL."
msgstr "link:https://quarkus.io/guides/security-openid-connect-providers#github[GitHub OAuth2 の登録] 手順に従って、必ず `http://localhost:8080/login` コールバック URL を登録します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Next, use the client id and secret generated during the GitHub OAuth2 application registration to <<update-config-to-support-github,update the configuration to support GitHub>>."
msgstr "次に、GitHub OAuth2 アプリケーションの登録時に生成されたクライアント ID とシークレットを使って、 xref:update-config-to-support-github[GitHub をサポートするように設定を更新] します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Update the configuration to support GitHub"
msgstr "GitHubをサポートするように設定を更新"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "The <<initial-configuration, configuration>> that was used to run the MCP server in dev mode was suffient because Keycloak Dev Service was supporting the OIDC login."
msgstr "Keycloak Dev ServiceがOIDCログインをサポートしていたため、MCPサーバーをdevモードで実行するために使用した xref:initial-configuration[設定で] 十分でした。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "To work with GitHub in prod mode, we update the configuration as follows:"
msgstr "GitHub を prod モードで使うには、次のように設定を更新します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Enforce an authenticated access to the main MCP SSE endpoint during the initial handshake. See also how the tool is secured with an annotation in the <<tool>> section above."
msgstr "最初のハンドシェイク中に、メインの MCP SSE エンドポイントへの認証されたアクセスを強制します。上記の <<tool>> セクションの注釈で、ツールがどのように保護されているかも参照してください。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Default Quarkus OIDC configuration requires that only GitHub access tokens can be used to access MCP SSE server."
msgstr "Quarkus OIDCのデフォルト設定では、GitHubのアクセストークンのみを使用してMCP SSEサーバーにアクセスできるようになっています。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "By default, `quarkus.oidc.provider=github` supports an authorization code flow only. `quarkus.oidc.application-type=service` overrides it and requires the use of bearer tokens."
msgstr "デフォルトでは、 `quarkus.oidc.provider=github` は認証コードフローのみをサポートしています。 `quarkus.oidc.application-type=service` はこれを上書きし、ベアラートークンの使用を要求します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use GitHub authorization code flow to support the login endpoint with a dedicated Quarkus OIDC `login` https://quarkus.io/guides/security-openid-connect-multitenancy[tenant] configuration."
msgstr "GitHub 認証コードフローを使用して、専用の Quarkus OIDC `login` link:https://quarkus.io/guides/security-openid-connect-multitenancy[テナント] 構成でログインエンドポイントをサポートします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use the client id and secret generated in the <<register-github-application>> section."
msgstr "<<register-github-application>> セクションで生成したクライアント ID とシークレットを使用します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Note the use of the `%prod.` prefixes. It ensures the configuration properties prefixed with `%prod.` are only effective in prod mode and do not interfere with dev mode."
msgstr "`%prod.` という接頭辞の使い方に注意してください。これは、 `%prod.` という接頭辞を持つ設定プロパティが、prod モードでのみ有効であり、dev モードに干渉しないことを保証するものです。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Implement Login endpoint"
msgstr "ログインエンドポイントの実装"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Currently, MCP clients can not use the authorization code flow themselves. Therefore, we implement an OAuth2 login endpoint that will return a GitHub token for the user to use with MCP clients, which can work with bearer tokens."
msgstr "現在のところ、MCP クライアントは認証コードフローを使うことができません。そこで、OAuth2 ログインエンドポイントを実装し、GitHub トークンを返すようにしています。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Add another dependency to support Qute templates:"
msgstr "Quteテンプレートをサポートするために、別の依存関係を追加します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "`quarkus-rest-qute` is required to generate HTML pages. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-rest-qute` は、HTMLページを生成するために必要です。そのバージョンはQuarkusのBOMで定義されています。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "and implement the login endpoint:"
msgstr "を作成し、ログインエンドポイントを実装します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "GitHub access tokens are binary and Quarkus OIDC indirectly verifies them by using them to request GitHub specific `UserInfo` representation."
msgstr "GitHubのアクセストークンはバイナリであり、Quarkus OIDCは、それを使用してGitHub固有の `UserInfo` 表現を要求することで、間接的に検証します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "`AccessTokenCredential` is used to capture a binary GitHub access token."
msgstr "`AccessTokenCredential` は、バイナリの GitHub アクセストークンを取得するために使われます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid ""
"After the user logs in to GitHub and is redirected to this endpoint, the access token will be returned to the user in an HTML page generated with a simple https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server/src/main/resources/templates/accessTokenPage.html[Qute template].\n"
"Of course, you would not do that in a real application. It is just an example to demonstrate the capability."
msgstr "ユーザーが GitHub にログインしてこのエンドポイントにリダイレクトされると、アクセストークンはシンプルな link:https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/secure-mcp-sse-server/src/main/resources/templates/accessTokenPage.html[Qute テンプレートで] 生成された HTML ページでユーザーに返されます。もちろん、実際のアプリケーションではこのようなことはしません。もちろん、実際のアプリケーションでこのようなことをすることはないでしょう。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Package and run the MCP Server"
msgstr "MCPサーバーのパッケージ化と実行"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Package the MCP server application:"
msgstr "MCPサーバー・アプリケーションをパッケージ化します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Run it:"
msgstr "実行してください："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You can also run the MCP server from its Maven coordinates directly with `jbang`:"
msgstr "また、 `jbang` を使用して、Maven座標から直接MCPサーバーを実行することもできます："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Login to GitHub and copy the access token"
msgstr "GitHubにログインし、アクセストークンをコピーします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Access `http://localhost:8080/login`, login to GitHub, and copy the returned access token:"
msgstr "アクセス `http://localhost:8080/login` GitHub にログインし、返されたアクセストークンをコピーします："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header.\n"
"However, GitHub may require that both client id and secret are submitted as form parameters instead."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid ""
"When you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server,\n"
"try to replace `%prod.quarkus.oidc.login.credentials.secret=${github.client.secret}` property\n"
"with the following two properties instead:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use MCP Inspector to access the MCP server"
msgstr "MCP Inspectorを使用してMCPサーバーにアクセスします。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io/docs/tools/inspector[MCP Inspector] is an interactive developer tool for testing and debugging MCP servers. Let's use it to invoke our MCP server with the authentication."
msgstr "link:https://modelcontextprotocol.io/docs/tools/inspector[MCP Inspector] は、MCP サーバをテストおよびデバッグするための対話型開発ツールです。このツールを使用して、MCP サーバを認証付きで呼び出してみましょう。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Launch https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector]:"
msgstr "link:https://modelcontextprotocol.io/docs/tools/inspector[MCPインスペクターを] 起動します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Ensure that you have https://github.com/modelcontextprotocol/inspector/releases/tag/0.6.0[modelcontextprotocol/inspector] version 0.6.0 or later installed as it adds support for specifying bearer token authentication."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Navigate to the URL provided into a browser."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Change the _Transport Type_ dropdown to `SSE` and the _URL_ to `http://localhost:8080/mcp/sse` so that it targets the running Quarkus MCP Server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Select the _Authorization_ button and paste the copied GitHub access token from the browser to the `Bearer Token` field and connect to the Quarkus MCP SSE server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Next, make a `user-name-provider` tool call:"
msgstr "次に、 `user-name-provider` ツールを呼び出します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You will see the name from your GitHub account returned."
msgstr "GitHub アカウントの名前が返されます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Use curl to access the MCP server"
msgstr "MCPサーバーにアクセスするにはcurlを使用します。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Finally, let's use `curl` and also learn a little bit how both the MCP protocol and MCP SSE transport work."
msgstr "最後に、 `curl` 。また、MCPプロトコルとMCP SSEトランスポートがどのように機能するのかを少し学びましょう。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "First, open a new terminal window and access the main SSE endpoint without the GitHub access token:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "You will get HTTP 401 error."
msgstr "HTTP 401エラーが表示されます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Use the access token that was obtained previously to access MCP server:"
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "and get an SSE response such as:"
msgstr "のようなSSEレスポンスが返ってきます："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid ""
"The SSE connection is created.  Note the unique path in the received `data`, we need this path to invoke the tools.\n"
"We cannot invoke the tool directly, we first need to follow the MCP handshake protocol."
msgstr "SSE 接続が作成されます。受信した `data` に一意のパスがあることに注意してください。ツールを直接呼び出すことはできず、まず MCP ハンドシェイク・プロトコルに従う必要があります。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Open another terminal window and use the same GitHub access token to initialize the curl as MCP client, and access the tool, using the value of the `data` property to build the target URL."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Send the client initialization request:"
msgstr "クライアント初期化リクエストを送信します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "where the `initialize.json` file has a content like this:"
msgstr "ここで、 `initialize.json` ファイルは次のような内容になっています："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Send the client initialization confirmation:"
msgstr "クライアントの初期化確認を送信します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "where the `initialized.json` file has a content like this:"
msgstr "ここで、 `initialized.json` ファイルは次のような内容になっています："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Finally, send the request that will invoke the tool:"
msgstr "最後に、ツールを呼び出すリクエストを送信します："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "where the `call.json` file has a content like this:"
msgstr "`call.json` ファイルは次のような内容です："

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Now look at the terminal window containing the SSE connection and you will see the name from your GitHub account returned."
msgstr ""

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid ""
"In this blog post, we explained how you can easily create a Quarkus MCP SSE server that requires authentication, obtain an access token and use it to access the MCP server tool in dev mode with `Quarkus MCP SSE Server Dev UI` and prod mode with both the https://modelcontextprotocol.io/docs/tools/inspector[MCP inspector] and the curl tools.\n"
"You can use any MCP client that allows passing a bearer token to the server."
msgstr "このブログ記事では、認証が必要なQuarkus MCP SSEサーバーを簡単に作成し、アクセストークンを取得して、そのアクセストークンを使用して、 `Quarkus MCP SSE Server Dev UI` 、MCP link:https://modelcontextprotocol.io/docs/tools/inspector[インスペクターと] curlツールの両方を使用して、devモードとprodモードでMCPサーバーツールにアクセスする方法を説明しました。ベアラートークンをサーバに渡すことができるMCPクライアントであれば、どのようなものでも使用できます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Notice, that there is no real difference in how OAuth2 is done for either Quarkus MCP server or REST endpoints. The most complex part is to get the settings configured correctly for your OAuth2 provider - but when all is done you just apply a few annotations to mark relevant methods as secure and Quarkus handles the authentication for you."
msgstr "QuarkusのMCPサーバーでもRESTエンドポイントでも、OAuth2の実行方法に違いはありません。最も複雑なのは、OAuth2プロバイダーの設定を正しく行うことですが、すべてが完了したら、関連するメソッドに安全であることを示すアノテーションをいくつか適用するだけで、Quarkusが認証処理を行います。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "This blog post uses the previous version of the MCP protocol. The Quarkus team is keeping a close eye on the MCP Authorization specification evolution and working on having all possible MCP Authorization scenarios supported."
msgstr "このブログ記事では、旧バージョンのMCPプロトコルを使用しています。Quarkusチームは、MCP Authorization仕様の進化を注視し、可能な限りのMCP Authorizationシナリオをサポートできるよう取り組んでいます。"

#: _posts/2025-04-28-secure-mcp-sse-server.adoc
#, fuzzy
msgid "Stay tuned for more updates!"
msgstr "さらなるアップデートにご期待ください！"

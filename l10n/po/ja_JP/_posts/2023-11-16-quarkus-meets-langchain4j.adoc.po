msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "When Quarkus meets LangChain4j"
msgstr "QuarkusとLangChain4jの出会い"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Learn about the new quarkus-langchain4j extension to integrate LLMs in Quarkus applications."
msgstr "QuarkusアプリケーションにLLMを統合する新しいエクステンション、quarkus-langchain4jについてご紹介します。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Large language models (LLMs) are reshaping the world of software, altering the way we interact with users and develop business logic."
msgstr "大規模言語モデル（LLM）はソフトウェアの世界を再構築し、ユーザーとの対話やビジネスロジックの開発方法を変えています。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Popularized by https://openai.com/[OpenAI]'s https://chat.openai.com/[ChatGPT], LLMs are now available in many flavors and sizes. The https://huggingface.co/models[Hugging-Face] platform references hundreds of them, and major tech companies like Facebook, Google, Microsoft, Amazon and IBM are also providing their own models."
msgstr "link:https://openai.com/[OpenAI] のlink:https://chat.openai.com/[ChatGPTによって] 普及したLLMは、現在多くの種類とサイズがあります。 link:https://huggingface.co/models[Hugging-Face] プラットフォームは何百ものLLMを参照しており、Facebook、Google、Microsoft、Amazon、IBMのような大手テック企業も独自のモデルを提供しています。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "LLMs are not a new concept. They have been around for a while, but they were not as powerful or as accessible they became when OpenAI made ChatGPT API's publically available. Since then the Quarkus team have been thinking about what it would mean to integrate LLMs in the Quarkus ecosystem. The talk https://www.youtube.com/watch?app=desktop&v=BD1MSLbs9KE[Java Meets AI] from Lize Raes at Devoxx 2023 has been a great source of inspiration."
msgstr "LLMは新しい概念ではありません。LLMは以前から存在していましたが、OpenAIがChatGPTのAPIを公開したとき、LLMはそれほど強力でもアクセスしやすくもありませんでした。それ以来、QuarkusチームはLLMをQuarkusのエコシステムに統合することの意味を考えてきました。Devoxx 2023でLize Raesが行った link:https://www.youtube.com/watch?app=desktop&v=BD1MSLbs9KE[Java Meets AIという] 講演は、大きなインスピレーションの源となりました。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Since, the Quarkus team, in collaboration with Dmytro Liubarskyi and the LangChain4j team, has been working on an extension to integrate LLMs in Quarkus applications. This extension is based on the https://github.com/langchain4j[LangChain4j library], which provides a common API to interact with LLMs. The LangChain4j project is a Java re-implementation of the famous https://www.langchain.com/[langchain] library."
msgstr "それ以来、Quarkusチームは、Dmytro LiubarskyiとLangChain4jチームと共同で、QuarkusアプリケーションにLLMを統合するエクステンションに取り組んできました。このエクステンションは link:https://github.com/langchain4j[LangChain4jライブラリに基づいて] おり、LLMと対話するための共通APIを提供しています。LangChain4jプロジェクトは、有名な link:https://www.langchain.com/[langchain] ライブラリをJavaで再実装したものです。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "In this blog post, we will see how to use the just released https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[quarkus-langchain4j] 0.1 extension to integrate LLMs in Quarkus applications. This extension is an exploration to understand how LLMs can be used in Quarkus applications."
msgstr "このブログ記事では、リリースされたばかりの link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[quarkus-langchain4j] 0.1エクステンションを使って、QuarkusアプリケーションにLLMを統合する方法を説明します。このエクステンションは、QuarkusアプリケーションでLLMをどのように使用できるかを理解するためのものです。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "We recorded a live Fireside chat on this extension. You can watch it here, the blog continues <<overview,below>>."
msgstr "このエクステンションに関するライブ・ファイヤーサイド・チャットを収録しました。その模様はこちらでご覧いただけます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
msgid "Overview"
msgstr "概要"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "First, let's have a look at the big picture. When integrating an LLM into a Quarkus application, you need to describe what you want the AI to do. Unlike traditional code, you are going to explain the behavior of the AI using natural language. Of course, there are a few techniques to tame the AI, but we will explore that later."
msgstr "まず、全体像を見てみましょう。QuarkusアプリケーションにLLMを統合する場合、AIに何をさせたいかを記述する必要があります。従来のコードとは異なり、自然言語を使ってAIの動作を説明することになります。もちろん、AIを手なずけるテクニックもいくつかありますが、それは後ほど説明します。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Strictly relying on the LLM's knowledge might not be enough. Thus, the Quarkus LangChain4j extension provides two mechanisms to extend AI knowledge:"
msgstr "LLMの知識に厳密に依存するだけでは十分ではないかもしれません。そのため、Quarkus LangChain4jエクステンションは、AIの知識を拡張する2つのメカニズムを提供します："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "_Tools_ - a tool lets the LLM execute actions in your application. For instance, you can use a tool to send an email, call a REST endpoint, or execute a database query. The LLM decides when to use the tool, the method parameters, and what to do with the result."
msgstr "_ツール_ - ツールは LLM にアプリケーションのアクションを実行させます。例えば、ツールを使ってメールを送信したり、REST エンドポイントを呼び出したり、データベースクエリを実行したりできます。LLM は、いつツールを使うか、メソッドのパラメータ、結果をどうするかを決定します。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "_Document stores_ - LLMs are not good at remembering things. In addition, their context has a size limit. Thus, the extension provides a way to store and retrieve information from document stores. Before calling the LLM, the extension can ask for relevant documents in a document store and attach them to the context. The LLM can then use this data to make a decision. For instance, you can load spreadsheet data, reports, or data from a database."
msgstr "_ドキュメント・ストア_ - LLMは物事を記憶するのが得意ではありません。さらに、そのコンテキストにはサイズ制限があります。そのため、エクステンションはドキュメントストアから情報を保存したり取得したりする方法を提供します。LLMを呼び出す前に、エクステンションはドキュメント・ストアにある関連ドキュメントを要求し、それらをコンテキストに添付することができます。そして、LLM はこのデータを使って判断を下すことができます。たとえば、スプレッドシートデータ、レポート、データベースからのデータをロードできます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The following diagram illustrates the interactions between the LLM, the tools, and the document stores:"
msgstr "次の図は、LLM、ツール、ドキュメント・ストアの相互作用を表しています："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Show me some code!"
msgstr "コードを見せてください！"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Alright, enough \"bla bla\", let's see some code! We are going to use Open AI GPT-3.5 (be careful that it's not the state-of-the-art model, but it's good enough for this demo), give it some product reviews, and ask the LLM to classify them between positive and negative reviews. The full code is available in the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/review-triage[quarkus-langchain4j repository]."
msgstr "さて、\"bla bla bla \"はこのくらいにして、コードを見てみましょう！Open AI GPT-3.5（最先端のモデルではないことに注意してください。全コードは link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/review-triage[Quarkus-langchain4jリポジトリ] にあります。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "First, we need the `quarkus-langchain4j-openai` extension:"
msgstr "まず、 `quarkus-langchain4j-openai` のエクステンションが必要です："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Once we have the extension, it's time to tell the LLM what we want to do. The Quarkus LangChain4J extension provides a declarative way to describe LLM interactions. The idea is the same as the Quarkus REST client. We model the interaction using an interface annotated with `@RegisterAiService`:"
msgstr "エクステンションを手に入れたら、今度はLLMに何をしたいかを伝えます。QuarkusのLangChain4Jエクステンションは、LLMとのやり取りを宣言的に記述する方法を提供します。考え方はQuarkus RESTクライアントと同じです。 `@RegisterAiService` でアノテーションされたインターフェイスを使って、インタラクションをモデル化します："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The rest of the application would be able to use the LLM by injecting the `TriageService` interface and calling the methods."
msgstr "残りのアプリケーションは、 `TriageService` インターフェースを注入してメソッドを呼び出すことで、LLM を使用できるようになります。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Speaking about methods, that's where the magic happens. You will describe what you want the LLM to do using natural language. First, you start with `@SystemMessage` to define the role and scope. Then, you can use `@UserMessage` to describe the task."
msgstr "メソッドについて言えば、そこでマジックが起こります。LLMに何をさせたいかを自然言語を使って記述します。まず、 `@SystemMessage` で役割と範囲を定義します。次に、 `@UserMessage` を使ってタスクを記述します。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Voilà! That's all you need to do to describe the interaction with the LLM. The instructions follow a set of principles to shape the LLM response. Learn more about these techniques in https://docs.quarkiverse.io/quarkus-langchain4j/dev/prompt-engineering.html[the dedicated prompt engineering page]."
msgstr "Voilà！LLMとのやりとりを説明するのに必要なのはこれだけです。命令はLLMの応答を形成するための一連の原則に従っています。これらのテクニックについては link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/prompt-engineering.html[プロンプトエンジニアリングのページ] をご覧ください。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Now, to call the LLM from the application code, just inject the `TriageService` and call the `triage` method:"
msgstr "さて、アプリケーション・コードからLLMを呼び出すには、 `TriageService` をインジェクトし、 `triage` メソッドを呼び出すだけです："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "That's it! The LLM is now integrated into the application. The `TriageService` interface is used as an ambassador to call the LLM. This declarative approach has many advantages:"
msgstr "以上です！これでLLMはアプリケーションに統合されました。 `TriageService` インターフェイスは、LLM を呼び出すためのアンバサダーとして使われます。この宣言的アプローチには多くの利点があります："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Testability - you can easily mock the LLM by providing a fake implementation of the interface."
msgstr "テスト容易性 - インターフェイスの偽の実装を提供することで、簡単にLLMをモックすることができます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Observability - you can use the Quarkus metrics annotation to monitor the LLM methods."
msgstr "観測可能性 - Quarkusのメトリクス・アノテーションを使用して、LLMメソッドを監視できます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Resilience - you can use the Quarkus fault-tolerance annotations to handle failures, timeouts, and other transient issues."
msgstr "回復力 - Quarkusのフォールトトレランスアノテーションを使用して、障害、タイムアウト、その他の一時的な問題を処理できます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Tools and Document loader"
msgstr "ツールとドキュメントローダー"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The previous example is a bit simplistic. In the real world, you will need to extend the LLM knowledge with tools and document stores. The `@RegisterAiService` annotation lets you define the tools and document stores to use."
msgstr "先ほどの例は少し単純化したものです。現実の世界では、LLMの知識をツールやドキュメント・ストアで拡張する必要があります。 `@RegisterAiService` アノテーションでは、使用するツールとドキュメント・ストアを定義できます。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Tools"
msgstr "ツール"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Tools are methods that the LLM can invoke."
msgstr "ツールは、LLMが呼び出すことができるメソッドです。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "To declare a tool, just use the `@Tool` annotation on a _bean_ method:"
msgstr "ツールを宣言するには、 _Bean_ メソッドで `@Tool` アノテーションを使用するだけです："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "In this example, we are using the Panache repository pattern to access the database. We have a specific method annotated with `@Tool` to retrieve the customer name. When the LLM needs to get the customer name, it instructs Quarkus to call this method and receives the result."
msgstr "この例では、Panache リポジトリパターンを使ってデータベースにアクセスしています。顧客名を取得するために、 `@Tool` でアノテーションされた特定のメソッドを用意しています。LLMが顧客名を取得する必要がある場合、Quarkusにこのメソッドを呼び出すように指示し、結果を受け取ります。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Obviously, it's not a good idea to expose every operation to the LLM. So, in addition to `@Tool`, you need to list the set of tools you allow the LLM to invoke in the `@RegisterAiService` annotation:"
msgstr "もちろん、すべての操作をLLMに公開するのは良いアイデアではありません。そこで、 `@Tool` に加えて、 `@RegisterAiService` のアノテーションで、LLMが呼び出すことを許可するツールのセットを列挙する必要があります："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The `chatMemoryProviderSupplier` configuration may raise questions. When using tools, a sequence of messages unfolds behind the scenes. It becomes necessary to configure the AI service's memory to adeptly track these interactions. The `chatMemoryProviderSupplier` allows configuring how the memory is handled. The value `BeanChatMemoryProviderSupplier.class` instructs Quarkus to look for a `ChatMemoryProvider` bean, like the following:"
msgstr "`chatMemoryProviderSupplier` の設定に疑問が生じるかもしれません。ツールを使用すると、一連のメッセージが舞台裏で展開されます。これらのやり取りをうまく追跡するために、AIサービスのメモリを設定する必要が出てきます。 `chatMemoryProviderSupplier` 、メモリの処理方法を設定できます。値 `BeanChatMemoryProviderSupplier.class` は、Quarkusに次のような `ChatMemoryProvider` Beanを探すように指示します："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "At the moment, only the OpenAI models support tools."
msgstr "現時点では、OpenAIのモデルだけがツールをサポートしています。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Document stores"
msgstr "ドキュメントストア"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Document stores are a way to extend the LLM knowledge with your own data. This approach - called Retrieval Augmented Generation (_RAG_) - requires two processes:"
msgstr "ドキュメントストアは、LLMの知識を独自のデータで拡張する方法です。検索オーグメンテーション _（RAG_ ）と呼ばれるこのアプローチには、2つのプロセスが必要です："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The ingestion process"
msgstr "摂取プロセス"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "you ingest documents into a document store. The documents are not stored as-is, but an embedding is computed. This embedding is a vector representation of the document."
msgstr "文書を文書ストアにインジェストします。文書はそのまま保存されるのではなく、埋め込みが計算されます。この埋め込みは、文書のベクトル表現です。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The RAG process"
msgstr "RAGプロセス"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "in the Quarkus application, you need to declare the document store and the embedding to use. Thus, before calling the LLM, it retrieves the relevant documents from the store (that's where the vector representation is useful) and attaches them to the LLM context (which essentially means adding the retrieved information from the document to the user message)."
msgstr "Quarkusアプリケーションでは、使用するドキュメントストアとエンベッディングを宣言する必要があります。したがって、LLMを呼び出す前に、ストアから関連ドキュメントを取得し（そこでベクトル表現が役立ちます）、LLMコンテキストにアタッチします（これは本質的に、ドキュメントから取得した情報をユーザーメッセージに追加することを意味します）。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The Quarkus LangChain4j extension provides facilities for both processes."
msgstr "QuarkusのLangChain4jエクステンションは、両方のプロセスに対応する機能を提供します。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "The following code shows how to ingest a document into a Redis document store:"
msgstr "次のコードは、ドキュメントをRedisドキュメントストアに取り込む方法を示しています："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Then, generally, in another application, you can use the populated document store to extend the LLM knowledge. First, create a bean implementing the `Retriever<TextSegment>` interface:"
msgstr "そして、一般的に、別のアプリケーションで、LLMの知識を拡張するために、入力されたドキュメントストアを使用することができます。まず、 `Retriever<TextSegment>` インタフェースを実装した Bean を作成します："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Then, add the document store and the retriever to the `@RegisterAiService` annotation:"
msgstr "次に、 `@RegisterAiService` アノテーションにドキュメント・ストアとリトリーバーを追加します："

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "`RegisterAiService.BeanRetrieverSupplier.class` is a special value looking for the `Retriever` bean in the Quarkus application."
msgstr "`RegisterAiService.BeanRetrieverSupplier.class` は、Quarkusアプリケーションで Beanを探す特別な値です。 `Retriever` "

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "Final notes"
msgstr "最終ノート"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "This post presented the Quarkus LangChain4j extension. This is the first version of the extension, and we continue exploring and experimenting with approaches to integrate LLMs into Quarkus applications. We are looking for feedback and ideas to improve these integrations. We are working on removing some rough angles, and exploring other ways to integrate LLMs and to bring developer joy when integrating with LLMs."
msgstr "この投稿では、Quarkus LangChain4jエクステンションを紹介しました。これはエクステンションの最初のバージョンであり、QuarkusアプリケーションにLLMを統合するアプローチの探求と実験を続けています。これらの統合を改善するためのフィードバックやアイデアを求めています。私たちは、LLMを統合し、LLMと統合する際に開発者に喜びをもたらす他の方法を模索しています。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "This extension would not have been possible without the fantastic work from Dmytro Liubarskyi on the LangChain4j library. Our collaboration has allowed us to provide a Quarkus-friendly approach to integrate the library (including native compilation support) and shape a new way to integrate LLMs in Quarkus applications. The current design was tailored to enable Quarkus applications to use LLM easily. You can basically hook up any of your _beans_ as tools or ingest data into a store. In addition, any of your bean can now interact with an LLM."
msgstr "このエクステンションは、LangChain4jライブラリに関するDmytro Liubarskyiの素晴らしい仕事なしには実現しなかったでしょう。私たちのコラボレーションのおかげで、Quarkusフレンドリーなアプローチでライブラリを統合し（ネイティブコンパイルのサポートを含む）、QuarkusアプリケーションにLLMを統合する新しい方法を形作ることができました。現在の設計は、QuarkusアプリケーションでLLMを簡単に使用できるように調整されています。基本的に、 _Beanを_ ツールとしてフックしたり、データをストアに取り込んだりすることができます。さらに、どのBeanでもLLMとやり取りできるようになりました。"

#: _posts/2023-11-16-quarkus-meets-langchain4j.adoc
#, fuzzy
msgid "We are looking forward to continuing this collaboration and to see what you will build with this extension."
msgstr "私たちはこのコラボレーションを継続し、皆さんがこのエクステンションを使ってどのようなものを作り上げるかを楽しみにしています。"

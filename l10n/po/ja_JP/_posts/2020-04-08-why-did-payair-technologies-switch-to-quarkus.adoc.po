msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title =
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Why did Payair Technologies switch to Quarkus?"
msgstr "Payair TechnologiesがQuarkusに乗り換えた理由は何ですか？"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "image:payair_logo_rgb.png[Payair Logo]"
msgstr "image:payair_logo_rgb.png[alt=\"Payair Logo\"]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Developing cloud-ready solutions has become an industry standard, especially in the enterprise world. Sooner or later your application has to face the problem of poor horizontal scalability or high memory usage and we all know it is better to be prepared."
msgstr "クラウド対応のソリューションを開発することは、特に企業の世界では業界標準となっています。遅かれ早かれ、アプリケーションは水平方向のスケーラビリティの低下やメモリ使用量の増加といった問題に直面することになりますが、備えておくに越したことはありません。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "We understand this at https://www.payair.com[Payair] as well. When we faced the challenge of preparing the backend to our mobile payment app, we decided to use frameworks supporting a serverless approach as much as possible. One of these was Quarkus."
msgstr "link:https://www.payair.com[Payair] でも、このことを理解しています。モバイル決済アプリのバックエンドを準備するという課題に直面したとき、サーバーレスアプローチをサポートするフレームワークを可能な限り使用することにしました。その1つがQuarkusでした。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, no-wrap
msgid "Supersonic Subatomic Java"
msgstr "Supersonic Subatomic Java"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "As creators of the framework are describing it, Quarkus is:"
msgstr "フレームワークのクリエイターが語るように、Quarkusとは"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "A Kubernetes native Java stack tailored for OpenJDK HotSpot and GraalVM, crafted from the best of breed Java libraries and standards."
msgstr "OpenJDK HotSpotとGraalVMのために作られたKubernetesネイティブJavaスタックで、最高のJavaライブラリと標準から作られています。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On the Quarkus website you can find information that it has been designed around \"container first\" philosophy, meaning that it is optimized for fast boot times and low memory usage. As a result, we should gain near instant scale-up and high-density memory utilization in container orchestration platforms."
msgstr "Quarkusのウェブサイトには、「コンテナファースト」の哲学に基づいて設計されており、高速な起動時間と低いメモリ使用量に最適化されているとの情報が掲載されています。その結果、コンテナ・オーケストレーション・プラットフォームにおいて、ほぼ瞬時にスケールアップし、高密度のメモリ利用を実現することができるはずです。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "The way this has been achieved can be summarized as follows:"
msgstr "その実現方法をまとめると、次のようになります："

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Build time metadata processing.* As much processing as possible is moved into the build process e.g. all of the classes required to perform initial application deployment are used and dropped while building. They are not loaded into final JARs (and JVMs) or native executables. You can say that the framework is tailor-made for you every time you press a build button, without compromising the effectiveness of a declarative approach."
msgstr "*ビルド時のメタデータ処理。* 例えば、初期アプリケーションのデプロイを実行するために必要なすべてのクラスは、ビルド中に使用され、削除されます。これらは最終的なJAR（およびJVM）やネイティブ実行可能ファイルにロードされません。宣言的なアプローチの有効性を損なうことなく、ビルドボタンを押すたびにフレームワークがあなたのためにオーダーメイドされると言えます。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Reduction in reflection usage.* Considering the point above, the resulting application contains only direct invocations. All of the fields, methods and classes that are not being called directly are purposefully removed. The same applies to dependencies as well. There is a way to include such calls (register them for reflection), but Quarkus will gently warn you that you may be deflecting from the real purpose of the framework."
msgstr "*リフレクションの使用量の削減。* 上記の点を考慮すると、結果として得られるアプリケーションには直接呼び出されるものだけが含まれます。直接呼び出されないフィールド、メソッド、クラスはすべて意図的に取り除かれます。同じことが依存関係にも当てはまります。このような呼び出しを含める（リフレクションのために登録する）方法もありますが、Quarkusはフレームワークの本当の目的からそれる可能性があることをやさしく警告してくれます。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*Native image pre-boot.* Quarkus supports native executables that can be run with GraalVM. Actually, the creators of Quarkus state that the framework was designed to be run as a native image. The ahead-of-time compilation reduces the need of dynamic scanning and loading classes into a JVM."
msgstr "*ネイティブイメージのプリブート。* Quarkusは、GraalVMで実行可能なネイティブ実行可能ファイルをサポートしています。実際、Quarkusの作成者は、フレームワークはネイティブイメージとして実行されるように設計されていると述べています。時間前にコンパイルすることで、ダイナミックスキャンとJVMへのクラスロードの必要性が減ります。"

#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "*GraalVM.* GraalVM is a native code generator which will compile your project into an executable that can be run without the JVM. You can read more about this superb project here: https://www.graalvm.org."
msgstr "*GraalVM。* GraalVMは、あなたのプロジェクトをJVMなしで実行できる実行ファイルにコンパイルするネイティブコードジェネレータです。この素晴らしいプロジェクトについては、 https://www.graalvm.org 。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Below you can see a comparison of memory usage and boot time of sample applications:"
msgstr "以下、サンプルアプリケーションのメモリ使用量と起動時間の比較をご覧ください："

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "source: https://quarkus.io"
msgstr "source: https: link:https://quarkus.io[//quarkus.io]"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Evolution, not revolution"
msgstr "革命ではなく、進化"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "What is interesting about this framework is that it is not revolutionary. Since some of Payair’s developers had mainly Spring experience, we were concerned that it would be difficult for them to “switch sides”. It turned out that our fear of the unknown was completely unfounded. Quarkus leverages some good old Jakarta EE standards that all Java developers are familiar with. We did not have to learn a bunch of new APIs that are advertised as \"the best way to create REST endpoint\" or \"reinvented database access\". Instead, Quarkus uses Context Dependency Injection for beans, JAX-RS for RESTful web services, JPA for database access and many others."
msgstr "このフレームワークの面白いところは、革命的でないところです。Payairの開発者の中には、主にSpringの経験を持っている人もいたので、彼らが「転向」するのは難しいのではないかと懸念していました。しかし、未知のものに対する私たちの不安は、まったくの杞憂であったことが判明しました。Quarkusは、Java開発者なら誰もが知っている、古き良きJakarta EE標準を活用しています。RESTエンドポイントを作成する最良の方法」や「データベースアクセスの再発明」などと宣伝されている新しいAPIの数々を学ぶ必要はありませんでした。その代わり、Quarkusでは、beanにContext Dependency Injection、RESTful WebサービスにJAX-RS、データベースアクセスにJPA、その他多くのものを使用しています。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On top of that, Quarkus extends available Jakarta EE functionalities responding to modern world developers' demands. These are called Quarkus extensions and, to name a few, they contain support for reactive programming (but using the declarative approach), event messaging, etc."
msgstr "さらに、Quarkusは、現代の開発者の要求に応えて、利用可能なJakarta EE機能を拡張しています。これらはQuarkusエクステンションと呼ばれ、リアクティブプログラミング（ただし宣言的アプローチを使用）、イベントメッセージングなどのサポートが含まれます。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Apart from a wide variety of available extensions, there is also a way to create your own, based on the library of your choice. Keep in mind though, that if you want to preserve those drastic optimizations that Quarkus offers, you will have to apply them manually to your extension as well."
msgstr "利用可能なさまざまなエクステンションとは別に、選択したライブラリに基づいて独自のエクステンションを作成する方法もあります。ただし、Quarkusが提供する大幅な最適化を維持したい場合は、エクステンションに手動で適用する必要があることに留意してください。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Shout-out to MicroProfile"
msgstr "MicroProfileにエールを送ります。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "I would like to stop here for a second and give a big shout-out to the Eclipse MicroProfile initiative. It specifies a collection of APIs and technologies to form a baseline for quick and effective enterprise Java microservices creation. The goal of MicroProfile is to define a specification for building microservices and deliver portable applications across multiple runtime implementations."
msgstr "ここでちょっと立ち止まって、Eclipse MicroProfileの取り組みに大きな賛辞を送りたいと思います。これは、迅速かつ効果的にエンタープライズJavaのマイクロサービスを作成するためのベースラインを形成するAPIと技術のコレクションを規定しています。MicroProfileの目標は、マイクロサービスを構築するための仕様を定義し、複数のランタイム実装にわたってポータブルなアプリケーションを提供することです。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Optimizing enterprise Java for a microservice architecture is a challenging task and, in my opinion, MicroProfile handles it pretty well. As a long term Spring developer I realized that Spring is slowly becoming the very thing it swore to destroy. The initial premises of Spring (which basically can be summed up as a lightweight alternative to Jakarta EE) are way past the expiry date now. Spring is the undisputed heavyweight champion that can handle everything you imagine but is not your best option for fast and light services. And that applies to Spring Boot as well."
msgstr "エンタープライズJavaをマイクロサービスアーキテクチャに最適化するのは難しいタスクですが、私の意見では、MicroProfileはかなりうまく処理します。長年のSpring開発者として、私はSpringが徐々に破壊すると誓ったものそのものになりつつあることに気づきました。Springの最初の前提（基本的にはJakarta EEの軽量な代替品として要約される）は、今や賞味期限をはるかに過ぎているのです。Springは誰もが認めるヘビー級チャンピオンであり、あなたが想像するあらゆるものを扱うことができますが、高速で軽いサービスのための最良の選択肢ではありません。そしてそれは、Spring Bootにも当てはまります。"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Developer joy"
msgstr "デベロッパージョイ"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "It is worth mentioning how the development process of Quarkus application looks. First of all, you are not forced to use native images from day one. Normal JVM builds are still available. Resulting JARs are not as fast as native images, but still faster than your normal enterprise applications."
msgstr "Quarkusアプリケーションの開発プロセスがどのように見えるかについて言及する価値がある。まず、初日からネイティブイメージを使うことを強制されることはありません。通常のJVMビルドも引き続き利用可能です。出来上がったJARは、ネイティブイメージほど高速ではありませんが、それでも通常のエンタープライズアプリケーションよりは高速です。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "This leads us to the most important thing: dev mode. The special Maven plugin allows you to quickly reload classes while you are editing them, leaving an impression of hot deployment. Changing the functionality and testing it right away without further ado is a real joy. No more distracting builds and endless context switching. Pure development mode, hence the name of the plugin."
msgstr "これは、最も重要なことであるdev modeにつながります。特別なMavenプラグインを使えば、編集中にクラスを素早く再読み込みでき、ホットデプロイの印象を残すことができます。機能を変更して、そのまますぐにテストできるのは、本当に嬉しいことです。ビルドやコンテキストの切り替えに気を取られることはもうありません。純粋な開発モード、それがこのプラグインの名前の由来です。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "There is one more benefit of a quick startup time. Writing RESTful applications requires significant amount of integration tests on the API level. With Quarkus on board, running them gives a unit-test-smoothness feeling and if you are even a slight fan of TDD, you will appreciate the difference."
msgstr "起動時間が短いことのメリットはもう一つある。RESTfulなアプリケーションを書くには、APIレベルでかなりの量の統合テストが必要です。Quarkusを搭載し、それらを実行すると、ユニットテストのようなスムーズな感覚になり、TDDが少しでも好きな人なら、その違いを理解できるはずです。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "One of my personal concerns when switching from Spring to something based on Jakarta EE was lack of Spring Data JPA. I really like the mix of simplicity and functionality this module provides. But it turned out that Quarkus has my back on this one as well. There is an extension called Hibernate ORM with Panache. It is a layer on top of Hibernate ORM which focuses on simplifying ORM to the maximum without compromising the actual power that ORM gives. Panache has managed to find a sweet spot of making it trivial to work with simple entities without giving up possibilities for handling complicated use case scenarios. Bravo to Panache and adios to Spring Data!"
msgstr "SpringからJakarta EEをベースにしたものに乗り換える際に個人的に懸念していたことの1つが、Spring Data JPAがないことでした。私はこのモジュールが提供するシンプルさと機能性の組み合わせがとても気に入っています。しかし、Quarkusはこの点でも私の背中を押してくれることがわかりました。Hibernate ORM with Panacheというエクステンションがあるのです。これはHibernate ORMの上のレイヤーで、ORMが与える実際の力を損なうことなく、ORMを最大限に単純化することに焦点を当てています。Panacheは、複雑なユースケースシナリオを扱う可能性を放棄することなく、単純なエンティティを扱うことを容易にするというスイートスポットを見つけることに成功しました。Panacheにブラボー、そしてSpring Dataにアディオス！"

#. type: Title ==
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy, no-wrap
msgid "Simplified maintenance?"
msgstr "メンテナンスの簡略化？"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "We are yet to implement the first release of Payair’s Quarkus application into our production environment. Based on our experiences from lower level environments, we just cannot wait for it! CI/CD is no more complex than with any other framework. We only needed vigilance while setting up native build scripts. The differences between JVM and GraalVM runtimes are negligible. Moreover, our initial performance tests are looking very promising."
msgstr "ペイエアのQuarkusアプリケーションの最初のリリースを本番環境に導入するのはまだ先です。低レベルの環境での経験に基づくと、それを待つことはできないのです！CI/CDは、他のフレームワークと比較して複雑ではありません。必要なのは、ネイティブビルドスクリプトをセットアップする際の警戒だけです。JVMとGraalVMのランタイムの差はごくわずかです。さらに、私たちの最初のパフォーマンステストは非常に有望視されています。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "On the other hand Payair has many demanding customers who happen to be financial institutions. Throughout the years we have learned that they expect global reach, high performance and high availability from our products. Our solutions must be thoroughly tested, reliable and bulletproof. We are in an industry that is very risk averse and although we are aware that others are already using Quarkus in production (https://quarkus.io/blog/tag/user-story), we need to verify this for ourselves since the framework is still considered a new player on the market."
msgstr "一方、ペイエアには、金融機関など要求の厳しいお客様も多くいらっしゃいます。長年にわたり、私たちは、お客様が私たちの製品にグローバルリーチ、高性能、高可用性を期待していることを学びました。私たちのソリューションは、徹底的にテストされ、信頼性が高く、防弾でなければなりません。私たちはリスクを非常に嫌う業界におり、他の企業がすでにQuarkusを生産現場で使用していることは知っていますが（ https://quarkus.io/blog/tag/user-story ）、このフレームワークはまだ市場で新しいプレーヤーとみなされているため、私たち自身で確認する必要があります。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "The next step is to push our Quarkus implementation to the limits to see how it behaves under a real and heavy load. For now we believe that everything will work even better than we could have anticipated. We will let you know how it went."
msgstr "次のステップは、Quarkusの実装を限界まで追い込んで、実際の高負荷時にどのような挙動を示すかを確認することです。今のところ、私たちは、すべてが予想以上にうまくいくと信じています。その様子は、またお知らせします。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "For more information about Payair Technologies please visit our website: https://www.payair.com"
msgstr "ペイエア・テクノロジーズの詳細については、当社ウェブサイト link:https://www.payair.com[（https://www.payair.com] ）をご覧ください。"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "Quarkusの詳細については、こちらをご覧ください："

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "link:http://quarkus.io[Quarkus] のサイト link:http://quarkus.io[：http://quarkus.io]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "link:https://github.com/quarkusio/quarkus[Quarkus] GitHubプロジェクト: https: link:https://github.com/quarkusio/quarkus[//github.com/quarkusio/quarkus]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "link:https://twitter.com/QuarkusIO[Quarkus] Twitter: https: link:https://twitter.com/QuarkusIO[//twitter.com/QuarkusIO]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "link:https://quarkusio.zulipchat.com/[Quarkus] チャット： https://quarkusio.zulipchat.com/"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https: link:https://groups.google.com/forum/#!forum/quarkus-dev[//groups.google.com/forum/#!forum/quarkus-dev]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[Quarkus YouTubeチャンネル]"

#. type: Plain text
#: _posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quarkusを使用する4つの理由]"

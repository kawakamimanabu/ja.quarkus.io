msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Movie similarity search using vector databases"
msgstr "ベクトルデータベースを用いた映画の類似性検索"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Shows how to create a movie similarity search system using a vector database and Quarkus LangChain4j"
msgstr "ベクトルデータベースとQuarkus LangChain4jを使用して、映画の類似点検索システムを作成する方法を示します。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"With LLMs becoming increasingly popular we often see them being used even for tasks that are not directly related to text generation.\n"
"Such case is using LLMs for recommendation systems. In this post we'll see how you can build such a system using https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j]\n"
"but without using LLMs. More specifically we'll create a simple movie similarity search system using a vector database. The role\n"
"of https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] in this story is to abstract the underlying vector database through the `EmbeddingStore` interface."
msgstr "LLMの人気が高まるにつれ、テキスト生成とは直接関係のないタスクにもLLMが使われるようになりました。そのようなケースは、推薦システムにLLMを使うことです。この投稿では、 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4jを使って] 、LLMを使わずにそのようなシステムを構築する方法を見ていきます。具体的には、ベクトルデータベースを使った簡単な映画の類似検索システムを作ります。このストーリーにおける link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4jの] 役割は、 `EmbeddingStore` インタフェースを通して、基礎となるベクトルデータベースを抽象化することです。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "A relevant sample has been recently added to the https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[Quarkus LangChain4j samples]."
msgstr "最近、 link:https://github.com/quarkiverse/quarkus-langchain4j/tree/main/samples/[Quarkus LangChain4jのサンプルに] 関連するサンプルが追加されました。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Embeddings"
msgstr "埋め込み"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"An embedding is a way to represent unstructured data (text, images etc.) in a structured way. This is done by mapping the data into a vector.\n"
"As we are able to perform mathematical operations on vectors, such as calculating the distance between them, we can use embeddings to calculate\n"
"how close (or similar) two pieces of data are. In our case, comparing the embeddings of the movie overview can give us a measure of how similar\n"
"the two movies are. This is the premise of this post."
msgstr "埋め込みとは、構造化されていないデータ（テキスト、画像など）を構造化された方法で表現する方法です。これは、データをベクトルにマッピングすることによって行われます。私たちは、ベクトル間の距離の計算など、ベクトルに対して数学的な操作を行うことができるので、2つのデータがどれだけ近いか（または似ているか）を計算するためにエンベッディングを使用することができます。私たちの場合、映画の概要の埋め込みを比較することで、2つの映画がどれだけ似ているかの尺度を得ることができます。これがこの記事の前提です。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "How are embeddings created?"
msgstr "エンベッディングはどのように作成されるのですか？"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "There are multiple ways to create embeddings. https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] provides the following:"
msgstr "埋め込みを作成する方法は複数あります。 link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[QuarkusのLangChain4jには] 、以下のものがあります："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[In-process embedding]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[インプロセス・エンベッディング]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[Model provider]"
msgstr "link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/llms.html[モデルプロバイダー]"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"In this post we'll use the former. Did I mention that we won't be using LLMs?\n"
"Instead, we'll be using https://github.com/pgvector/pgvector[pgvector] which is a PostgreSQL extension that provides vector operations and indexing."
msgstr "この記事では前者を使います。LLMを使用しないことは書きましたか?代わりに、ベクトル操作とインデックス作成を提供するPostgreSQL拡張である link:https://github.com/pgvector/pgvector[pgvectorを] 使用します。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Our project will need the following dependencies, for https://github.com/pgvector/pgvector[pgvector] and https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[in-process embedding]:"
msgstr "このプロジェクトでは、 link:https://github.com/pgvector/pgvector[pgvectorと] link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/in-process-embedding.html[プロセス内埋め込み] 用に、以下の依存関係が必要です："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To be able to use these dependencies without needing to specify versions, the BOM can be imported to the `dependencyManagement` of the project:"
msgstr "バージョンを指定しなくてもこれらの依存関係を使用できるように、BOMをプロジェクトの `dependencyManagement` ："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To properly use the in-process embedding model we need to configure it in the `application.properties` file.\n"
"We also need to configure the pgvector dimension and ensure it's aligned with the dimension of the embedding model.\n"
"In our case, it's 384 (the https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j] documentation provides the size used by each model)."
msgstr "インプロセス埋め込みモデルを適切に使用するためには、 `application.properties` ファイルで設定する必要があります。また、pgvectorの次元を設定し、それが埋め込みモデルの次元と一致していることを確認する必要があります。私たちの場合、それは384です（ link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4jの] ドキュメントには、各モデルで使用されるサイズが記載されています）。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, the `application.properties` file should look like this:"
msgstr "ですから、 `application.properties` ファイルは次のようになります："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"*Note*: We can use any other document store supported by https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4j], in fact that's one of the key benefits of using it, the abstraction\n"
"of embeddings stores."
msgstr "*注* ： link:https://docs.quarkiverse.io/quarkus-langchain4j/dev/index.html[Quarkus LangChain4jで] サポートされている他のドキュメントストアを使用することができます。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Storing the embedding"
msgstr "エンベッディングの保存"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To store the embedding we'll need an `EmbeddingStoreIngestor` The ingestor is created using the `EmbeddingModel` and the `EmbeddingStore`, both provided\n"
"as beans and can be easily injected. Alternatively, the user can specify a document splitter, for splitting large documents into smaller chunks, but we won't be needing that\n"
"in this post, as the movie overview are relatively small."
msgstr "埋め込みを保存するには、 `EmbeddingStoreIngestor` インジェスターは、 `EmbeddingModel` と `EmbeddingStore` を使って作成します。どちらもBeanとして提供されており、簡単にインジェクションできます。また、ユーザは、大きなドキュメントを小さな塊に分割するためのドキュメントスプリッタを指定することもできますが、今回は、ムービーの概要が比較的小さいので、その必要はありません。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"Before passing the unstructured text to the ingestor we need to wrap it in a `Document` object. The `Document` also contains a `Metadata` object which holds key-value pairs.\n"
"The `Metadata` is really handy as we can add there information needed for correlating the `Document` with other data. In our case we'll use the `Metadata` to store the id of the movie.\n"
"That id will help us correlate the movie overview with the actual movie."
msgstr "構造化されていないテキストをインジェスターに渡す前に、それを `Document` オブジェクトでラップする必要があります。 `Document` には、キーと値のペアを保持する `Metadata` オブジェクトも含まれています。 `Metadata` は、 `Document` を他のデータと関連付けるために必要な情報を追加できるので、本当に便利です。私たちの場合、 `Metadata` を使ってムービーのIDを保存します。このidは、映画の概要と実際の映画を関連付けるのに役立ちます。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The simplified code below shows, how the actual ingestor is created and how the embedding is stored."
msgstr "以下の簡略化したコードは、実際のインジェスターがどのように作成され、どのようにエンベッディングが保存されるかを示しています。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"So, how exactly do we use the movie id ? This depends really on how we store the rest of the movie data. In our case, we'll store the movie data in a PostgreSQL database.\n"
"This means that the movie id, corresponds to the id of the Movie in the database."
msgstr "では、ムービーIDを具体的にどのように使うのでしょうか？これは、残りのムービーデータをどのように保存するかによって決まります。私たちの場合、ムービーデータはPostgreSQLデータベースに保存します。つまり、ムービーidはデータベース内のムービーのidに対応します。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Querying the embedding"
msgstr "エンベッディングのクエリ"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To query the embedding we'll use the `EmbeddingStore` and the `EmbeddingModel` in order to execute `EmbeddingSearchRequest`.\n"
"The code is pretty straight forward. We use the movie overview to create a search request. The `EmbeddingSearchRequest` builder\n"
"also allows us to specify the maximum number of results and also the minimum similarity threshold. The later allows us to filter\n"
"out embeddings that are not similar enough to the query embedding. In other words, it tells the store that if there are not enough similar results\n"
"to avoid adding irrelevant results to the response."
msgstr "エンベッディングを問い合わせるために、 `EmbeddingSearchRequest` を実行するために、 `EmbeddingStore` と `EmbeddingModel` を使います。コードはとても簡単です。ムービーの概要を使って、検索リクエストを作成します。 `EmbeddingSearchRequest` builderでは、検索結果の最大数や、類似度のしきい値の最小値を指定することができます。後者は、クエリ埋め込みと十分に類似していない埋め込みをフィルタリングすることができます。言い換えれば、十分な類似結果がない場合、無関係な結果をレスポンスに追加しないよう、ストアに指示します。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Loading the movies"
msgstr "ムービーの読み込み"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To populate the movies in the database, we'll use a CSV file containing the top 1000 movies from IMDB.\n"
"The important columns for us are:"
msgstr "データベースに映画を入力するために、IMDBからトップ1000の映画を含むCSVファイルを使用します。重要なカラムは"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`title` the movie title"
msgstr "`title` 映画のタイトル"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`overview` the movie overview"
msgstr "`overview` 映画概要"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "`link` the link to the image poster"
msgstr "`link` イメージポスターへのリンク"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"To easily map CSV entries to `Movie` objects we'll use `Jackson`. Specifically, we will use the `@JsonProperty`\n"
"annotation to map the CSV columns to the `Movie` fields. Also, we'll use `@JsonIgnoreProperties(ignoreUnknown = true)`\n"
"to ignore unknown fields."
msgstr "CSV エントリを `Movie` オブジェクトに簡単にマッピングするために、 `Jackson` を使用します。具体的には、 `@JsonProperty` アノテーションを使用して、CSV 列を `Movie` フィールドにマッピングします。また、 `@JsonIgnoreProperties(ignoreUnknown = true)` を使用して、未知のフィールドを無視します。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, a simplified version of our Movie entity object looks like:"
msgstr "つまり、ムービー・エンティティ・オブジェクトの簡略版は次のようになります："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "So, now we are ready to load our movies from the CSV to our relational and vector databases."
msgstr "これで、ムービーをCSVからリレーショナルデータベースとベクターデータベースにロードする準備が整いました。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Key points:"
msgstr "キーポイント"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Observing the `StartupEvent` allows us to load the movies when the application starts"
msgstr "`StartupEvent` 、アプリケーションの起動時にムービーをロードすることができます。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "CSVMapper is used to map the CSV entries to `Movie` objects"
msgstr "CSVMapper は、CSV エントリーを `Movie` オブジェクトにマッピングするために使用されます。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We save each movie using a @Transaction method because we need that `id` that's often generated by the database"
msgstr "各ムービーは@Transactionメソッドを使って保存します。これは、データベースがしばしば生成する `id` 。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "We ingest the documents in a batch. This can make a huge difference especially, if we move from in-process to remote embedding models."
msgstr "ドキュメントをバッチでインジェストします。これは、特にインプロセスからリモートエンベッドモデルに移行する場合に、大きな違いをもたらします。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "To use the CSV mapper, we'll need to Jackson's CSV dataformat dependency:"
msgstr "CSVマッパーを使用するには、JacksonのCSVデータフォーマットの依存関係が必要です："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The path of the movies file is specified in the `application.properties` file."
msgstr "ムービーファイルのパスは `application.properties` 。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "Bringing it all together"
msgstr "すべてをひとつに"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The only thing that's left is to create a REST endpoint that allows us to search for similar movies. We could also use a simple UI.\n"
"Let's start with the REST endpoint. It's pretty straightforward. We need two methods, one for searching movies and one for searching similar movies.\n"
"For the former we just use the `Movie` entity, for the latter we inject and use the `MovieRecommendationService` we created earlier."
msgstr "あとは、似たような映画を検索できるRESTエンドポイントを作るだけです。シンプルなUIを使うこともできます。RESTエンドポイントから始めましょう。とても簡単です。2つのメソッドが必要で、1つは映画検索用、もう1つは類似映画検索用です。前者は `Movie` 、後者は先ほど作成した `MovieRecommendationService` 。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "For the UI, let's just use a simple HTML page that uses the REST endpoint to search for similar movies."
msgstr "UIには、RESTエンドポイントを使って類似の映画を検索するシンプルなHTMLページを使いましょう。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "The key elements of that page are:"
msgstr "そのページの重要な要素は"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-box: a text field for entering the movie title"
msgstr "movie-box: 映画のタイトルを入力するテキストフィールド。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "search-results: an unordered list for displaying the search results"
msgstr "search-results: 検索結果を表示するための順序なしリスト。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-overview: div for displaying the overview of the selected movie"
msgstr "movie-overview: 選択されたムービーの概要を表示する div"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "movie-poster: an image for displaying the movie poster"
msgstr "movie-poster: 映画ポスターを表示するための画像"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid "similar-results: an additional unordered list for displaying the similar movies"
msgstr "similar-results: 類似したムービーを表示するための追加の順序なしリスト。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"It's important to remember that the `Movie` entity is using Jackson to map the CSV columns to the entity fields.\n"
"This means that when a `Movie` is serialized to JSON, it will use the CSV column names as the field names and not\n"
"the entity field names. The HTML code below needs to take that into consideration."
msgstr "`Movie` エンティティは Jackson を使用して CSV 列をエンティティ・フィールドにマッピングしていることを覚えておくことが重要です。つまり、 `Movie` が JSON にシリアライズされるとき、CSV 列名がフィールド名として使用され、エンティティ・フィールド名は使用されません。以下のHTMLコードでは、この点を考慮する必要があります。"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"I won't go into much detail about the HTML code as it's outside the scope of this post.\n"
"The final results should look like this:"
msgstr "HTMLコードについては、この記事の範囲外なので、あまり詳しく説明しません。最終的にはこのようになります："

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-03-24-movie-similarity-search-using-vector-databases.adoc
#, fuzzy
msgid ""
"The quality of the recommendations depends on the accuracy of the movie overview and also on the quality of the embeddings.\n"
"This means that better embedding models can lead to better recommendations. The vector database used could possibly also\n"
"affect the quality of the recommendations, but that's a topic for another post."
msgstr "レコメンデーションの質は、映画の概要の精度に依存し、またエンベッディングの質にも依存します。これは、より良い埋め込みモデルが、より良い推薦につながることを意味します。使用されるベクターデータベースも、推薦の質に影響を与える可能性がありますが、それは別の投稿のためのトピックです。"

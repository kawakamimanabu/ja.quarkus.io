msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, no-wrap
msgid "Creating a Quarkus extension for AWS CloudWatch"
msgstr "AWS CloudWatch用のQuarkusエクステンションの作成"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "We recently had the situation that we wanted to log our Quarkus application logs to AWS CloudWatch. Basically it takes some time but is not a big deal. Adding a CloudWatch dependency, creating a Log Handler and push the logs to CloudWatch via the provided AWS CloudWatch API. But what if you want to share it with others? Of course you could put it on GitHub as part of your project so others can copy and paste it, but that’s not the most elegant way to share code with others."
msgstr "最近、QuarkusのアプリケーションログをAWS CloudWatchにロギングしたいという状況になりました。基本的には時間がかかりますが、大したことではありません。CloudWatchの依存関係を追加し、Log Handlerを作成し、提供されているAWS CloudWatch APIを介してCloudWatchにログをプッシュします。しかし、それを他の人と共有したい場合はどうでしょうか？もちろん、プロジェクトの一部としてGitHubに置いて、他の人がコピー＆ペーストできるようにすることもできますが、それはコードを他の人と共有する最もエレガントな方法ではありません。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"That’s why we implemented a Quarkus extension so others can use it more easily and don’t need to reinvent the wheel or need to copy paste things around.\n"
"How do I do that? Here the Quarkiverse Hub comes in. Quarkiverse is a GitHub organization where developers can host and share their extension with others. There are several benefits you get for free when hosting the extension in Quarkiverse instead of using the good old way of doing all the things on your own. By using Quarkiverse you don’t need to build the artifact, release it with the Sonatype Nexus Manager (or something similar) and distribute it on Maven Central and other repositories.\n"
"Quarkiverse comes with all these things so you can focus on implementing the extension itself. The following post describes what needs to be done to initialize, implement and share a CloudWatch Quarkus extension."
msgstr "そのため、私たちはQuarkusのエクステンションを実装しました。これにより、他のユーザーがより簡単にQuarkusを使用できるようになり、車輪の再発明やコピーペーストの必要がなくなりました。どうすればいいのでしょうか？ここで、Quarkiverse Hubの出番です。Quarkiverseは、開発者が自分のエクステンションをホストして他の人と共有できるGitHubの組織です。エクステンションをQuarkiverseでホスティングすることで、従来のように自分ですべての作業を行うのではなく、無料でいくつかのメリットを得ることができます。Quarkiverseを使用すると、アーティファクトをビルドし、Sonatype Nexus Manager（または類似のもの）でリリースし、Maven Centralや他のリポジトリで配布する必要がありません。Quarkiverseにはこれらがすべて付属しているので、エクステンションの実装自体に集中することができます。以下の投稿では、CloudWatch Quarkusエクステンションを初期化、実装、共有するために必要なことを説明します。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"If you want to use Quarkiverse to publish your extension on the Hub (which is what we recommend) and make use of all the advantages you get by using it, you simply need to open a new extension proposal issue in the quarkusio/quarkus GitHub organization. By doing this, most of the requirements are fulfilled already as there will be a template generated for you and you just have to implement your extension code. In case you are using an existing project as template, there are some requirements you need to take care of.\n"
"In order to automate extension releases and publication of docs, there are some rules that need to be followed for projects under the Quarkiverse organization:"
msgstr "Quarkiverseを使用してエクステンションをハブで公開し（これは私たちが推奨する方法です）、それによって得られるすべての利点を利用したい場合は、単にquarkusio/quarkusのGitHub組織で新しいエクステンション提案の課題をオープンする必要があります。こうすることで、テンプレートが生成され、あなたはエクステンションのコードを実装するだけなので、ほとんどの要件はすでに満たされていることになります。既存のプロジェクトをテンプレートとして使用する場合は、いくつかの要件に注意する必要があります。エクステンションのリリースやドキュメントの公開を自動化するために、Quarkiverseの組織下にあるプロジェクトには従わなければならないルールがあります。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The extension repository should be named quarkus-<project>"
msgstr "エクステンションのリポジトリ名はquarkus-<project>とします。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "A Quarkiverse extension *MUST* belong to the io.quarkiverse.<project> groupId"
msgstr "Quarkiverseのエクステンションは、io.quarkiverse.<project> groupIdに *属さなければなりません* 。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "The root pom.xml *MUST* inherit from io.quarkiverse:quarkiverse-parent"
msgstr "ルートの pom.xml は io.quarkiverse:quarkiverse-parent を継承 *しなければなりません* 。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, fuzzy
msgid "A Quarkiverse extension contains the following folders and files:"
msgstr "Quarkiverseのエクステンションには、以下のフォルダとファイルが含まれます："

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "deployment"
msgstr "deployment\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "runtime"
msgstr "runtime\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "integration-test"
msgstr "integration-test\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "docs"
msgstr "docs\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "pom.xml"
msgstr "pom.xml\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "LICENSE"
msgstr "LICENSE\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "README"
msgstr "README\n"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"This article covers the runtime and deployment content only as the other things are optional, generated by the project template already or even important, but not the most important and pragmatic thing when you want to learn how a Quarkus extension can be created.\n"
"Let’s start with the deployment section. It contains classes needed for the initialization of the Quarkus extension. Without this initialization class, your extension won’t be identified when starting your Quarkus application."
msgstr "この記事では、runtimeとdeploymentの中身のみを取り上げます。その他の中身は、オプションであったり、すでにプロジェクトテンプレートによって生成されていたり、あるいは重要であっても、Quarkusのエクステンションがどのように作成されるかを知りたい場合には、最も重要で実用的なものではありません。まず、導入セクションから始めましょう。ここには、Quarkusエクステンションの初期化に必要なクラスが含まれています。この初期化クラスがないと、Quarkusアプリケーションの起動時にエクステンションが識別されません。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"In the snippet above you can see a _feature()_ method which is annotated with _@BuildStep_ and returns a new FeatureBuildItem. It exposes the name of the feature (logging-cloudwatch) displayed in the log during application bootstrap.\n"
"The second method _addCloudWatchHandler()_ initializes the extensions runtime configurations provided by the LoggingCloudWatchConfig and LoggingCloudWatchHandlerValueFactory class. Luckily there is a LogHandlerBuildItem provided, so we can overwrite the existing log handler by adding our own implementation. There are lots of other BuildItems provided so it’s definitely worth it, taking a look at it if you want to create your own extension. The parameter of this method is a config class which will be described in the following snippet."
msgstr "上のスニペットでは、 _@BuildStep_でアノテーションされ、新しいFeatureBuildItemを返す _feature()_メソッドを見ることができます。このメソッドは、アプリケーションの起動時にログに表示される機能の名前（logging-cloudwatch）を公開します。2 番目のメソッド _addCloudWatchHandler()_は、LoggingCloudWatchConfig と LoggingCloudWatchHandlerValueFactory クラスによって提供されるエクステンションのランタイム構成を初期化します。幸い、LogHandlerBuildItemが提供されているので、独自の実装を追加して既存のログハンドラを上書きすることができます。他にもたくさんのBuildItemが提供されているので、独自のエクステンションを作りたい方はぜひ参考にしてみてください。このメソッドのパラメータは、以下のスニペットで説明されるコンフィグクラスです。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"The _LoggingCloudWatchConfig_ is building the bridge between the extension itself and the Quarkus application which uses the extension. It’s combining the _application.properties entries_ in the Quarkus application with our extension. That means with this class you can define the properties available in the _application.properties_ file and make the extension configurable from the outside.\n"
"The _@ConfigRoot_ defines the prefix of the property in the _application.properties_ and the _@ConfigItems_ is the postfix. One application.properties entry we are accepting with this class is log.cloudwatch.enabled for example."
msgstr "_LoggingCloudWatchConfig_は、エクステンション自体と、そのエクステンションを使用するQuarkusアプリケーションの間のブリッジを構築しています。このクラスは、Quarkusアプリケーションの _application.propertiesエントリ_をエクステンションと組み合わせています。つまり、このクラスでは、 _application.properties_ファイルで利用可能なプロパティを定義し、外部からエクステンションを設定できるようにしています。 _ConfigurationRoot_は _application.properties_内のプロパティのプレフィックスを、 _@ConfigItems_はポストフィックスを定義します。このクラスで受け付ける一つのapplication.propertiesエントリーは、例えばlog.cloudwatch.enabledです。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "Besides the _LoggingCloudWatchConfig_ there is another parameter of the _addCloudwatchLogHandler()_ method. It’s the corresponding factory class."
msgstr "_LoggingCloudWatchConfig_の他に、 _addCloudwatchLogHandler()_メソッドのパラメータがあります。それは対応するファクトリークラスです。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "The LoggingCloudWatchHandlerValueFactory is the glue between the actually business logic of the extension: dealing with application logs and putting these logs to AWS and the configurations of the _application.properties_ file mentioned before. As you can see in the _create()_ method, configuration entries are checked and used for initializing the CloudWatch connection."
msgstr "LoggingCloudWatchHandlerValueFactoryは、アプリケーションのログを扱い、これらのログをAWSに置くという、エクステンションの実際のビジネスロジックと、前述の _application.properties_ファイルの設定との間の接着剤となります。 _create()_メソッドの中で、設定項目がチェックされ、CloudWatch接続の初期化に使用されていることがわかります。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Now that we have made the extension configurable for the extension users by adding _application.properties_ entries, exposing the extension name and providing the configurations to the handler class which creates the AWS CloudWatch objects needed to put log messages in AWS CloudWatch, we only need to add one missing piece.\n"
"The Log Handler itself. In the snippet above, in the _LoggingCloudWatchHandlerValueFactory_ we created it already and returned it as a RuntimeValue which we are using in the _LoggingCloudwatchProcessor_ class. That’s the call chain needed to overwrite the existing default log handler."
msgstr "さて、 _application.properties_エントリーを追加し、エクステンション名を公開し、ログ・メッセージをAWS CloudWatchに置くために必要なAWS CloudWatchオブジェクトを作成するハンドラー・クラスに設定を提供することで、エクステンションのユーザーが設定できるようにしたので、あとは足りない部分を1つ追加するだけです。ログハンドラー自体です。上のスニペットでは、 _LoggingCloudWatchHandlerValueFactory_で、すでに作成し、 _LoggingCloudwatchProcessor_クラスで使用しているRuntimeValueとして返しています。これが、既存のデフォルトログハンドラを上書きするために必要なコールチェーンです。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"This log handler is a java.util.LogHandler which takes the LogRecord object as a parameter of the publish method which will be called when writing a log in an application. For example like log.info(“I Love Open Source!”);. If configured correctly, this log handler will be called when writing logs. As we want to put the log messages in AWS CloudWatch, we need to add the logic for doing it.\n"
"Therefore we create an InputLogEvent and call _putLogEvents()_ which puts the log message to CloudWatch. That’s basically it."
msgstr "このログハンドラは、java.util.LogHandlerであり、アプリケーションでログを書き込む際に呼び出されるpublishメソッドのパラメータとしてLogRecordオブジェクトを受け取ります。例えば、log.info(\"I Love Open Source!\"); のようになります。正しく設定されていれば、このログハンドラはログを書き込むときに呼び出されます。AWS CloudWatchにログメッセージを出力したいので、そのためのロジックを追加する必要があります。そこで、InputLogEventを作成し、ログメッセージをCloudWatchに置く _putLogEvents()_を呼び出しています。基本的にはこれで終わりです。"

#. type: delimited block =
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "The snippets in this article are a bit shortened, but basically that’s what the extension contains."
msgstr "この記事のスニペットは少し短くなっていますが、基本的にはこのエクステンションの内容です。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Let’s sum it up:\n"
"There is a processor class which initializes the extension, a configuration class which is needed to make the extension configurable, a value factory class which takes these configurations and creates a AWS CloudWatch connection  as well as a custom _LogHandler_ class which pushes each log message to CloudWatch."
msgstr "要約しましょう。エクステンションを初期化するProcessorクラス、エクステンションを設定可能にするために必要なConfigurationクラス、これらの設定を受けてAWS CloudWatch接続を作成するValue Factoryクラス、そして各ログメッセージをCloudWatchにプッシュするカスタム _LogHandler_クラスがあります。"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "After doing all these things, the only thing missing is releasing a version of the extension. This can be done by opening a Pull Request which updates the current-version and _next-version_ entry of the _project.yml_ file in the _.github_ folder. After merging this Pull Request, some GitHub Actions will be triggered which will bring your new version to Maven Central and finally others can use your extension as well :-)"
msgstr "これらの作業を終えて、唯一足りないのはエクステンションのバージョンをリリースすることです。これは、 _.github_フォルダ内の _project.yml_ファイルのcurrent-versionと _next-version_エントリを更新するPull Requestを開くことで行うことができます。このプルリクエストをマージすると、いくつかのGitHubアクションが実行され、新しいバージョンがMaven Centralに導入され、最終的に他の人もこのエクステンションを使用できるようになります :-)"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, no-wrap
msgid "Summary"
msgstr "まとめ"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"As you can see, creating, implementing and sharing Quarkus extensions with others is actually very easy. So if you have\n"
"an idea of an extension which could be useful for the community, feel free to pitch your idea by creating a new extension proposal issue on the quarkusio/quarkus GitHub Issues section :-)"
msgstr "このように、Quarkusのエクステンションを作成、実装、他の人と共有することは非常に簡単です。コミュニティにとって有用なエクステンションのアイデアがあれば、quarkusio/quarkus GitHub Issuesセクションに新しいエクステンション提案の課題を作成して、自由にアイデアを提案してください :-)"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "In case you have questions, suggestions or something else, please feel free to contact me on https://twitter.com/bennetelli[Twitter]."
msgstr "万が一、質問や提案などがありましたら、お気軽に link:https://twitter.com/bennetelli[Twitter]でご連絡ください。"

#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid ""
"Best regards,\n"
"Bennet"
msgstr "よろしくお願いいたします、ベネット"

#. type: Title ==
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
#, no-wrap
msgid "Links"
msgstr "リンク"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "https://quarkus.io/blog/quarkiverse/"
msgstr "https://quarkus.io/blog/quarkiverse/"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "https://github.com/quarkiverse"
msgstr "https://github.com/quarkiverse"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "https://github.com/quarkiverse/quarkus-logging-cloudwatch"
msgstr "https://github.com/quarkiverse/quarkus-logging-cloudwatch"

#. type: Plain text
#: _posts/2022-01-13-quarkus-aws-cloudwatch_extension.adoc
msgid "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"
msgstr "https://quarkus.io/guides/writing-extensions#create-new-extension-modules-using-maven"

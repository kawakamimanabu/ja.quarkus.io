msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Observability in Quarkus 3"
msgstr "クオークス3における観測可能性"

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "What has changed in Observability on Quarkus from version 3.0 to 3.3."
msgstr "QuarkusのObservabilityのバージョン3.0から3.3への変更点。"

#. type: Title ==
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, no-wrap
msgid "Observability in Quarkus"
msgstr "Quarkusにおけるオブザーバビリティ"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid ""
"Observability on a software system can be described as the capability to allow a human to ask and answer questions.\n"
"To enable developers and support engineers in understanding how their applications behave, Quarkus 3.3 includes many improvements to its main observability related extensions:"
msgstr "ソフトウェアシステムの可観測性とは、人間が質問をしたり、質問に答えたりできる機能のことです。開発者やサポートエンジニアがアプリケーションの動作を理解できるように、Quarkus 3.3では、観察可能性に関連する主なエクステンションに多くの改良が加えられています："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "https://quarkus.io/guides/opentelemetry[`quarkus-opentelemetry`] (tracing)"
msgstr "link:https://quarkus.io/guides/opentelemetry[quarkus-opentelemetry] (トレース)"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "https://quarkus.io/guides/telemetry-micrometer[`quarkus-micrometer`] (metrics)"
msgstr "link:https://quarkus.io/guides/telemetry-micrometer[quarkus-micrometer] (メトリックス）"

#. type: Title ==
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, no-wrap
msgid "OpenTelemetry"
msgstr "OpenTelemetry"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "https://opentelemetry.io/docs/concepts/signals/traces/[OpenTelemetry tracing] is used to understand the flow of requests as they traverse through multiple services."
msgstr "link:https://opentelemetry.io/docs/concepts/signals/traces/[OpenTelemetry のトレース] は、複数のサービスを通過するリクエストの流れを理解するために使われます。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "The `quarkus-opentelemetry` extension already had a major upgrade on https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.0#opentelemetry[Quarkus 3.0], where the configurations aligned with the ones used by the OpenTelemetry (OTel) community. This made available many configurations that were not previously available in Quarkus. Other improvements include:"
msgstr "`quarkus-opentelemetry` エクステンションは、 link:https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.0#opentelemetry[Quarkus 3.] 0でメジャーアップグレードを行い、OpenTelemetry (OTel)コミュニティで使用されているコンフィギュレーションに合わせました。これにより、これまでQuarkusでは利用できなかった多くの設定が利用できるようになりました。その他の改善点は以下の通りです："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "The OpenTelemetry extension can be used in dev mode and now reloads properly."
msgstr "OpenTelemetry 拡張が dev モードで使えるようになり、適切にリロードされるようになった。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "OTel Service Provider Interface (SPI) hooks for Sampler and SpanExporter were made available along with the existing user implementations with CDI for many OTel classes: `IdGenerator`, Resource attributes, `Sampler` and `SpanProcessor`."
msgstr "SamplerとSpanExporter用のOTel Service Provider Interface (SPI)フックは、多くのOTelクラス用のCDIで、既存のユーザー実装とともに利用できるようになった： `IdGenerator` リソース属性、 `Sampler` および `SpanProcessor` 。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "At the same time, the JDBC tracing activation was made simpler, just requiring the use of a property:"
msgstr "同時に、JDBCのトレース起動はよりシンプルになり、プロパティを使用するだけになりました："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "On https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3#opentelemetry-otel[Quarkus 3.3] many improvements were made to the `quarkus-opentelemetry` extension. The most impactful ones are"
msgstr "link:https://github.com/quarkusio/quarkus/wiki/Migration-Guide-3.3#opentelemetry-otel[Quarkus 3.3] では、 `quarkus-opentelemetry` 。最もインパクトのあるものは"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Removal of the OkHttp dependency"
msgstr "OkHttp依存性の削除"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "In previous versions of the Quarkus exporter used the upstream OTel libraries and leveraged the OkHttp library to send the spans to the OTel Collector. This unnecessary dependency was removed and replaced by Quarkus specific Vert.x GRPC and HTTP clients. As previously, the exporter continues to be automatically wired with CDI, that’s why the `quarkus.otel.traces.exporter` property defaults to `cdi` on Quarkus 3+."
msgstr "以前のバージョンのQuarkusエクスポーターでは、アップストリームのOTelライブラリを使用し、スパンをOTelコレクターに送信するためにOkHttpライブラリを利用していました。この不要な依存関係は削除され、Quarkus固有のVert.x GRPCおよびHTTPクライアントに置き換えられました。以前と同様に、エクスポーターはCDIと自動的に配線されます。そのため、Quarkus 3+では、 `quarkus.otel.traces.exporter` プロパティがデフォルトで `cdi` 。"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Exporter support fot the HTTP protocol"
msgstr "HTTPプロトコルのエクスポートサポート"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Up until Quarkus 3.2, the OTel exporter could only use the GRPC protocol, while Quarkus now supports HTTP as well. To use the new HTTP protocol, the `quarkus.otel.exporter.otlp.traces.protocol` property must be set to `http/protobuf`. The `quarkus.otel.traces.exporter.endpoint` property must also be set to the OTel Collector HTTP endpoint. Here's an example when using 4318, the default HTTP port on the OTel Collector:"
msgstr "Quarkus 3.2 までは、OTel エクスポーターは GRPC プロトコルのみを使用できましたが、Quarkus では HTTP もサポートされるようになりました。新しいHTTPプロトコルを使用するには、 `quarkus.otel.exporter.otlp.traces.protocol` プロパティを `http/protobuf` に設定する必要があります。また、 `quarkus.otel.traces.exporter.endpoint` プロパティもOTel Collector HTTPエンドポイントに設定する必要があります。以下は、OTel CollectorのデフォルトHTTPポートである4318を使用する場合の例です："

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Exporters support TLS"
msgstr "輸出業者がTLSをサポート"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Both GRPC and HTTP exporters now support Transport Layer Security (TLS) and custom certificates."
msgstr "GRPC と HTTP エクスポーターの両方が、トランスポート・レイヤー・セキュリティ (TLS) とカスタム証明書をサポートするようになりました。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Like the other rest clients in Quarkus, the exporter's certificate verification will also be disabled if you set:"
msgstr "Quarkusの他のレストクライアントと同様に、設定すると、エクスポーターの証明書検証も無効になります："

#. type: delimited block =
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr "この設定は、あらゆる種類のSSL検証を無効にするため、実運用環境では使用しないでください。"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Customise the propagation header"
msgstr "プロパゲーションヘッダーのカスタマイズ"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "We added a way to customise the propagation header."
msgstr "プロパゲーションヘッダーをカスタマイズする方法を追加しました。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "You can create a CDI bean implementing the `TextMapPropagatorCustomizer` interface."
msgstr "`TextMapPropagatorCustomizer` インタフェースを実装した CDI Bean を作成できます。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "This can be used to restrict propagation of OpenTelemetry trace headers and prevent potentially sensitive data to be sent to third party systems."
msgstr "これは、OpenTelemetry トレースヘッダの伝播を制限し、潜在的にセンシティブなデータがサードパーティのシステムに送信されるのを防ぐために使用できます。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "This is an example of a customizer that removes the Baggage header:"
msgstr "これは、Baggage ヘッダーを削除するカスタマイザーの例です："

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Identify the user in the spans"
msgstr "スパン内のユーザーを特定する"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Valuable debugging information about the user related to each span can be added by setting:"
msgstr "設定により、各スパンに関連するユーザーに関する貴重なデバッグ情報を追加できます："

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "The user’s ID and roles will be added to the span attributes, if available."
msgstr "ユーザのIDとロールがあれば、span属性に追加されます。"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Hardening"
msgstr "硬化"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Many bug fixes and small improvements were made to the extension, including:"
msgstr "エクステンションには、以下のような多くのバグ修正と小さな改良が加えられた："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Reduce the memory allocation needed to report spans."
msgstr "スパンを報告するために必要なメモリ割り当てを減らす。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Fix the `http.route` span attribute value in some cases."
msgstr "`http.route` span属性の値を修正。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Properly report of the `service.name` value. The value can be set in 3 different properties, from higher to lower priority:"
msgstr "`service.name` の値を適切に報告する。この値は、優先順位の高いものから低いものまで、3つの異なるプロパティで設定できます："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "`quarkus.otel.service.name`"
msgstr "`quarkus.otel.service.name`"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
msgid "`quarkus.otel.resource.attributes`"
msgstr "`quarkus.otel.resource.attributes`"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "`quarkus.application.name`"
msgstr "`quarkus.application.name`"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Exception's stack traces are now reported in the span attributes."
msgstr "例外のスタック・トレースがspan属性で報告されるようになった。"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "OpenTelemetry upgrades."
msgstr "OpenTelemetryのアップグレード。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "OTel moves fast! Since working on Quarkus 3.0 we have performed 7 version upgrades, moving `opentelemetry-java` from version 1.21.0 to 1.28.0."
msgstr "OTelの動きは速い！Quarkus 3.0に取り組んで以来、7回のバージョンアップを行い、 `opentelemetry-java` 、バージョン1.21.0から1.28.0に移行しました。"

#. type: Title ==
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, no-wrap
msgid "Micrometer"
msgstr "Micrometer"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Metrics in Quarkus are based on the https://micrometer.io/[Micrometer library]. Data can be exported directly to Prometheus with the `quarkus-micrometer-registry-prometheus extension`. If you want to send data to an OTel Collector, you can use the https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[`quarkus-micrometer-registry-otlp`] Quarkiverse extension, among https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/index.html[other options]."
msgstr "Quarkusのメトリクスは、 link:https://micrometer.io/[Micrometerライブラリに基づいて] います。データは、 `quarkus-micrometer-registry-prometheus extension` を使用してPrometheusに直接エクスポートできます。 OTelコレクターにデータを送信する場合は、オプションの中から link:https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[quarkus-micrometer-registry-otlp] Quarkiverse拡張 link:https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/index.html[機能など] を使用できます。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "These were some of the recent improvements to the `quarkus-micrometer` extension:"
msgstr "これらは、最近改良された `quarkus-micrometer` ："

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Netty allocator metrics"
msgstr "ネッティ・アロケータ・メトリクス"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "The extension will now provide Netty allocation metrics by default. Netty uses  memory allocators to pool the memory buffers for reuse. These metrics will give you a deeper understanding of the memory usage of your application. Direct and Heap memory usage will be reported."
msgstr "このエクステンションは、デフォルトで Netty のアロケーションメトリクスを提供します。Netty はメモリ・アロケータを使用してメモリ・バッファをプールし、再利用できるようにします。これらのメトリクスを使用することで、アプリケーションのメモリ使用量をより深く理解することができます。ダイレクト・メモリとヒープ・メモリの使用量がレポートされます。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "To disable these metrics, please set:"
msgstr "これらのメトリクスを無効にするには、次のように設定します："

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Custom tags with HTTP server data"
msgstr "HTTPサーバー・データを使ったカスタム・タグ"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Customise emitted tags by creating a CDI bean implementing the `HttpServerMetricsTagsContributor` interface. This allows user code to compute arbitrary tags based on the details of HTTP requests. This is an implementation example were the `Foo` header value is used to set the `foo` tag."
msgstr "`HttpServerMetricsTagsContributor` インタフェースを実装した CDI Bean を作成することで、発行されたタグをカスタマイズできます。これは、ユーザコードがHTTPリクエストの詳細に基づいて任意のタグを計算することを可能にする。これは、 `Foo` ヘッダ値を使用して `foo` タグを設定する実装例です。"

#. type: delimited block =
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Only set tags with low cardinality values, meaning that the number of possible different values is low. For example, a tag with the HTTP method is a good candidate, but a tag with the HTTP full path is not."
msgstr "低いカーディナリティ値、つまり異なる値の可能性が低いタグのみを設定する。例えば、HTTPメソッドを持つタグは良い候補ですが、HTTPフルパスを持つタグはそうではありません。"

#. type: Title ===
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy, no-wrap
msgid "Use `MeterRegistryCustomizer` for arbitrary customizations to meter registries"
msgstr "メータ登録の任意のカスタマイズには `MeterRegistryCustomizer` を使用します。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid ""
"By providing CDI beans that implement `io.quarkus.micrometer.runtime.MeterRegistryCustomizer`, the user code can change the configuration of any `MeterRegistry` that has been activated.\n"
"Unless an implementation is annotated with `@io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint`, the customization applies to all `MeterRegistry` instances."
msgstr "`io.quarkus.micrometer.runtime.MeterRegistryCustomizer` を実装するCDI Beanを提供することで、利用者コードは、活性化された任意の `MeterRegistry` の構成を変更することができます。実装が `@io.quarkus.micrometer.runtime.MeterRegistryCustomizerConstraint` でアノテーションされない限り、カスタマイズは全ての `MeterRegistry` インスタンスに適用されます。"

#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "This is a method example with a customizer that sets the `foo` tag oo all metrics:"
msgstr "これは、すべてのメトリクスの `foo` タグを設定するカスタマイザーによるメソッド例です："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "and emitted metrics by implementing `MeterRegistryCustomizer`."
msgstr "を実装し、 `MeterRegistryCustomizer` メトリクスを放出した。"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Some small bug fixes and other features like:"
msgstr "いくつかの小さなバグフィックスとその他の機能："

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Auth failures will now populate the metrics URI tag."
msgstr "認証に失敗した場合、Metrics URIタグに入力されるようになりました。"

#. type: Title ==
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: _posts/2023-09-20-quarkus-observability-3-3.adoc
#, fuzzy
msgid "Quarkus observability extensions have now improved across the board. We currently recommend using OpenTelemetry for tracing and Micrometer for metrics and export all the data using OTel's OTLP protocol to the OpenTelemetry Collector. This will allow you to use the best of both worlds."
msgstr "Quarkusの観測可能なエクステンションが全面的に改善されました。現在、トレースにはOpenTelemetryを、メトリクスにはMicrometerを使用し、OTelのOTLPプロトコルを使用して全てのデータをOpenTelemetry Collectorにエクスポートすることを推奨しています。これにより、両方の長所を利用することができます。"

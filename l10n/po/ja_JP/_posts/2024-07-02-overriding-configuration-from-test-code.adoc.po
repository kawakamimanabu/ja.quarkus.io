msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Overriding the configuration of a Quarkus app from its test code"
msgstr "テストコードからのQuarkusアプリの設定のオーバーライド"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Increase your test coverage by overriding the configuration of your Quarkus app from its test code."
msgstr "Quarkusアプリの設定をテストコードからオーバーライドすることで、テストカバレッジが向上します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"Overriding the configuration of a Quarkus app from its test code is often required to achieve a good test coverage.\n"
"Whenever a config property determines how the app behaves, all possible config values need to be tested."
msgstr "Quarkus アプリケーショ ンの設定をテストコードからオーバーライドすることは、テストカバレッジを向上させるために必要なことです。設定プロパティがアプリの動作を決定する場合、可能性のあるすべての設定値をテストする必要があります。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "All branches need to be tested"
msgstr "全枝のテストが必要"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "In a real project, this interface would likely be `public` and declared in a separate file."
msgstr "実際のプロジェクトでは、このインターフェイスはおそらく `public` 、別のファイルで宣言されるでしょう。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"There are many ways to override the configuration from the test code.\n"
"This post will show you five approaches, with a particular focus on the benefits and drawbacks of each of them."
msgstr "テストコードから設定を上書きする方法はたくさんあります。この投稿では、特にそれぞれの利点と欠点に焦点を当てながら、5つのアプローチを紹介します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "All code snippets from this post (and more!) are available in the https://github.com/gwenneg/blog-overriding-configuration-from-test-code[gwenneg/blog-overriding-configuration-from-test-code^] repository."
msgstr "この投稿のすべてのコード・スニペット（そしてもっと！）は、 link:https://github.com/gwenneg/blog-overriding-configuration-from-test-code[gwenneg/blog-overriding-configuration-from-test-code] リポジトリで入手できます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "[[quarkus-test-profiles]] Approach #1: Quarkus test profiles"
msgstr " アプローチ#1：Quarkusのテストプロファイル"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"https://quarkus.io/guides/getting-started-testing#testing_different_profiles[Quarkus test profiles^] are one of the best ways to override the configuration.\n"
"They can be used while testing in native mode, unlike most approaches listed in this post.\n"
"In addition to the config override, they provide https://quarkus.io/guides/getting-started-testing#writing-a-profile[many additional capabilities^] which make it easier to test Quarkus apps."
msgstr "link:https://quarkus.io/guides/getting-started-testing#testing_different_profiles[Quarkusのテストプロファイルは] 、設定を上書きする最良の方法の1つです。この投稿に記載されているほとんどのアプローチとは異なり、ネイティブモードでのテスト中に使用できます。設定のオーバーライドに加えて、Quarkusテストプロファイルには、Quarkusアプリのテストを容易にする link:https://quarkus.io/guides/getting-started-testing#writing-a-profile[多くの追加] 機能があります。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"From a configuration override perspective, test profiles suffer however from a few drawbacks.\n"
"First, Quarkus is restarted before each test profile is used, which obviously slows down the tests execution.\n"
"The tests also have to be split into several test profiles and classes to cover multiple values of the same config properties.\n"
"As a result, bigger projects may end up with lots of test profiles and spend a lot of time restarting Quarkus between tests.\n"
"Maintaining or reviewing the test code may also be more challenging with test profiles."
msgstr "設定の上書きという観点から、テストプロファイルにはいくつかの欠点があります。まず、各テストプロファイルを使用する前にQuarkusが再起動されるため、テストの実行速度が明らかに遅くなります。また、同じ設定プロパティの複数の値をカバーするために、テストを複数のテストプロファイルとクラスに分割する必要があります。その結果、大規模なプロジェクトでは、多くのテストプロファイルを作成することになり、テストの合間にQuarkusを再起動するのに多くの時間を費やすことになります。また、テストプロファイルを使用すると、テストコードの保守やレビューも難しくなります。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The code to be tested"
msgstr "テストするコード"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Test profiles work with both https://quarkus.io/guides/config-mappings[config mappings^] and `@ConfigProperty`."
msgstr "テストプロファイルは、 link:https://quarkus.io/guides/config-mappings[コンフィグマッピングと] `@ConfigProperty` の両方で動作します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"Most guides about test profiles will introduce them in a verbose way to demonstrate all their capabilities.\n"
"A test profile can actually be added to an existing test class with only a few extra lines:"
msgstr "テストプロファイルについてのガイドの多くは、テストプロファイルのすべての機能を説明するために、冗長な方法でテストプロファイルを紹介しています。テストプロファイルは、実際には既存のテストクラスに追加することができます："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The test class which is also a test profile"
msgstr "テストプロファイルでもあるテストクラス"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"The test class itself can implement `QuarkusTestProfile` if the profile isn't shared across multiple test classes.\n"
"This can make the maintenance and reviews of the test code easier.\n"
"If multiple test classes depend on the same profile, then that profile will likely need to be declared in a dedicated class."
msgstr "プロファイルが複数のテストクラスで共有されていない場合は、 テストクラス自身が `QuarkusTestProfile` を実装することができます。こうすることで、テストコードの保守やレビューが簡単になります。複数のテストクラスが同じプロファイルに依存している場合は、 そのプロファイルを専用のクラスで宣言する必要があるでしょう。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This method comes from `QuarkusTestProfile` and makes it possible to override the configuration from the test code."
msgstr "このメソッドは `QuarkusTestProfile` に由来し、テストコードから設定を上書きすることができます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The config key generated from the `FeaturesConfig` interface is prefixed with `features.` while the config key that comes from the `@ConfigProperty` injection has no prefix."
msgstr "`FeaturesConfig` インターフェースから生成されたコンフィグ鍵には `features.` というプレフィックスが付きますが、 `@ConfigProperty` インジェクションから生成されたコンフィグ鍵にはプレフィックスがありません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Test profiles can also leverage https://quarkus.io/guides/config-reference#profile-aware-files[profile aware files^] to override the configuration from the test code:"
msgstr "テストプロファイルは、 link:https://quarkus.io/guides/config-reference#profile-aware-files[プロファイル認識ファイルを] 活用して、テストコードから設定を上書きすることもできます："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "application-blog.properties"
msgstr "application-blog.properties"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "When that is used, the test profile needs to override the default config profile:"
msgstr "これを使用する場合、テストプロファイルはデフォルトの設定プロファイルを上書きする必要があります："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The test code"
msgstr "テストコード"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This method comes from `QuarkusTestProfile` and makes it possible to override the default config profile."
msgstr "このメソッドは `QuarkusTestProfile` に由来し、デフォルトのコンフィグプロファイルを上書きすることができます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The `application-blog.properties` file will be loaded because the `blog` config profile is active."
msgstr "`blog` コンフィグプロファイルがアクティブなので、 `application-blog.properties` ファイルがロードされます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"If the tests are run in JVM mode only and not in native mode, the `application-blog.properties` file can be placed in the `src/test/resources` folder.\n"
"An additional `application.properties` file (possibly empty) is also required in the same location to enable profile aware files."
msgstr "テストをネイティブ・モードではなく JVM モードのみで実行する場合は、 `application-blog.properties` ファイルを `src/test/resources` フォルダに配置できます。プロファイル認識ファイルを有効にするには、同じ場所に追加の `application.properties` ファイル（空の場合もあります）も必要です。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"If the tests are run in native mode, the same `application-blog.properties` and `application.properties` files are needed as well, but they have to be placed in the `src/main/resources` folder.\n"
"The `application.properties` file also needs to contain the following line:"
msgstr "テストをネイティブモードで実行する場合は、同じ `application-blog.properties` と `application.properties` ファイルが必要ですが、これらは `src/main/resources` フォルダに置く必要があります。また、 `application.properties` ファイルには以下の行を含める必要があります："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
msgid "application.properties"
msgstr "application.properties"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Approach #2: mocking the config with Mockito"
msgstr "アプローチ#2: Mockitoを使ったコンフィグのモック"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Now, here's my favorite approach when native testing is not required."
msgstr "さて、ネイティブ・テストが必要ない場合の、私のお気に入りのアプローチです。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "First, let's see how that works with a https://quarkus.io/guides/config-mappings[config mapping^]:"
msgstr "まず、 link:https://quarkus.io/guides/config-mappings[コンフィグマッピングで] どのように機能するか見てみましょう："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This annotation can be omitted."
msgstr "この注釈は省略可能です。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"This is required to make the `FeaturesConfig` interface implementation proxyable.\n"
"Without that, it wouldn't be possible to mock it with `@InjectMock`."
msgstr "これは `FeaturesConfig` インターフェース実装をプロキシ可能にするために必要です。これがないと、 `@InjectMock` でモックすることができません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"The config class is mocked with the help of the `quarkus-junit5-mockito` extension.\n"
"Injections are not supported in tests in native mode, so this only works when the test is run in JVM mode."
msgstr "config クラスは `quarkus-junit5-mockito` 拡張モジュールの助けを借りてモックされます。インジェクションはネイティブモードのテストではサポートされていないので、これはテストが JVM モードで実行される場合にのみ動作します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The configuration can be mocked from the test method or from a method annotated with one of JUnit's https://junit.org/junit5/docs/current/user-guide/#writing-tests-definitions[lifecycle annotations^] such as `@BeforeEach`."
msgstr "設定はテストメソッドからモックすることも、 `@BeforeEach` のような JUnit の link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-definitions[ライフサイクルアノテーションで] アノテーションされたメソッドからモックすることもできます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"What if your project relies on `@ConfigProperty` instead of `@ConfigMapping`?\n"
"Well, that works too!\n"
"You'll just need to move the config properties to an extra `@ApplicationScoped` bean.\n"
"That bean may or may not be used to centralize all config properties from the Quarkus app."
msgstr "あなたのプロジェクトが `@ConfigMapping` ではなく `@ConfigProperty` に依存しているとしたら？それも可能です！設定プロパティを追加の `@ApplicationScoped` Beanに移動するだけです。このBeanは、Quarkusアプリからすべての設定プロパティを一元化するために使用することもできますし、使用しないこともできます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "A centralized config class, with logging at application startup"
msgstr "アプリケーション起動時にロギングを行う、一元化された設定クラス"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This method is executed at application startup. See the https://quarkus.io/guides/lifecycle#listening-for-startup-and-shutdown-events[Application initialization and termination^] guide for more details about the application lifecycle events."
msgstr "このメソッドはアプリケーションの起動時に実行されます。アプリケーションのライフサイクルイベントの詳細については、 link:https://quarkus.io/guides/lifecycle#listening-for-startup-and-shutdown-events[アプリケーションの初期化と終了] ガイドを参照してください。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "`TreeMap` helps automatically sort the map entries by keys alphabetically."
msgstr "`TreeMap` を使用すると、マップのエントリを自動的にアルファベット順に並べ替えることができます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"The application config is logged at startup.\n"
"This can really help if you ever need to investigate an issue based on past logs.\n"
"Be careful not to log any sensitive config values though! (e.g. secrets or passwords)"
msgstr "アプリケーションの設定は起動時にログに記録されます。これは過去のログに基づいて問題を調査する必要がある場合に本当に役立ちます。しかし、機密性の高い設定値をログに残さないように注意してください！(例: 秘密やパスワード)"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This approach can also leverage the `@ParameterizedTest` feature from JUnit and test several values of a config property with a single test method:"
msgstr "このアプローチでは、JUnit の `@ParameterizedTest` 機能を活用し、1 つのテストメソッドで複数の設定プロパティの値をテストすることもできます："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The test code based on @ParameterizedTest"
msgstr "ParameterizedTestに基づくテストコード"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "When the tests are run, this method will be invoked once for each value provided with the `@ValueSource` annotation."
msgstr "テストが実行されると、 `@ValueSource` アノテーションで指定した値ごとにこのメソッドが呼び出されます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Approach #3: constructor injection"
msgstr "アプローチ #3: コンストラクタ注入"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"What if you need native testing in a big project that suffers from the Quarkus test profiles drawbacks mentioned earlier in this post?\n"
"Injecting the configuration through your CDI beans constructors might be the right approach for you."
msgstr "この投稿で前述したQuarkusテストプロファイルの欠点に悩まされる大規模プロジェクトで、ネイティブテストが必要な場合はどうすればよいでしょうか。CDIビーンズコンストラクタを通して設定をインジェクトするのが、あなたにとって正しいアプローチかもしれません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"The configuration is injected in the constructor of the CDI bean.\n"
"This approach works with both https://quarkus.io/guides/config-mappings[config mappings^] and `@ConfigProperty`."
msgstr "構成は CDI Bean のコンストラクタに注入されます。この方法は、 link:https://quarkus.io/guides/config-mappings[コンフィグマッピングと] `@ConfigProperty` の両方で動作します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This is used to override the configuration from the `FeaturesConfig` interface."
msgstr "これは、 `FeaturesConfig` インターフェースからの設定を上書きするために使用されます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"The configuration is overridden from the test when the bean constructor is invoked.\n"
"The first argument overrides the configuration that relies on `@ConfigMapping`.\n"
"The second argument overrides the configuration that relies on `@ConfigProperty`."
msgstr "この構成は、Bean コンストラクタが呼び出されたときにテストからオーバーライドされます。最初の引数は、 `@ConfigMapping` に依存する構成を上書きします。2番目の引数は、 `@ConfigProperty` に依存する構成を上書きします。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"With this approach, no injections will be performed by CDI when the tests are run because the bean is instantiated manually instead of being managed by the CDI container from Quarkus.\n"
"That drawback can be mitigated by injecting all dependencies (other beans and/or configuration) through the constructor of the tested bean.\n"
"When that is done, CDI injections still won't work but the test code will be able to provide all dependencies required for the test execution."
msgstr "この方法では、QuarkusからCDIコンテナによって管理されるのではなく、Beanが手動でインスタンス化されるため、テスト実行時にCDIによって注入が実行されません。この欠点は、テストされるBeanのコンストラクタを通してすべての依存関係（他のBeanや設定）を注入することで軽減できます。そうすると、CDI インジェクションはまだ機能しませんが、テストコードはテスト実行に必要なすべての依存関係を提供できるようになります。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Approach #4: testing components"
msgstr "アプローチ4：コンポーネントのテスト"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"Quarkus recently introduced an experimental feature called https://quarkus.io/guides/getting-started-testing#testing-components[Testing components^] which can be used to override the configuration from the test code.\n"
"That feature is provided by the `quarkus-junit5-component` extension."
msgstr "Quarkusは最近、 link:https://quarkus.io/guides/getting-started-testing#testing-components[テスト] コードから設定を上書きするために使用できる link:https://quarkus.io/guides/getting-started-testing#testing-components[Testing componentsという] 実験的な機能を導入しました。この機能は、 `quarkus-junit5-component` エクステンションによって提供されます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"This approach doesn't start the full Quarkus app.\n"
"It only starts the CDI container and injects the fields from the test which are annotated with `@jakarta.inject.Inject` or `@io.quarkus.test.InjectMock`.\n"
"It can therefore be much faster, especially in bigger projects, than the full Quarkus app restarts that come with <<quarkus-test-profiles,Quarkus test profiles>>."
msgstr "このアプローチでは、Quarkusアプリ全体を起動しません。CDI コンテナを起動し、 `@jakarta.inject.Inject` または `@io.quarkus.test.InjectMock` でアノテートされたテストフィールドを注入するだけです。そのため、特に大規模なプロジェクトでは、 xref:quarkus-test-profiles[Quarkus テストプロファイルに] 付属している Quarkus アプリ全体を再起動するよりもはるかに高速になります。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This approach doesn't work with native testing because it relies on injections in the test code, which are only supported when the tests are run in JVM mode."
msgstr "この方法はネイティブ・テストでは使えません。なぜなら、テスト・コードの注入に依存しているからで、これはテストがJVMモードで実行される場合にのみサポートされます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Let's see how that works:"
msgstr "どうなるか見てみましょう："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Testing components works with both https://quarkus.io/guides/config-mappings[config mappings^] and `@ConfigProperty`."
msgstr "コンポーネントのテストは、 link:https://quarkus.io/guides/config-mappings[コンフィグマッピングと] `@ConfigProperty` の両方で動作します。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "The usual `@QuarkusTest` annotation has been replaced with `@QuarkusComponentTest`."
msgstr "通常の `@QuarkusTest` の注釈は `@QuarkusComponentTest` に置き換えられています。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "`@TestConfigProperty` can be used on the test class, a test method or both."
msgstr "`@TestConfigProperty` は、テストクラスかテストメソッド、あるいはその両方で使うことができます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Approach #5: system properties"
msgstr "アプローチその5：システム特性"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"I would definitely NOT recommend this approach, but it does exist and it kinda works, so I'll mention it anyway.\n"
"System properties can be used to override the configuration from the test code.\n"
"This approach suffers however from major drawbacks:"
msgstr "この方法は絶対にお勧めしませんが、実際に存在しますし、一種の効果はあるので、とりあえず紹介しておきます。システムプロパティを使用すると、テストコードから設定を上書きすることができます。しかし、この方法には大きな欠点があります："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "It doesn't work in native mode."
msgstr "ネイティブ・モードでは動作しません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "It doesn't work with https://quarkus.io/guides/config-mappings[config mappings^]."
msgstr "link:https://quarkus.io/guides/config-mappings[コンフィグマッピングでは] 動作しません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"It only works once when the configuration is defined in an `@ApplicationScoped` or `@Singleton` bean, before that bean has been initialized.\n"
"After the bean initialization, any changes made to system properties will have no effect on the configuration."
msgstr "構成が `@ApplicationScoped` または `@Singleton` Bean で定義されているとき、その Bean が初期化される前に一度だけ動作します。ビーンが初期化された後、システムプロパティに加えられた変更は、構成に影響を与えません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "System properties can be set from the command line with Maven or Gradle:"
msgstr "システム・プロパティは、MavenまたはGradleを使ってコマンドラインから設定できます："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Maven command"
msgstr "Mavenコマンド"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "They can also be set from the test code:"
msgstr "また、テストコードから設定することもできます："

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "In this code snippet, tests are run in a fixed order to demonstrate a limitation of system properties."
msgstr "このコード・スニペットでは、システム・プロパティの制限を示すために、一定の順序でテストが実行されます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This test always runs first."
msgstr "このテストは常に最初に実行されます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "This test always runs last."
msgstr "このテストは常に最後に行われます。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"This test depends on a CDI bean with a default `@Singleton` scope which was already initialized by the previous test.\n"
"As a consequence, the outcome of this test cannot be changed from the system property."
msgstr "このテストは、前のテストによってすでに初期化されたデフォルトの `@Singleton` スコープを持つ CDI Bean に依存します。その結果、このテストの結果はシステムプロパティから変更できません。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"First, this post is not a comprehensive list of all existing approaches to override the configuration from the test code.\n"
"There are additional options such as using reflection (hardly maintainable) which I did not include, and probably approaches I'm not even aware of.\n"
"Please don't hesitate to share your experience and opinion about this topic in the comments!"
msgstr "まず、この投稿はテストコードから設定をオーバーライドするための既存のアプローチをすべて網羅したものではありません。リフレクションを使う (ほとんど保守的ではありませんが) などの追加オプションもありますし、おそらく私が気づいていないアプローチもあるでしょう。このトピックに関するあなたの経験や意見を遠慮なくコメントで共有してください！"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"Most of you probably started reading this post with a question in mind: what is the best approach?\n"
"Well, as you probably understood through the post, none of them is perfect (yet).\n"
"They all come with drawbacks.\n"
"In my experience, the real question is not about picking the best approach, but rather about how to better combine different approaches and use the best they each have to offer."
msgstr "おそらくほとんどの方が、「最善のアプローチは何か」という疑問を持ってこの記事を読み始めたことでしょう。さて、おそらくこの投稿を通して理解されたように、どれも（まだ）完璧ではありません。どれも欠点があります。私の経験では、本当の問題は最良のアプローチを選ぶことではなく、異なるアプローチをいかにうまく組み合わせ、それぞれが提供する最良のものを利用するかということです。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid ""
"If you're unsure about which approach you may introduce in your project, the https://github.com/gwenneg/blog-overriding-configuration-from-test-code[gwenneg/blog-overriding-configuration-from-test-code^] repository might help you make that decision.\n"
"It contains an implementation of all approaches mentioned in this post."
msgstr "プロジェクトでどのアプローチを導入するか迷っている場合は、 link:https://github.com/gwenneg/blog-overriding-configuration-from-test-code[gwenneg/blog-overriding-configuration-from-test-code] リポジトリが判断の助けになるかもしれません。このリポジトリには、この投稿で言及したすべてのアプローチの実装が含まれています。"

#: _posts/2024-07-02-overriding-configuration-from-test-code.adoc
#, fuzzy
msgid "Thanks for reading this post! I hope it will help you better test your Quarkus apps."
msgstr "この記事をお読みいただきありがとうございます！Quarkusアプリのテストにお役立てください。"

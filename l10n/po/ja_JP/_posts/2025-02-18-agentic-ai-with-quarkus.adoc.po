msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Agentic AI with Quarkus - part 1"
msgstr "QuarkusによるエージェントAI - パート1"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Although there is no universally agreed definition of an AI agent, several emerging patterns demonstrate how to coordinate and combine the capabilities of multiple AI services to create AI-infused applications that can accomplish more complex tasks."
msgstr "AIエージェントの定義に普遍的な合意はありませんが、より複雑なタスクを達成できるAIを組み込んだアプリケーションを作成するために、複数のAIサービスの機能を調整し、組み合わせる方法を示すいくつかの新しいパターンがあります。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "According to a https://www.anthropic.com/research/building-effective-agents[recent article published by Antropic researchers], these _Agentic System architectures_ can be grouped into two main categories:"
msgstr "link:https://www.anthropic.com/research/building-effective-agents[Antropicの研究者が最近発表した論文に] よると、これらの _Agentic Systemアーキテクチャは_ 主に2つのカテゴリーに分類されます："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "**workflows**: LLMs and tools are orchestrated through predefined code paths,"
msgstr "*ワークフロー* ：LLMとツールは、事前に定義されたコードパスを通じてオーケストレーションされます、"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "**agents**: LLMs dynamically direct their processes and tool usage, maintaining control over how they execute tasks."
msgstr "*エージェント* LLMはプロセスやツールの使い方を動的に指示し、タスクの実行方法をコントロールします。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The goal of this series of articles is to discuss the most common workflow and agentic AI patterns and architectures, with the practical aid of https://github.com/mariofusco/quarkus-agentic-ai[this project] that demonstrates for each of them an example of how they can be implemented through Quarkus and its LangChain4j integration. Of course, a real-world application may use and combine these patterns in multiple ways to implement a complex behavior."
msgstr "この一連の記事のゴールは、最も一般的なワークフローとエージェントAIのパターンとアーキテクチャについて議論することです。もちろん、実際のアプリケーションでは、複雑な動作を実装するために、これらのパターンを複数の方法で使用したり組み合わせたりすることができます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "This first article focuses on the _workflow_ patterns. A second article will cover the _agent_ patterns."
msgstr "この最初の記事では、 _ワークフローパターンに_ 焦点を当てます。2番目の記事では _エージェント_ パターンを取り上げます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "All the demos in that project run the LLMs inference locally through an https://ollama.com/[ollama] server. In particular the demos in the workflow section use a llama3.2 model, while the ones relative to the pure agents one employ qwen2.5 since this last model empirically demonstrated of working better when multiple tool callings are required."
msgstr "このプロジェクトの全てのデモは、 link:https://ollama.com/[ollama] サーバを通してLLMs推論をローカルで実行します。特に、ワークフローセクションのデモではllama3.2モデルを使用していますが、純粋エージェントのデモではqwen2.5を使用しています。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Workflow patterns"
msgstr "ワークフローパターン"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"AI workflows are patterns in which different LLM-based services (_AI services_ in the Quarkus vocabulary) are coordinated **programmatically** in a predetermined manner.\n"
"This article introduces three base patterns, namely:"
msgstr "AIワークフローとは、異なるLLMベースのサービス _（_ Quarkusの語彙では _AIサービス_ ）を、あらかじめ決められた方法で *プログラム的に* 連携させるパターンです。この記事では、以下の3つの基本パターンを紹介します："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#prompt-chaining[the prompt chaining pattern]"
msgstr "xref:prompt-chaining[プロンプト連鎖パターン]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#parallelization[the parallelization pattern]"
msgstr "xref:parallelization[並列化パターン]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "xref:#routing[the routing pattern]"
msgstr "xref:routing[ルーティングパターン]"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Prompt chaining"
msgstr "プロンプト・チェイニング"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Prompt chaining is, without a doubt, the simplest yet powerful and effective technique in agentic AI workflows. In this technique, the output of one prompt (the response from an LLM) becomes the input of the next, enabling complex, multi-step reasoning or task execution. It is ideal for situations with a straightforward way to decompose a complex task into smaller and better-delimited steps, thus reducing the possibility of hallucinations or other LLMs misbehaving."
msgstr "プロンプト連鎖は、間違いなく、エージェントAIワークフローにおいて最もシンプルでありながら強力かつ効果的な手法です。この手法では、1つのプロンプトの出力（LLMからの応答）が次のプロンプトの入力となり、複雑なマルチステップの推論やタスクの実行を可能にします。複雑なタスクをより小さく、より区切りの良いステップに分解する簡単な方法が必要な状況に最適で、幻覚や他のLLMが誤動作する可能性を減らすことができます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Understanding that each coordinated call to LLM may rely on different models and system messages is essential. Thus, each step can be implemented using a more specialized model and system message."
msgstr "LLMへの各調整呼び出しは、異なるモデルとシステム・メッセージに依存する可能性があることを理解することが不可欠です。したがって、各ステップは、より特化したモデルとシステムメッセージを使用して実装することができます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "A typical use case for applying this technique is content creation, like advertising or novel writing. For instance, this https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining[first example] leverages this pattern to implement a creative writing and editing workflow, where the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/CreativeWriter.java[first AI service] is the following:"
msgstr "このテクニックを適用する典型的なユースケースは、広告や小説の執筆のようなコンテンツ作成です。例えば、この link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining[最初の例では] 、このパターンを活用して link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/CreativeWriter.java[、] クリエイティブなライティングと編集のワークフローを実装しています："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "It generates a story draft on a topic provided by the user. In contrast, two more services, implemented very similarly to this one, subsequently modify the outcome of the first one. In particular, a https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/StyleEditor.java[second service] rewrites the draft to make it more coherent with a determined style, while a https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/AudienceEditor.java[third one] executes a final edit to make it a good fit for the required audience."
msgstr "これは、ユーザーが提供したトピックに関するストーリー草稿を生成します。これとは対照的に、これとよく似た実装の2つのサービスが、最初のサービスの結果を修正します。特に、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/StyleEditor.java[2つ目のサービスは] 、決定されたスタイルでより首尾一貫したものにするために原稿を書き直し、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/AudienceEditor.java[3つ目の] サービスは、必要な読者に適したものにするために最終編集を実行します。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "It is also worth to be noted that all these three AI services are intended to be used through one-shot calls in a completely stateless way, so they are configured to not have any https://docs.langchain4j.dev/tutorials/chat-memory/[chat memory]. Regardless of this configuration, each AI service has its own chat memory, confined to the single service, and this is why it is necessary to explicitly pass to each of them the output produced by the former LLM in the chain."
msgstr "また、これら3つのAIサービスはすべて、完全にステートレスな方法でワンショット呼び出しによって使用されることを意図しているため、 link:https://docs.langchain4j.dev/tutorials/chat-memory/[チャットメモリを] 持たないように設定されていることも特筆すべき点です。この構成にかかわらず、各AIサービスは単一のサービスに限定された独自のチャット・メモリを持っており、これが、チェーンの前のLLMによって生成された出力を明示的に各サービスに渡す必要がある理由です。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Prompt chaining pattern"
msgstr "プロンプト連鎖パターン"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "In this case, it is pretty straightforward to expose this service through a https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/WriterResource.java[HTTP endpoint] that invokes these AI services one after the other, making the editors rewrite or refine the content produced by the first creative writer:"
msgstr "この場合、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/promptchaining/WriterResource.java[HTTPエンドポイントを通じて] このサービスを公開し、AIサービスを次々に呼び出して、最初のクリエイティブ・ライターが作成したコンテンツを編集者にリライトさせたり、洗練させたりするのは非常に簡単です："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The HTTP endpoint allows us to define a topic, style, and audience of the novel to be produced; so, for example, running the project locally, it would be possible to obtain a drama about dogs having kids as the target audience by calling this URL:"
msgstr "HTTPエンドポイントでは、制作する小説のトピック、スタイル、オーディエンスを定義することができます。例えば、ローカルでプロジェクトを実行する場合、このURLを呼び出すことで、子供を持つ犬についてのドラマをターゲットオーディエンスとして取得することができます："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "As an example, it generates a result like https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/dogs-novel.txt[this]. Since this project integrates the observability capabilities provided by Quarkus out-of-the-box, it is also possible to look at the tracing of the flow of invocations performed to fulfill this request, which, of course, puts in evidence of the sequential nature of this pattern."
msgstr "例として、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/dogs-novel.txt[この] ような結果が生成されます。このプロジェクトはQuarkusが提供する観測可能な機能をそのまま統合しているので、このリクエストを満たすために実行された呼び出しの流れをトレースすることも可能です。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Tracing sequential execution of the prompt chaining pattern"
msgstr "プロンプト連鎖パターンの逐次実行のトレース"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Parallelization"
msgstr "並列化"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "This second pattern also orchestrates multiple calls to LLMs. However, unlike the prompt chaining pattern, the calls are independent and do not require the output of one call to be used as the input of another. In these situations, those calls can be performed in parallel, followed by an aggregator that combines their outcomes."
msgstr "この2つ目のパターンも、LLMへの複数の呼び出しをオーケストレーションする。しかし、プロンプト連鎖パターンとは異なり、呼び出しは独立し ており、ある呼び出しの出力を別の呼び出しの入力として使用する必要はありません。このような状況では、これらの呼び出しを並行して実行し、その結果を結合するアグリゲータを実行します。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "To demonstrate how this works, let's consider this https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization[second example]. This code recommends a plan for a lovely evening with a specific mood, combining a movie and a meal that matches that mood. The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/EveningPlannerResource.java[HTTP endpoint] implements this goal by invoking two different AI services **in parallel** and then combining their outcome, putting together the three different suggestions of the two different LLM-based experts."
msgstr "この仕組みを説明するために、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization[2つ目の例を考えて] みましょう。このコードは、特定のムードで素敵な夜を過ごすために、そのムードに合った映画と食事を組み合わせたプランを推奨しています。 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/EveningPlannerResource.java[HTTPエンド] ポイントは、2つの異なるAIサービスを *並行して* 呼び出し、その結果を組み合わせて、2つの異なるLLMベースの専門家の3つの異なる提案をまとめることで、この目標を実装しています。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/MovieExpert.java[first LLM] is an AI service asked to provide three titles of movies matching the given mood."
msgstr "link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/MovieExpert.java[最初のLLMは] 、与えられた雰囲気に合う映画のタイトルを3つ提供するよう依頼されたAIサービスです。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/FoodExpert.java[second one], with a very similar implementation is asked to provide three meals. When these LLM calls are complete, the results (3 lists of 3 items each) are aggregated to create a list of 3 fantastic evening plans with a suggested movie and meal each."
msgstr "link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/parallelization/FoodExpert.java[2つ目は] 、非常によく似た実装で、3つの食事を提供するように求められます。これらのLLMの呼び出しが完了すると、結果（各3項目の3つのリスト）は、それぞれ提案された映画と食事を持つ3つの素晴らしい夜のプランのリストを作成するために集計されます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The parallelization pattern"
msgstr "並列化パターン"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "For instance asking that endpoint to provide evening plans for a romantic mood:"
msgstr "例えば、ロマンチックなムードを演出するために、そのエンドポイントに夜のプランを依頼するとか："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The outcome is something like:"
msgstr "結果はこんな感じです："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"[\n"
"  EveningPlan[movie=1. The Notebook, meal=1. Candlelit Chicken Piccata],\n"
"  EveningPlan[movie=2. La La Land, meal=2. Rose Petal Risotto],\n"
"  EveningPlan[movie=3. Crazy, Stupid, Love., meal=3. Sunset Seared Scallops]\n"
"]"
msgstr "[イブニングプラン[映画=1.ノートブック、食事=1.キャンドルライト・チキン・ピカタ]、イブニングプラン[映画=2.ラ・ラ・ランド、食事=2.バラの花びらのリゾット]、イブニングプラン[映画=3.クレージー、バカ、ラブ、食事=3.ホタテの夕焼け]】。］"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "In this case, the tracing of the flow of invocations performed to fulfill this request shows, as expected, that the two LLM invocations are performed in parallel."
msgstr "この場合、この要求を満たすために実行された呼び出しの流れをトレースすると、予想通り、2つのLLM呼び出しが並行して実行されていることがわかります。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Tracing parallel LLMs invocation"
msgstr "並列LLM起動のトレース"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Routing"
msgstr "ルーティング"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Another common situation is the need to direct tasks requiring specific handling to specialized models, tools, or processes based on determined criteria. In these cases, the routing workflow allows the dynamic allocation of tasks to the most suitable AI service."
msgstr "もう1つの一般的な状況は、特定の処理を必要とするタスクを、決められた基準に基づいて特殊なモデル、ツール、またはプロセスに誘導する必要性です。このような場合、ルーティングワークフローを使用することで、最適なAIサービスにタスクを動的に割り当てることができます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing[This example] shows how this pattern can be applied in a simple scenario where a user asks a question that has to be redirected to a https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/LegalExpert.java[legal], https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/MedicalExpert.java[medical] or https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/TechnicalExpert.java[technical] expert to be answered most accurately, where any of these experts are an AI service implemented for instance as follows:"
msgstr "link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing[この例では] 、ユーザーが link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/LegalExpert.java[法律] 、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/MedicalExpert.java[医療] 、または link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/TechnicalExpert.java[技術的な] 専門家にリダイレクトして最も正確に回答する必要がある質問をするという単純なシナリオで、このパターンをどのように適用できるかを示しています："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The categorization of the user's request is performed by https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/CategoryRouter.java[another LLM service]"
msgstr "ユーザーのリクエストの分類は、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/CategoryRouter.java[別のLLMサービスによって] 実行されます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "that returns one of the possible categories of the user's request, encoded in this enumeration:"
msgstr "この列挙でエンコードされた、ユーザのリクエストの可能なカテゴリの一つを返します："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Thus, the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/RouterService.java[router service] can send the question to the right expert."
msgstr "このように、 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/RouterService.java[ルーターサービスは] 適切な専門家に質問を送ることができます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "Routing pattern"
msgstr "ルーティングパターン"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "In this way, when the user calls the https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/ExpertAssistanceResource.java[HTTP endpoint], exposing this service writing something like: \"I broke my leg what should I do\":"
msgstr "このように、ユーザーが link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/src/main/java/org/agenticai/routing/ExpertAssistanceResource.java[HTTPエンドポイントを] 呼び出すと、このサービスは、次のような書き込みを公開します：「足を骨折しました："

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The first LLM categorizes this request as a medical one, and the router forwards it to the medical expert LLM, thus generating a result like https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/expert-response.txt[this]."
msgstr "最初のLLMはこのリクエストを医療用として分類し、ルーターはこれを医療専門家のLLMに転送 link:https://github.com/mariofusco/quarkus-agentic-ai/blob/main/text/expert-response.txt[します] 。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid ""
"This article demonstrated how you can implement _workflow patterns_ with Quarkus Langchain4J.\n"
"Quarkus Langchain4J provides a powerful and flexible way to implement these patterns, allowing you to orchestrate multiple AI services in a way that is both efficient and easy to understand."
msgstr "この記事では、Quarkus Langchain4Jで _ワークフローパターンを_ 実装する方法を紹介しました。Quarkus Langchain4Jは、これらのパターンを実装するための強力で柔軟な方法を提供し、効率的で理解しやすい方法で複数のAIサービスをオーケストレーションできます。"

#: _posts/2025-02-18-agentic-ai-with-quarkus.adoc
#, fuzzy
msgid "The next article will cover the _agent patterns_. So, stay tuned!"
msgstr "次回は _エージェントのパターンを_ 取り上げます。ご期待ください！"

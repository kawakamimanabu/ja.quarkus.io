msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Revolutionising Telecom Microservice - Modernising JDiameter with Quarkus"
msgstr "テレコムマイクロサービスの革命 - QuarkusによるJDiameterの近代化"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "My journey of with JDiameter and Quarkus"
msgstr "JDiameterとクアルカスとの旅"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "The Diameter protocol serves as a cornerstone in any modern telecommunication backend, providing authentication, authorisation, and accounting (AAA) services in 3G, IMS, 4G, and 5G networks. Several vendors offer commercially licensed Diameter stacks, most of which are written in C++. As a result, many in the Java world have turned to the open-source RestComm JDiameter stack."
msgstr "Diameter プロトコルは、3G、IMS、4G、5G ネットワークで認証、認可、アカウンティング（AAA）サービスを提供する、最新の通信バックエンドの要です。いくつかのベンダーが商用ライセンスのDiameterスタックを提供していますが、そのほとんどはC++で書かれています。その結果、Javaの世界では多くの人がオープンソースのRestComm JDiameterスタックに目を向けています。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Developed in the early 2010s, JDiameter has not received any updates in the last seven years. A major challenge with JDiameter is its reliance on outdated dependencies—some with known Common Vulnerabilities and Exposures (CVEs)—and others that are deprecated or no longer supported. Additionally, JDiameter was written in Java 1.7, which restricts the use of modern advancements in the Java language, such as virtual threading."
msgstr "2010年代初頭に開発されたJDiameterは、過去7年間アップデートを受けていません。JDiameterの主な課題は、時代遅れの依存関係（CVEs（Common Vulnerabilities and Exposures）が知られているもの、非推奨またはサポートされなくなったものなど）に依存していることです。さらに、JDiameterはJava 1.7で書かれており、仮想スレッドのようなJava言語の最新の進歩の使用を制限しています。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "With the shift towards microservices in telecommunications, many organisations now develop solutions that are deployed and managed using platforms like Kubernetes and OpenShift. In the Java ecosystem, developers have several microservices frameworks to choose from, with the major ones being Spring Boot, Micronaut, and my preferred choice, Quarkus."
msgstr "電気通信におけるマイクロサービスへのシフトに伴い、多くの組織は現在、KubernetesやOpenShiftのようなプラットフォームを使用してデプロイされ管理されるソリューションを開発しています。Javaエコシステムでは、開発者はいくつかのマイクロサービスフレームワークから選択することができ、主なものはSpring Boot、Micronaut、そして私が好んで選択するQuarkusです。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Over the past seven years, I have primarily developed solutions for charging and billing subscribers in prepaid mobile networks, including writing both a Diameter Routing Agent (DRA) and an Online Charging System (OCS). In both instances, I used Quarkus as the microservices framework and JDiameter as the Diameter stack—with much frustration, I must add."
msgstr "過去7年間、私は主にプリペイド携帯ネットワークの加入者に課金・請求するソリューションを開発してきました。Diameter Routing Agent (DRA)とOnline Charging System (OCS)の両方を書きました。どちらの場合も、マイクロサービスフレームワークとしてQuarkusを、DiameterスタックとしてJDiameterを使用しました。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "The solutions we developed were functional, but they felt more like a Quarkus application with a JDiameter sidecar. The Diameter stack operated independently, without leveraging the benefits offered by the Quarkus framework."
msgstr "私たちが開発したソリューションは機能的でしたが、QuarkusアプリケーションにJDiameterのサイドカーを付けたようなものでした。Diameterスタックは、Quarkusフレームワークが提供する利点を活用することなく、独立して動作していました。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Quarkus JDiameter Extension"
msgstr "Quarkus JDiameter Extension"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Eventually, my frustration with the sidecar approach of integrating JDiameter with Quarkus led me to develop a solution that would allow the two to work more harmoniously. This initiative resulted in the creation of the Quarkus JDiameter extension."
msgstr "最終的に、JDiameterとQuarkusを統合するサイドカー的なアプローチに対する不満から、この2つがより調和して動作するソリューションを開発することになりました。この取り組みの結果、Quarkus JDiameterエクステンションが誕生しました。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "As mentioned earlier, the RestComm JDiameter stack had been neglected and was in dire need of some attention. My first step was to modernise the JDiameter stack by removing deprecated dependencies and updating the outdated ones to their latest versions."
msgstr "前述したように、RestComm JDiameterスタックは放置されており、いくつかの注意が切実に必要でした。私の最初のステップは、非推奨の依存関係を削除し、古い依存関係を最新バージョンに更新することによって、JDiameterスタックを近代化することでした。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "Two key changes were made to the stack. The first was removing Pico containers—an outdated dependency injection framework from the pre-Java EE era—and the second was replacing the concurrency logic from the old Thread Group model with the more modern Thread Pool model. With the introduction of thread pooling, the Diameter stack can now utilise virtual threading!"
msgstr "スタックには2つの重要な変更が加えられました。1つ目はPicoコンテナ（Java EE以前の時代からある時代遅れの依存性注入フレームワーク）の削除、2つ目は古いスレッドグループモデルからよりモダンなスレッドプールモデルへの同時実行ロジックの置き換えです。スレッドプールの導入により、Diameterスタックは仮想スレッドを利用できるようになりました！"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "The next challenge was to develop a Quarkus extension to integrate the Diameter stack into the Quarkus framework. I had three main objectives with this extension:"
msgstr "次の課題は、DiameterスタックをQuarkusフレームワークに統合するためのQuarkusエクステンションを開発することでした。このエクステンションには3つの主な目的がありました："

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "*Simplified Configuration*: Moving the configuration to the \"application.properties“ file to make the stack easier to configure."
msgstr "*設定の簡素化* ：コンフィギュレーションを \"application.properties \"ファイルに移動し、スタックのコンフィギュレーションを容易にしました。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "*Dependency Injection*: Enabling dependency injection of Diameter stacks and configuration into a scoped service."
msgstr "*依存性注入* ：スコープされたサービスへのDiameterスタックとコンフィギュレーションの依存性注入を可能にします。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "*Interceptor Service Framework*: Creating an interceptor service framework for a more straightforward implementation of Diameter applications."
msgstr "*インターセプター・サービス・フレームワーク* ：インターセプターサービスフレームワークを作成することで、Diameterアプリケーションをより簡単に実装できます。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "The Quarkus JDiameter stack has been released and is now part of Quarkiverse Hub. You can find it at link:https://github.com/quarkiverse/quarkus-jdiameter[Quarkiverse Hub]. Documentation for the stack is available at link:https://docs.quarkiverse.io/quarkus-jdiameter/dev/index.html[Quarkus JDiameter Documentation]."
msgstr "Quarkus JDiameterスタックがリリースされ、Quarkiverse Hubの一部となりました。 link:https://github.com/quarkiverse/quarkus-jdiameter[Quarkiverse Hubに] あります。スタックのドキュメントは link:https://docs.quarkiverse.io/quarkus-jdiameter/dev/index.html[Quarkus JDiameter Documentationに] あります。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "There is still considerable potential for tighter integration of the JDiameter stack into the Quarkus framework. A future project could involve exposing the statistics collected in the stack via the Quarkus MicroProfile Metrics interface."
msgstr "JDiameterスタックとQuarkusフレームワークとの緊密な統合には、まだ大きな可能性があります。将来のプロジェクトでは、Quarkus MicroProfile Metricsインターフェースを介してスタックで収集された統計情報を公開することが考えられます。"

#: _posts/2024-08-19-quarkus-jdiameter-intro.adoc
#, fuzzy
msgid "If you’ve been frustrated with integrating JDiameter in a microservice environment, as I was, give the Quarkus JDiameter extension a try!"
msgstr "私のように、マイクロサービス環境でのJDiameterの統合にフラストレーションを感じているなら、QuarkusのJDiameterエクステンションを試してみてください！"

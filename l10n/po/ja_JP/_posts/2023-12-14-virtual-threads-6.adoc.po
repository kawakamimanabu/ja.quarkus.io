msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Containerizing virtual thread applications"
msgstr "仮想スレッドアプリケーションのコンテナ化"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Learn how to containerized applications using virtual threads."
msgstr "仮想スレッドを使用してアプリケーションをコンテナ化する方法を学びます。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"In another https://quarkus.io/blog/virtual-threads-2/[blog post], we explored how to implement a CRUD application with Quarkus to harness the power of virtual threads.\n"
"This post continues from that point, explaining how to containerize the application.\n"
"Containerization involves packaging the application into a container image, and we'll use the `quarkus-container-image-jib` extension for this purpose.\n"
"Quarkus offers other extensions for containerization, such as `quarkus-container-image-docker`, so choose the one that suits your preference."
msgstr "別の link:https://quarkus.io/blog/virtual-threads-2/[ブログ記事] で、Quarkusを使ってCRUDアプリケーションを実装し、仮想スレッドのパワーを活用する方法を紹介しました。この記事では、その続きとして、アプリケーションをコンテナ化する方法を説明します。コンテナ化には、アプリケーションをコンテナイメージにパッケージ化することが含まれます。この目的のために、 `quarkus-container-image-jib` エクステンションを使用します。Quarkusには、 `quarkus-container-image-docker` のようなコンテナ化のための他のエクステンションもありますので、好みに合わせて選択してください。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"Packaging an application using virtual threads is not different from packaging a regular application.\n"
"Quarkus hides all the complexity, selecting the right base image and configuring the native image build process to use the right flags."
msgstr "仮想スレッドを使用したアプリケーションのパッケージングは、通常のアプリケーションのパッケージングと変わりません。Quarkusは複雑さをすべて隠し、適切なベースイメージを選択し、適切なフラグを使用するようにネイティブイメージのビルドプロセスを設定します。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "The full code for this blog post is available in the `crud-example` directory of the https://github.com/quarkusio/virtual-threads-demos[virtual-threads-demos GitHub repository]."
msgstr "このブログ記事の全コードは、 link:https://github.com/quarkusio/virtual-threads-demos[virtual-threads-demos GitHub リポジトリ] の`crud-example` ディレクトリにあります。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Adding Jib to the Project"
msgstr "プロジェクトにジブを追加"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "First, add the `quarkus-container-image-jib` extension to the project:"
msgstr "まず、 `quarkus-container-image-jib` エクステンションをプロジェクトに追加します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Next, open the `application.properties` file and add the following properties:"
msgstr "次に、 `application.properties` ファイルを開き、以下のプロパティを追加します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Enable container image build; every `mvn package` run will build a container image."
msgstr "コンテナイメージのビルドを有効にします。 `mvn package` を実行するたびにコンテナイメージがビルドされます。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Define the name of the container image. The `${quarkus.application.name}` placeholder is replaced by the application name, which is `crud-example` in our case."
msgstr "コンテナイメージの名前を定義します。 `${quarkus.application.name}` のプレースホルダはアプリケーション名に置き換えられます。この例では `crud-example` です。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Building the Container Image for the JVM"
msgstr "JVM用コンテナイメージの構築"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "To create the container image for the Java application, run the following command:"
msgstr "Javaアプリケーション用のコンテナイメージを作成するには、以下のコマンドを実行します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"The logs will show the container image build process, with the image being built using the `registry.access.redhat.com/ubi8/openjdk-21-runtime:1.18` base image.\n"
"This image is automatically selected by Quarkus as the project uses Java 21."
msgstr "ログにはコンテナイメージのビルドプロセスが表示され、 `registry.access.redhat.com/ubi8/openjdk-21-runtime:1.18` ベースイメージを使用してイメージがビルドされます。このプロジェクトではJava 21を使用しているため、Quarkusによってこのイメージが自動的に選択されます。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Take note of the resulting image name: `clement/virtual-threads-demos-crud-example:1.0.0-SNAPSHOT`. The first part is your username by default, do do not forget to change it in the other commands."
msgstr "結果の画像名に注意してください： `clement/virtual-threads-demos-crud-example:1.0.0-SNAPSHOT` 。最初の部分はデフォルトであなたのユーザー名です。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "You can run the container image with:"
msgstr "でコンテナイメージを実行できます："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Ensure to replace `clement` with your username."
msgstr "`clement` をユーザー名に置き換えてください。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"If you are running on ARM64, you may encounter a warning regarding the image's platform mismatch.\n"
"You can override this using: `$ mvn clean package -DskipTests -Dquarkus.jib.platforms=linuxarm64`."
msgstr "ARM64で実行している場合、イメージのプラットフォームの不一致に関する警告が表示されることがあります。 `$ mvn clean package -DskipTests -Dquarkus.jib.platforms=linuxarm64` ."

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Building the Container Image for the Native Executable"
msgstr "ネイティブ実行可能ファイル用コンテナイメージの構築"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "To build the container image for the native executable, use the following command:"
msgstr "ネイティブ実行可能ファイル用のコンテナイメージを構築するには、以下のコマンドを使用します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "The `-Dnative` flag enables native compilation, and `-Dquarkus.jib.platforms=linux/arm64` specifies the target platform (required if you are on ARM64, as by default it will pick `linux/amd64`)."
msgstr "`-Dnative` フラグはネイティブ・コンパイルを有効にし、 `-Dquarkus.jib.platforms=linux/arm64` はターゲット・プラットフォームを指定します（デフォルトでは `linux/amd64` を選ぶため、ARM64の場合は必須です）。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Note the property `quarkus.native.container-build=true`, which instructs Quarkus to use a container image to build the native executable, avoiding the need for GraalVM installation."
msgstr "`quarkus.native.container-build=true` というプロパティに注意してください。これは、ネイティブ実行可能ファイルを構築するためにコンテナイメージを使用するようQuarkusに指示するもので、graalVMのインストールの必要性を回避します。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Run the container image with:"
msgstr "でコンテナイメージを実行します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Use the same configuration trick for the database connection, and replace `clement` with your username."
msgstr "データベース接続にも同じ設定を使用し、 `clement` をユーザー名に置き換えてください。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Pushing the Container Image"
msgstr "コンテナイメージのプッシュ"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"Quarkus can push the container image to a registry.\n"
"To push to the GitHub container repository, use these properties:"
msgstr "Quarkusでは、コンテナイメージをレジストリにプッシュできます。GitHubコンテナリポジトリにプッシュするには、以下のプロパティを使用します："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "The `GITHUB_TOKEN` environment variable configures the GitHub token, which must have permission to create packages. Push the container image using:"
msgstr "環境変数 `GITHUB_TOKEN` は GitHub トークンを設定するもので、パッケージの作成権限が必要です。を使ってコンテナイメージをプッシュします："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Append `-Dnative` for native images."
msgstr "ネイティブ画像用に `-Dnative` を追加します。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "Multi-architecture container images can be created using:"
msgstr "マルチアーキテクチャのコンテナイメージは、以下の方法で作成できます："

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "This option is not applicable for native executables, howver, it is very convenient for JVM applications as you can then use the same container image on different platforms."
msgstr "このオプションはネイティブ実行可能ファイルには実行可能ではありませんが、JVMアプリケーションでは、異なるプラットフォームで同じコンテナイメージを使用できるので、非常に便利です。"

#: _posts/2023-12-14-virtual-threads-6.adoc
msgid "Summary"
msgstr "まとめ"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid "This blog post demonstrated how to containerize a virtual thread application using Quarkus and the Jib container image extension. Both JVM applications and native executables were covered."
msgstr "このブログ記事では、QuarkusとJibコンテナイメージエクステンションを使って、仮想スレッドアプリケーションをコンテナ化する方法を紹介しました。JVMアプリケーションとネイティブ実行可能ファイルの両方が対象です。"

#: _posts/2023-12-14-virtual-threads-6.adoc
#, fuzzy
msgid ""
"Attentive readers would have seen that nothing is different from a regular application.\n"
"Quarkus handles all the complexity, selecting the right base image and configuring the native image build process to use the right flags."
msgstr "注意深い読者なら、通常のアプリケーションと何も変わらないことがおわかりでしょう。Quarkusは、適切なベースイメージを選択し、適切なフラグを使用するようにネイティブイメージのビルドプロセスを設定するという、複雑な処理をすべて行います。"

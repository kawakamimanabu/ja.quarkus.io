msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "Introducing the new Redis API - How to cache with Redis?"
msgstr "新しいRedis APIの紹介 - Redisでキャッシュするには？"

#. type: YAML Front Matter: synopsis
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "How to implement a simple cache with the Redis data source"
msgstr "Redisデータソースで簡単なキャッシュを実装する方法"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"In Quarkus 2.11, we introduced a new API to interact with Redis.\n"
"The Redis DataSource APIs aim to be simpler, more extensive, and type-safe.\n"
"Under the hood, it uses a performant, non-blocking client (that you can also use if you prefer low-level APIs)."
msgstr "Quarkus 2.11では、Redisとやり取りするための新しいAPIを導入しました。RedisデータソースAPIは、よりシンプルで、より広範で、型安全であることを目指しています。RedisデータソースAPIは、よりシンプルで広範かつ型安全なAPIを目指しており、その内部では、パフォーマンスが高く、ノンブロッキングのクライアントが使用されています（低レベルのAPIを使用したい場合にも使用できます）。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "In this post, we will introduce this new API and use it to build a cache, one of the main Redis use cases."
msgstr "今回はこの新しいAPIを紹介し、Redisの主なユースケースの一つであるキャッシュを構築するために使用します。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "What is Redis?"
msgstr "Redisとは？"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"https://redis.io/[Redis] is an open-source, in-memory data store that can be used as a database, cache, streaming engine, and message broker.\n"
"Redis is often used as real-time data stores,  cache backends, data storage for geospatial entities, and so on.\n"
"To interact with Redis, you emit _commands_ and receive responses.\n"
"These commands target _keys_ and manipulate the associated data.\n"
"There are many commands divided into groups, including:"
msgstr "link:https://redis.io/[Redisは] オープンソースのインメモリデータストアで、データベース、キャッシュ、ストリーミングエンジン、メッセージブローカーとして使用できます。Redisはリアルタイムデータストア、キャッシュバックエンド、地理空間エンティティのデータストレージなどとしてよく使用されます。Redisとやり取りするには、 _コマンドを_ 発行してレスポンスを受け取ります。これらのコマンドは _キーを_ 対象とし、関連するデータを操作します。コマンドは以下のようなグループに分かれています："

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the BitMap group to manipulate bit vectors"
msgstr "ビットベクトルを操作するためのBitMapグループです。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Generic group to manipulate the keys"
msgstr "キーを操作するGenericグループ"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Geospatial group to manipulate geo items"
msgstr "ジオアイテムを操作するための「Geospatial」グループ"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Hash group to manipulate sets of `+field -> item+` pairs (like `Map` in Java)"
msgstr "`field -> item` のペアの集合を操作するための Hash グループ（Java の `Map` のようなもの）。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the List, Set, and Sorted Set groups to store list, set, and sorted set of items"
msgstr "リスト、セット、ソートされたセットを格納するリスト、セット、ソートされたセットのグループ"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Pub/Sub group to emit messages on channels and receive them"
msgstr "Pub/Subグループで、チャンネルにメッセージを発信し、それを受信する。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the String group to manipulate value (in Redis, Strings represent values including binary, numbers...)"
msgstr "値を操作するStringグループ（Redisでは、Stringはバイナリや数値などの値を表します）。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "the Transaction group to execute transactions"
msgstr "トランザクションを実行するTransactionグループ。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "You can find the complete list of commands on the https://redis.io/commands/[Redis Commands page]."
msgstr "コマンドの完全なリストは、 link:https://redis.io/commands/[Redisコマンドのページ] でご覧いただけます。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "The new Quarkus Redis API"
msgstr "新しいQuarkusのRedis API。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "The entry point of the new Quarkus Redis API are the two _data sources_ interfaces:"
msgstr "新しいQuarkus Redis APIの入口は、2つの _データソースインターフェース_ です："

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "`io.quarkus.redis.datasource.RedisDataSource` - the imperative (blocking) API"
msgstr "`io.quarkus.redis.datasource.RedisDataSource` - 命令型API"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - the reactive API"
msgstr "`io.quarkus.redis.datasource.ReactiveRedisDataSource` - リアクティブAPI"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "As mentioned above, these APIs are implemented on top of a lower-level client:"
msgstr "前述のように、これらのAPIは下位のクライアントの上に実装されています："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The data source APIs follow the command group structure.\n"
"For each group, you retrieve an object dedicated to emitting the commands of that group.\n"
"In that regard, this new API is not an abstraction of Redis.\n"
"You still need to know the command you need."
msgstr "データ・ソースAPIはコマンド・グループ構造に従っています。グループごとに、そのグループのコマンドを発行する専用のオブジェクトを取得します。その点で、この新しいAPIはRedisの抽象化ではありません。必要なコマンドを知る必要があります。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "For example, to manipulate a `Set<Person>`, you will use the following code:"
msgstr "例えば、 `Set<Person>` 、を操作する場合は、次のようなコードを使用します："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The API manages the serialization and deserialization for you.\n"
"Currently, it uses JSON for objects (using Jackson), but soon the API will offer more advanced features."
msgstr "APIはあなたのためにシリアライズとデシリアライズを管理します。現在のところ、オブジェクトにはJSONを使用しています（Jacksonを使用）が、APIは間もなくより高度な機能を提供する予定です。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "This example uses the imperative API, but the reactive API is symmetric."
msgstr "この例では命令型APIを使用していますが、リアクティブAPIは対称型です。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy, no-wrap
msgid "Implementing a Redis cache"
msgstr "Redisキャッシュの実装"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"Time for more cohesive code.\n"
"Let's imagine the following https://github.com/cescoffier/quarkus-redis-demo[application]:"
msgstr "もっとまとまりのあるコードにしましょう。次のような link:https://github.com/cescoffier/quarkus-redis-demo[アプリケーションを] 想像してみましょう："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"We have a database storing `Heroes`, a lot of them.\n"
"You need to return the 3 most powerful heroes based on their level.\n"
"Of course, you can use your SQL ninja skills, but let's imagine that this code was coded a long time ago, cannot be changed, and is very time-consuming:"
msgstr "`Heroes` を保存しているデータベースがあります。あなたは、レベルに基づいて最も強力な3人のヒーローを返す必要があります。もちろん、あなたのSQL忍者スキルを使うこともできますが、このコードがかなり前にコーディングされたもので、変更できず、非常に時間がかかることを想像してみましょう："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"So, one solution to avoid having to re-compute this set of heroes on every call is to cache the result for a bit of time, let's say 10 seconds.\n"
"Let's consider that it's acceptable in this case to return a potentially outdated result set."
msgstr "そこで、呼び出しのたびにこのヒーローのセットを再計算する必要がないようにするための1つの解決策は、結果を少し時間、たとえば10秒間キャッシュすることです。この場合、古い可能性のある結果セットを返すことは許容できると考えましょう。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"To use the new Redis API, we need to use the `redis-client` extension.\n"
"For users from the previous API, it's the same extension. The previous API is still available but is deprecated, and we plan to remove it at some point."
msgstr "新しいRedis APIを使用するには、 `redis-client` 拡張モジュールを使用する必要があります。以前のAPIからのユーザーにとっては同じエクステンションです。以前のAPIはまだ利用可能ですが、非推奨となっており、いずれ削除する予定です。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Now that we can use the  `RedisDataSource`, we can implement the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[`MyRedisCache` class] as follows:"
msgstr "`RedisDataSource` が使えるようになったので、 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/MyRedisCache.java[MyRedisCache クラスを] 次のように実装します："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"Note that it's a simple cache without any fancy features.\n"
"Redis provides more advanced commands to implement more complicated strategies."
msgstr "これは派手な機能のないシンプルなキャッシュであることに注意してください。Redisはより複雑な戦略を実装するために、より高度なコマンドを提供します。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The constructor receives the `RedisDataSource` and gets an object to manipulate Redis _values_.\n"
"In our case, https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[`Ranking`] (the top 3 heroes)"
msgstr "コンストラクタは `RedisDataSource` を受け取り、Redis の _値を_ 操作するためのオブジェクトを取得します。私たちの場合 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/Ranking.java[Ranking] (トップ3のヒーロー)"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "The `get` method emits the Redis `get` command to retrieve an already stored ``Ranking(``null` if it does not)."
msgstr "`get` メソッドは、すでに保存されている `Ranking(` null` を取得するために Redis `get` コマンドを発します（発しない場合）。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The `set` method emits the Redis `set` command and store a `Ranking` to the passed key.\n"
"The command also configures the expiration time.\n"
"So, after 10 seconds, the value is removed by Redis.\n"
"As mentioned above, the Ranking instance is serialized into a JSON document."
msgstr "`set` メソッドは Redis `set` コマンドを発行し、渡されたキーに `Ranking` を保存します。コマンドは有効期限も設定します。つまり、10秒後にRedisによって値が削除されます。前述のように、RankingインスタンスはJSONドキュメントにシリアライズされます。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The `evict` method allows removing the stored value.\n"
"Multiple commands can do this, such as the `del` or `getdel` (which also returned the stored value)."
msgstr "`evict` メソッドでは、保存された値を削除することができます。 `del` や `getdel` (これも保存された値を返します) のように、複数のコマンドでこれを行うことができます。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"For our application, we need something a bit more fancy.\n"
"We want to check if we have a value in Redis.\n"
"If so, uses that value, and if not, compute the value and store it.\n"
"This is implemented in the `getOrSetIfAbsent`."
msgstr "私たちのアプリケーションでは、もう少し派手なものが必要です。Redisに値があるかどうかをチェックしたいのです。もしあればその値を使い、なければ値を計算して保存します。これは `getOrSetIfAbsent` で実装されています。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Now, we can just use this cache to avoid the heavy computation on every call (check the https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] class to see the complete code):"
msgstr "あとは、このキャッシュを使うだけで、呼び出しのたびに重い計算が発生するのを避けることができます（完全なコードを見るには、 link:https://github.com/cescoffier/quarkus-redis-demo/blob/735f8cdbe579ef5c13631e8ec6e3ddad6821a3cb/src/main/java/me/escoffier/quarkus/supes/HeroService.java[HeroService] クラスを確認してください）："

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "To run the application, just start `mvn quarkus:dev` and open your browser to http://localhost:8080:"
msgstr "アプリケーションの実行は、 `mvn quarkus:dev` を起動し、ブラウザで http://localhost:8080 を開くだけです："

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"To see the cache in action, check the time displayed on the page and refresh the page.\n"
"Don't forget that the cached value is only valid for 10 seconds (as set in `MyRedisCache`).\n"
"So, if you wait 10 seconds, it will recompute the result."
msgstr "キャッシュの動作を見るには、ページに表示されている時間を確認し、ページを更新してください。キャッシュされた値は10秒間だけ有効であることを忘れないでください（ `MyRedisCache` で設定されています）。そのため、10秒待つと結果が再計算されます。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Quarkus comes with a Redis Dev Service that automatically starts a Redis instance on your machine and configures the application. Note that you need to be able to run containers locally to use this feature."
msgstr "QuarkusにはRedis Dev Serviceが付属しており、マシン上でRedisインスタンスを自動的に起動し、アプリケーションを設定します。この機能を使用するには、ローカルでコンテナを実行できる必要があることに注意してください。"

#. type: Title ==
#: _posts/2022-09-07-redis-api-intro.adoc
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"This post briefly introduces the new Redis API and demonstrates its usage with a cache implementation example.\n"
"The complete code is available from this  https://github.com/cescoffier/quarkus-redis-demo[GitHub repo]."
msgstr "この投稿では、新しいRedis APIを簡単に紹介し、キャッシュ実装の例でその使い方を示します。完全なコードはこの link:https://github.com/cescoffier/quarkus-redis-demo[GitHub リポジトリから] 入手できます。"

#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid ""
"The API supports many more features, such as geospatial data, pub/sub, and transactions, which could be used to improve the `getOrSetIfAbsent`  method.\n"
"We will cover more advanced use cases in future posts."
msgstr "APIは、地理空間データ、pub/sub、トランザクションなど、さらに多くの機能をサポートしており、 `getOrSetIfAbsent` メソッドを改善するために使用することができます。より高度な使用例については、今後の投稿で取り上げる予定です。"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "You can find more details about the new API in the:"
msgstr "新しいAPIの詳細については、こちらをご覧ください："

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "https://quarkus.io/guides/redis[Quarkus Getting Started guide]"
msgstr "link:https://quarkus.io/guides/redis[Quarkus入門ガイド]"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "https://quarkus.io/guides/redis-reference[Quarkus Redis Reference guide]"
msgstr "link:https://quarkus.io/guides/redis-reference[Quarkus Redisリファレンスガイド]"

#. type: Plain text
#: _posts/2022-09-07-redis-api-intro.adoc
#, fuzzy
msgid "Also, the Quarkus team is working on integrating https://github.com/quarkusio/quarkus/issues/27785[Redis as a cache implementation]. So, eventually, you will just need to use `@CacheResult`, and let the magic happens."
msgstr "また、Quarkusチームは、 link:https://github.com/quarkusio/quarkus/issues/27785[キャッシュの実装としてRedisを] 統合する作業を行っています。そのため、最終的には、 `@CacheResult` 、魔法をかけるだけでよいことになります。"

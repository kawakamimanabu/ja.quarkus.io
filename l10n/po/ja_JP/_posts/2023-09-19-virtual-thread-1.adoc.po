msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: YAML Front Matter: title
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "When Quarkus meets Virtual Threads"
msgstr "クアルカスとバーチャル・スレッドの出会い"

#. type: YAML Front Matter: synopsis
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy, no-wrap
msgid "What do virtual threads change when building concurrent applications with Quarkus."
msgstr "Quarkusで並行アプリケーションを構築する場合、仮想スレッドによって何が変わるのでしょうか。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 21 offers a new feature that will reshape the development of concurrent applications in Java.\n"
"For over two years, the Quarkus team explored integrating this new feature to ease the development of distributed applications, including microservices and event-driven applications."
msgstr "Java 21では、Javaでの並行アプリケーション開発を再構築する新機能が提供されます。Quarkusチームは2年以上にわたって、マイクロサービスやイベント駆動型アプリケーションなどの分散アプリケーションの開発を容易にするために、この新機能を統合することを検討してきました。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This blog post is the first part of a series of posts and videos demonstrating how to use virtual threads in Quarkus applications.\n"
"The series covers REST, messaging, containers, native compilation, and our plans for the future.\n"
"But first, let's look at virtual threads, what they change, and what you should know about them."
msgstr "このブログ記事は、Quarkusアプリケーションで仮想スレッドを使用する方法を示す一連の投稿とビデオの最初の部分です。このシリーズでは、REST、メッセージング、コンテナ、ネイティブコンパイル、将来の計画について説明します。その前に、仮想スレッドについて、仮想スレッドによって何が変わるのか、仮想スレッドについて知っておくべきことを説明します。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The Java world before Java 21"
msgstr "Java21以前のJavaの世界"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"At the beginning of the Java time, Java had _green threads_.\n"
"Green threads were user-level threads scheduled by the Java virtual machine (JVM) instead of natively by the underlying operating system (OS).\n"
"They emulated multithreaded environments without relying on native OS abilities.\n"
"They were managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support.\n"
"Green threads were briefly available in Java between 1997 and 2000.\n"
"I used green threads; they did not leave me with a fantastic memory."
msgstr "Java時代の初め、Javaには _グリーンスレッドが_ ありました。グリーン・スレッドは、基盤となるオペレーティング・システム（OS）がネイティブにスケジューリングするのではなく、Java仮想マシン（JVM）がスケジューリングするユーザーレベルのスレッドでした。OSネイティブの能力に依存することなく、マルチスレッド環境をエミュレートします。カーネル空間ではなくユーザー空間で管理されるため、ネイティブのスレッドサポートを持たない環境でも動作します。グリーンスレッドは、1997年から2000年にかけてJavaで短期間利用可能でした。私はグリーンスレッドを使っていましたが、素晴らしい記憶を残すことはできませんでした。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"In Java 1.3, released in 2000, Java made a big step forward and started integrating OS threads.\n"
"So, the threads are managed by the operating system.\n"
"It is still the model we are using today.\n"
"Each time a Java application creates a thread, a platform thread is created, which wraps an OS thread.\n"
"So, creating a platform thread creates an OS thread, and **blocking a platform thread blocks an OS thread**."
msgstr "2000年にリリースされたJava 1.3で、Javaは大きく前進し、OSスレッドの統合を開始しました。つまり、スレッドはオペレーティング・システムによって管理されます。これは現在でも私たちが使用しているモデルです。Javaアプリケーションがスレッドを作成するたびに、OSスレッドをラップするプラットフォーム・スレッドが作成されます。そのため、プラットフォーム・スレッドを作成するとOSスレッドが作成され、 *プラットフォーム・スレッドをブロックするとOSスレッドがブロック* されます。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When you use a Java application framework, you rarely create threads yourself.\n"
"It is done for you by the framework.\n"
"For example, when your application receives an HTTP request, the framework creates or reuses a platform thread (and so an OS thread) and executes the processing on that thread.\n"
"The whole processing runs on this thread, and the thread cannot be reused until the processing completes (so the response is sent back).\n"
"When the processing executes a blocking I/O operation, like calling another service, writing to the file system, or interacting with a database, the thread is blocked, waiting for the response.\n"
"As mentioned above, the OS thread is also blocked while waiting.\n"
"When this response is received, the processing continues:"
msgstr "Javaアプリケーション・フレームワークを使う場合、自分でスレッドを作成することはほとんどありません。フレームワークが代わりに行ってくれます。例えば、アプリケーションがHTTPリクエストを受信すると、フレームワークはプラットフォーム・スレッド（つまりOSスレッド）を作成または再利用し、そのスレッド上で処理を実行します。すべての処理はこのスレッド上で実行され、処理が完了するまで（つまりレスポンスが送り返されるまで）スレッドを再利用することはできません。処理が他のサービスを呼び出したり、ファイルシステムに書き込んだり、データベースとやりとりしたりするようなブロッキングI/O操作を実行する場合、スレッドはブロックされ、応答を待ちます。前述のように、OSスレッドも待機中にブロックされます。この応答を受け取ると、処理が続行されます："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This model has the advantage of being simple to program with.\n"
"The code follows an imperative model.\n"
"The code is executed sequentially.\n"
"It's simple to write, simple to reason about.\n"
"For example, the following snippet shows how you receive an HTTP request, call another HTTP service, and return a response with Quarkus.\n"
"It follows the sequence diagram from above."
msgstr "このモデルはプログラミングが簡単という利点があります。コードは命令型モデルに従います。コードは順次実行されます。書くのも簡単、推論するのも簡単です。例えば、次のスニペットは、QuarkusでHTTPリクエストを受信し、別のHTTPサービスを呼び出し、レスポンスを返す方法を示しています。上記のシーケンス図に従っています。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But there is a limit to that imperative model.\n"
"You can only handle _n_ requests concurrently, with _n_ the number of threads the framework can create.\n"
"OS threads are expensive.\n"
"They consume memory (around 1 Mb per thread), are expensive to create, use CPU to schedule them…\n"
"Frameworks use thread pools to allow reusing idle threads, but when the concurrency level exceeds your number of threads, you start pilling up requests, increasing the response time, and, in the worst case, even rejecting requests.\n"
"Increasing the thread pool size and, consequently, swelling the memory usage can blow up your Cloud bill and deployment density.\n"
"Futhermore, adding more threads may not even improve the concurrency as explained by the https://youtu.be/07V08SB1l8c?t=142[Little Law]."
msgstr "しかし、この命令型モデルには限界があります。同時に処理できるリクエストは _n個まで_ で、 _nは_ フレームワークが作成できるスレッド数です。OSスレッドは高価です。スレッドはメモリを消費し（1スレッドあたり約1MB）、作成にコストがかかり、スケジューリングにCPUを使います......フレームワークはスレッドプールを使って、アイドル状態のスレッドを再利用できるようにしますが、同時実行レベルがスレッド数を超えると、リクエストを山積みにし始め、応答時間が長くなり、最悪の場合、リクエストを拒否することさえあります。スレッドプールのサイズを大きくし、その結果、メモリ使用量を増やすと、クラウドの請求とデプロイメントの密度が高くなります。さらに、スレッドを増やしても、 link:https://youtu.be/07V08SB1l8c?t=142[リトル] の法則で説明されているように、同時実行性が改善されるとは限りません。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive movement proposed an alternative model to work around that issue.\n"
"It promotes the usage of non-blocking I/O and asynchronous development models to use resources (CPU and memory) more efficiently.\n"
"With the reactive model, **a single thread can handle multiple concurrent requests**.\n"
"So, instead of having a large pool of threads, you have a minimum number of threads (generally equal to the number of CPU cores).\n"
"This small amount of threads, often named event loops, handles all your requests.\n"
"When a request is received, it calls the processing code on one of these threads.\n"
"When the processing needs to execute an I/O operation, instead of using blocking I/O, it schedules the operations and passes a **continuation**.\n"
"This continuation is the code to be invoked when the I/O completes, so basically, the rest of the processing:"
msgstr "リアクティブ・ムーブメントは、この問題を回避するための代替モデルを提案しました。リソース（CPUとメモリ）をより効率的に使用するために、ノンブロッキングI/Oと非同期開発モデルの使用を推進しています。リアクティブ・モデルでは、 *1つのスレッドが複数の同時リクエストを処理* できます。そのため、スレッドの大規模なプールを持つ代わりに、最小数のスレッド（一般にCPUコア数に等しい）を持ちます。この少量のスレッドは、しばしばイベントループと呼ばれ、すべてのリクエストを処理します。リクエストを受け取ると、これらのスレッドの一つで処理コードを呼び出します。処理が I/O 操作を実行する必要があるときは、ブロッキング I/O を使う代わりに、処理をスケジュールして *継続を* 渡します。この継続は、I/O が完了したときに呼び出されるコードです："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"The reactive model is highly efficient, but there is a catch.\n"
"As mentioned, you need to write your code as a chain of continuations.\n"
"While there are multiple approaches, such as callbacks, futures, reactive programming, or co-routines, it makes the code harder to reason about.\n"
"The code must be structured in a way that may not be natural for every developer.\n"
"That limits the adoption of this solution.\n"
"Also, the code can not only block during I/O operation; it must not execute lengthy processing (what we call monopolization).\n"
"The model's efficiency comes from the ability to process many requests concurrently.\n"
"If the thread is used for a long time, it does not allow the other requests to be processed, and, as for the imperative model, you start piling up requests."
msgstr "リアクティブ・モデルは非常に効率的ですが、キャッチがあります。前述したように、コードを継続の連鎖として書く必要があります。コールバック、フューチャー、リアクティブプログラミング、コ・ルーチンなど複数のアプローチがありますが、コードを推論するのが難しくなります。コードは、すべての開発者にとって自然ではない方法で構造化されなければなりません。そのため、このソリューションの採用には限界があります。また、コードはI/O操作中にブロックするだけでなく、長時間の処理（私たちが独占と呼ぶもの）を実行してはなりません。このモデルの効率性は、多くのリクエストを同時に処理できることに由来します。スレッドが長時間使用されると、他のリクエストを処理することができなくなり、命令型モデルと同様に、リクエストを積み重ねるようになります。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To illustrate the difference between the imperative and reactive model, the following snippet is equivalent to the previous one: it receives an HTTP request, calls another HTTP service, and returns a response. But this time, it uses the Quarkus reactive model."
msgstr "命令型モデルとリアクティブ・モデルの違いを説明するために、次のスニペットは前のものと同じです：HTTPリクエストを受け取り、別のHTTPサービスを呼び出し、レスポンスを返します。しかし今回は、Quarkusのリアクティブモデルを使用しています。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "An application with this code handles more concurrent requests and uses less memory than the imperative one, but, the development model is different."
msgstr "このコードを使ったアプリケーションは、命令型のものより多くの同時リクエストを処理し、より少ないメモリーしか使いませんが、開発モデルは異なります。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Most of the time, the reactive and imperative models are opposed.\n"
"This does not need to be the case.\n"
"Quarkus uses a reactive core and lets you decide if you want to use the reactive or imperative model.\n"
"Check the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article] for more details about this ability."
msgstr "たいていの場合、反応型と命令型は対立します。しかし、その必要はありません。Quarkusはリアクティブコアを使用しており、リアクティブモデルを使用するか、命令型モデルを使用するかを決めることができます。この機能の詳細については、 link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block'] の記事を確認してください。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What do virtual threads change?"
msgstr "仮想スレッドは何を変えるのですか？"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Java 19 introduced a new type of thread: virtual threads.\n"
"In Java 21, this API became generally available."
msgstr "Java 19では、仮想スレッドという新しいタイプのスレッドが導入されました。Java 21では、このAPIが一般的に利用できるようになりました。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what are these virtual threads?\n"
"Virtual threads reuse the idea of the reactive paradigm but allow an imperative development model.\n"
"You get the benefits from the reactive and imperative models without the drawbacks!"
msgstr "しかし、この仮想スレッドとは何でしょうか？仮想スレッドはリアクティブ・パラダイムのアイデアを再利用しますが、命令型開発モデルを可能にします。リアクティブモデルと命令型モデルの利点を、欠点なしに得ることができます！"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Like with green threads, virtual threads are managed by the JVM.\n"
"Virtual threads occupy less space than platform threads in memory.\n"
"Hence, using more virtual threads than platform threads simultaneously becomes possible without blowing up the memory.\n"
"Virtual threads are supposed to be disposable entities that we create when we need them; pooling or reusing them for different tasks is discouraged."
msgstr "グリーンスレッドと同様に、仮想スレッドはJVMによって管理されます。仮想スレッドは、メモリ内でプラットフォーム・スレッドよりも少ないスペースを占有します。したがって、同時にプラットフォーム・スレッドよりも多くの仮想スレッドを使用することが、メモリを消費することなく可能になります。仮想スレッドは、必要なときに作成する使い捨てのエンティティであり、異なるタスクのためにプールしたり再利用したりすることは推奨されません。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But what does it change?\n"
"Blocking a virtual thread is, in general, very cheap!\n"
"There is a pinch of magic that makes virtual thread very appealing.\n"
"When your code running on a virtual thread needs to execute an I/O operation, it uses a blocking API.\n"
"So, the code waits for the result, as with the imperative model.\n"
"However, since the JVM manages virtual threads, no underlying OS thread is blocked when they perform this blocking operation.\n"
"The state of the virtual thread is stored in the heap, and another virtual thread can be executed on the same Java platform (carrier) thread, exactly as in the reactive model.\n"
"When the I/O operation completes, the virtual thread becomes executable again, and when a carrier thread is available, the state of the virtual thread is restored, and the execution continues.\n"
"For the developer, this magic is invisible!\n"
"You just write synchronous code, and it's executed like proper reactive code without blocking the OS thread."
msgstr "でも何が変わるの？仮想スレッドをブロックすることは、一般的に、非常に安価です！仮想スレッドを非常に魅力的にする魔法のピンチがあります。仮想スレッド上で動作するコードがI/O操作を実行する必要がある場合、ブロッキングAPIを使用します。つまり、コードは命令型モデルと同じように結果を待ちます。しかし、JVMは仮想スレッドを管理するので、このブロッキング操作を実行するときに、基盤となるOSスレッドがブロックされることはありません。仮想スレッドの状態はヒープに保存され、リアクティブ・モデルとまったく同じように、同じJavaプラットフォーム（キャリア）のスレッド上で別の仮想スレッドを実行することができます。I/O操作が完了すると、仮想スレッドは再び実行可能になり、キャリア・スレッドが利用可能になると、仮想スレッドの状態が復元され、実行が続行されます。開発者にとって、このマジックは目に見えません！同期コードを書くだけで、OSスレッドをブロックすることなく、適切なリアクティブコードのように実行されます。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Your code runs on top of virtual threads, but under the hood, only a few carrier threads execute them."
msgstr "あなたのコードは仮想スレッドの上で実行されるが、その裏では少数のキャリア・スレッドだけがそれを実行する。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To summarize, virtual threads are:"
msgstr "要約すると、仮想スレッドとは"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lightweight - you can have a LOT of them"
msgstr "軽量 - たくさん持てる"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to create - no need to pool them anymore"
msgstr "プールはもう必要ない。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Cheap to block when using blocking operations - blocking a virtual thread does not block the underlying OS thread when executing I/O operations"
msgstr "I/O操作の実行時に仮想スレッドをブロックしても、OSスレッドはブロックされない。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "How can you use virtual threads in Quarkus?"
msgstr "Quarkusで仮想スレッドを使用する方法を教えてください。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Using virtual threads in Quarkus is straightforward.\n"
"You only need to use the `@RunOnVirtualThread` annotation.\n"
"It indicates to Quarkus to invoke the annotated method on a virtual thread instead of a regular platform thread."
msgstr "Quarkusで仮想スレッドを使用するのは簡単です。 `@RunOnVirtualThread` アノテーションを使用するだけです。このアノテーションは、Quarkusに対して、通常のプラットフォームスレッドではなく、仮想スレッド上でアノテーションされたメソッドを呼び出すことを示します。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This new strategy extends the _smart dispatch_ explained in the https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block' article]. In addition to the signature, Quarkus now looks for this specific annotation.\n"
"If your JVM does not provide virtual thread support, it does fall back to platform threads."
msgstr "この新しい戦略は、 link:https://quarkus.io/blog/resteasy-reactive-smart-dispatch/['to block or not to block'の記事] で説明した _スマートディスパッチを_ 拡張したものです。シグネチャに加えて、Quarkusはこの特定のアノテーションを探します。JVMが仮想スレッドサポートを提供していない場合、プラットフォームスレッドにフォールバックします。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Let's rewrite the same example using a virtual thread (the full code is available in https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[this repository]):"
msgstr "同じ例を仮想スレッドを使って書き直してみよう（完全なコードは link:https://github.com/quarkusio/virtual-threads-demos/tree/main/rest-example[このリポジトリ] にある）："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "It's the code from the first snippet (the imperative one), but its execution model is closer to the reactive one:"
msgstr "これは最初のスニペット（命令型）のコードだが、実行モデルはリアクティブに近い："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For every request, a virtual thread is created.\n"
"When a carrier thread is idle, the virtual thread is mounted on that carrier thread and executed.\n"
"When the virtual thread needs to execute the I/O (the call to the remote service), it only blocks the virtual thread.\n"
"The carrier thread is released, and can mount another virtual thread (like the one handling the second request while the I/O from the first one is pending).\n"
"When the I/O completes, a carrier thread (not necessarily the same one) restores the blocked virtual thread and continues its execution until the response is ready to be sent back to the client.\n"
"The code snippet works as described because the Quarkus REST client is virtual-thread-friendly; we will see exceptions in the next section."
msgstr "リクエストごとに仮想スレッドが作成されます。キャリアスレッドがアイドル状態のとき、仮想スレッドはそのキャリアスレッドにマウントされ、実行されます。仮想スレッドが I/O (リモートサービスの呼び出し) を実行する必要があるときは、仮想スレッドだけをブロックします。キャリアスレッドは解放され、別の仮想スレッドをマウントすることができます（最初のスレッドからのI/Oが保留されている間、2番目のリクエストを処理するスレッドのように）。I/Oが完了すると、キャリアスレッド（同じものである必要はありません）がブロックされた仮想スレッドを復元し、レスポンスがクライアントに送り返す準備ができるまで実行を継続します。Quarkus RESTクライアントは仮想スレッドフレンドリーなので、このコードスニペットは説明どおりに動作します。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads in Quarkus are not limited to HTTP endpoints.\n"
"The following snippet shows how you can process Kafka/Pulsar/AMQP messages on virtual threads:"
msgstr "Quarkusの仮想スレッドはHTTPエンドポイントに限定されません。次のスニペットは、仮想スレッドでKafka/Pulsar/AMQPメッセージを処理する方法を示しています："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Attentive readers may have seen that the virtual thread integration relies on _reactive_ extensions.\n"
"These extensions provide more flexibility (such as the control on which thread the processing is executed) to integrate virtual threads properly and efficiently.\n"
"It's important to understand that for the developer, it's invisible (except the `@RunOnVirtualThread` annotation)."
msgstr "注意深い読者は、仮想スレッドの統合が _リアクティブ_ 拡張に依存していることを見たかもしれません。これらの拡張は、仮想スレッドを適切かつ効率的に統合するための柔軟性（どのスレッドで処理を実行するかの制御など）を提供します。開発者にとっては（ `@RunOnVirtualThread` アノテーションを除いて）目に見えないものであることを理解することが重要です。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Five things you need to know before using virtual threads for everything"
msgstr "仮想スレッドを使用する前に知っておくべき5つのこと"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Well, you probably see this coming.\n"
"There is no free lunch.\n"
"You need to know a few things before utilizing virtual threads for everything.\n"
"These are the reasons why, currently, there is no global switch to run exclusively on virtual threads in Quarkus."
msgstr "まあ、こうなることは予想がつくでしょう。フリーランチはありません。仮想スレッドをすべて利用する前に、いくつかのことを知っておく必要があります。これが、Quarkusに仮想スレッドのみで実行するグローバルスイッチがない理由です。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "1. Pinning"
msgstr ""
"\n"
" ピン留め"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As described above, when a virtual thread executes a blocking operation, it gets unmounted from the carrier thread, preventing the carrier thread from being blocked.\n"
"However, sometimes, the virtual thread cannot be unmounted because its state cannot be stored in the heap.\n"
"It happens when the thread holds a monitor lock or has a native call in the stack:"
msgstr "上述したように、仮想スレッドがブロッキング処理を実行すると、仮想スレッドはキャリアスレッドからアンマウントされ、キャリアスレッドがブロックされるのを防ぎます。しかし、仮想スレッドの状態をヒープに保存できないために、仮想スレッドをアンマウントできないことがあります。これは、スレッドがモニターロックを保持しているか、スタックにネイティブコールがある場合に発生します："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "In this case, the carrier thread is blocked, so the OS thread is blocked:"
msgstr "この場合、キャリア・スレッドはブロックされているので、OSスレッドもブロックされている："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Unfortunately, as of today, lots of Java libraries are pinning the carrier thread.\n"
"The Quarkus team and Red Hat, in general, have patched many libraries (such as Narayana (the transaction manager of Quarkus) or Hibernate ORM) to avoid pinning.\n"
"However, when you use a library, be careful.\n"
"It will take time until all the code gets reworked in a more virtual-thread-friendly way."
msgstr "残念ながら、今日現在、多くのJavaライブラリがキャリアスレッドを固定化しています。QuarkusチームとRed Hatは、一般的に、多くのライブラリ（Narayana（Quarkusのトランザクションマネージャ）やHibernate ORMなど）にパッチを適用し、ピニングを回避しています。しかし、ライブラリを使用する際には注意が必要です。すべてのコードがより仮想スレッドに適した方法で作り直されるまで、時間がかかります。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "2. Monopolization"
msgstr ""
"\n"
" 独占"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"As for the reactive model, if the virtual thread executes intensive and long computation, it monopolizes that carrier.\n"
"The virtual thread scheduler is not preemptive.\n"
"So it cannot interrupt a running thread.\n"
"It needs to wait for an I/O or the completion of the computation.\n"
"Until then, this carrier thread cannot execute other virtual threads:"
msgstr "リアクティブ・モデルに関しては、仮想スレッドが集中的で長い計算を実行する場合、そのキャリアを独占します。仮想スレッドスケジューラはプリエンプティブではありません。そのため、実行中のスレッドに割り込むことはできません。I/Oか計算の完了を待つ必要があります。それまでは、このキャリアスレッドは他の仮想スレッドを実行できません："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Using a dedicated platform thread pool might be wiser when executing long computations."
msgstr "長い計算を実行する場合は、専用のプラットフォーム・スレッド・プールを使う方が賢明かもしれない。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "3. Carrier thread pool elasticity"
msgstr ""
"\n"
" キャリア糸プールの伸縮性"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "When there is pinning or monopolization, the JVM may create new carrier threads (as illustrated on the previous picture) to avoid having too many unscheduled virtual threads."
msgstr "ピン留めや独占がある場合、JVMはスケジュールされていない仮想スレッドが増えすぎないように、新しいキャリア・スレッドを作成することがある（前の図に示されているように）。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"These creations are creating platform/OS threads.\n"
"So, it's expensive and uses memory.\n"
"You especially need to pay attention to the second point.\n"
"You may hit the memory limit if you run on low resources and your code is not very virtual-thread-friendly, meaning that you should always check for pinning, monopolization, and memory usage.\n"
"If you don't, in a container with memory constraints, the application can be killed."
msgstr "これらの作成は、プラットフォーム/OSスレッドを作成しています。そのため、コストがかかり、メモリも使用します。特に2番目の点には注意が必要です。少ないリソースで実行し、コードがあまり仮想スレッドに優しくない場合、メモリ制限にぶつかる可能性があります。つまり、ピン留め、独占、メモリ使用量を常にチェックする必要があります。メモリ制約のあるコンテナでは、そうしないとアプリケーションが強制終了する可能性があります。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "4. Object pooling"
msgstr ""
"\n"
" オブジェクトプール"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"For years, threads were scarce resources.\n"
"It was recommended to pool them and reuse them.\n"
"This good practice has encouraged the use of thread locals as an object-pooling mechanism.\n"
"Like https://github.com/FasterXML/jackson-core/issues/919[Jackson] or Netty, many libraries store expensive objects in thread locals.\n"
"These objects can only be accessed by the code running on the thread in which the objects are stored.\n"
"Because the number of threads was limited, it capped the number of creation.\n"
"Also, because threads were reused, the objects were cached and reused.\n"
"Unfortunately, these two assumptions are not valid with virtual threads:\n"
"You can have a lot of them, they are not reused.\n"
"It's even discouraged to pool them.\n"
"Thus, libraries utilizing these pooling patterns may underperform when using virtual threads.\n"
"You will see many allocations of large objects, as every virtual thread will get its own instance of the object."
msgstr "何年もの間、スレッドは希少資源でした。スレッドをプールして再利用することが推奨されていました。このグッドプラクティスは、オブジェクトプールのメカニズムとしてスレッドローカルを使用することを奨励しました。 link:https://github.com/FasterXML/jackson-core/issues/919[Jacksonや] Nettyのように、多くのライブラリは高価なオブジェクトをスレッドローカルに格納します。これらのオブジェクトにアクセスできるのは、オブジェクトが格納されているスレッドで実行されているコードだけです。スレッド数が制限されているため、作成数に上限があります。また、スレッドは再利用されるため、オブジェクトはキャッシュされ、再利用されます。残念ながら、仮想スレッドではこの2つの前提が成り立ちません：スレッドはたくさんあっても再利用されません。仮想スレッドはたくさんあっても再利用されません。したがって、これらのプール・パターンを利用するライブラリは、仮想スレッドを使用する際にパフォーマンスが低下する可能性があります。すべての仮想スレッドがオブジェクトのインスタンスを取得するため、大きなオブジェクトの割り当てが多くなります。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Replacing this pattern is not an easy task.\n"
"As an example, this https://github.com/FasterXML/jackson-core/pull/1064[PR] from Mario Fusco proposes an SPI for Jackson.\n"
"Quarkus will implement the SPI to provide a virtual-thread-friendly pool mechanism."
msgstr "このパターンを置き換えるのは簡単なことではありません。一例として、Mario Fuscoによるこの link:https://github.com/FasterXML/jackson-core/pull/1064[PR] は、Jackson用のSPIを提案しています。QuarkusはSPIを実装し、仮想スレッドに優しいプールメカニズムを提供します。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "5. Stressing thread safety"
msgstr ""
"\n"
" 糸の安全性を強調"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"Virtual threads provide a new way to build concurrent applications in Java.\n"
"You are not limited by the number of threads in the pool.\n"
"You do not have to use asynchronous development models."
msgstr "仮想スレッドは、Javaで並行アプリケーションを構築する新しい方法を提供します。プール内のスレッド数に制限されません。非同期開発モデルを使用する必要はありません。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"But, before rewriting your application to leverage this new mechanism, ensure the code is thread-safe.\n"
"Many libraries and frameworks do not allow concurrent access to some objects.\n"
"For example, database connections should not be accessed concurrently.\n"
"You must be cautious when you have many virtual threads, especially when using the structured concurrency API (still in preview in Java 21)."
msgstr "しかし、この新しいメカニズムを活用するためにアプリケーションを書き直す前に、コードがスレッドセーフであることを確認してください。多くのライブラリやフレームワークは、オブジェクトによっては同時アクセスを許可していません。例えば、データベース接続は同時アクセスすべきではありません。特に構造化同時実行API（Java 21ではまだプレビュー中）を使用する場合は、多くの仮想スレッドを持つ場合に注意する必要があります。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"When using structured concurrency, it becomes easy to run tasks in _parallel_.\n"
"However, you must be absolutely sure that these tasks to not access a shared state which do not support concurrent access:"
msgstr "構造化並行処理を使用すると、タスクの _並列_ 実行が容易になります。ただし、これらのタスクが同時アクセスをサポートしていない共有状態にアクセスしないことを絶対に確認する必要があります："

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Summary and what's next"
msgstr "総括と今後の課題"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"This post described the new kind of thread available in Java 21 and how to use them in Quarkus.\n"
"Virtual threads are not a silver bullet, and while they can improve the concurrency, there are a few limitations you need to be aware of:"
msgstr "この投稿では、Java 21で利用できる新しい種類のスレッドと、Quarkusでの使用方法について説明しました。仮想スレッドは銀の弾丸ではなく、並行性を向上させることはできますが、注意しなければならない制限がいくつかあります："

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Many libraries are pinning the carrier thread; it will take time until the Java world becomes virtual-thread-friendly."
msgstr "Javaの世界が仮想スレッドフレンドリーになるまでには時間がかかるだろう。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Lengthy computations must be analyzed cautiously to avoid monopolization issues."
msgstr "長い計算は、独占の問題を避けるために慎重に分析しなければならない。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The carrier thread pool elasticity may result in high memory usage."
msgstr "キャリア・スレッド・プールの弾力性により、メモリ使用量が多くなる可能性がある。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "The thread-local object polling pattern can have terrible consequences on the allocations and memory usage."
msgstr "スレッド・ローカル・オブジェクト・ポーリング・パターンは、割り当てとメモリ使用量にひどい結果をもたらす可能性がある。"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "Virtual threads do not prevent thread safety issues."
msgstr "仮想スレッドはスレッドセーフの問題を防ぐものではない。"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid ""
"It is the first part (and the most boring, hopefully) post of a multiple-post series.\n"
"Next, we will cover:"
msgstr "この記事は、複数回に分けてお送りするシリーズの第1回目（そしてできれば最も退屈な）です。次に取り上げるのは"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-2/[How to write a crud application using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-2/[仮想スレッドを使った粗悪なアプリケーションの書き方]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
msgid "https://quarkus.io/blog/virtual-threads-3/[How to test virtual threads applications]"
msgstr "link:https://quarkus.io/blog/virtual-threads-3/[仮想スレッドアプリケーションのテスト方法]"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-4/[How to process Kafka messages using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-4/[仮想スレッドを使用してKafkaメッセージを処理する方法]"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-5/[How to build a native executable when using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-5/[仮想スレッド使用時のネイティブ実行可能ファイルのビルド方法]"

#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "https://quarkus.io/blog/virtual-threads-6/[How to containerize an application using virtual threads]"
msgstr "link:https://quarkus.io/blog/virtual-threads-6/[仮想スレッドを使用してアプリケーションをコンテナ化する方法]"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "What are we exploring to improve the virtual thread support in Quarkus (_to be published_)"
msgstr "Quarkusの仮想スレッドサポートを改善するために模索していること _（公開予定）_"

#. type: Plain text
#: _posts/2023-09-19-virtual-thread-1.adoc
#, fuzzy
msgid "To know more about the virtual thread support in Quarkus, check the https://quarkus.io/guides/virtual-threads[Virtual thread reference guide]."
msgstr "Quarkusの仮想スレッドサポートの詳細については、 link:https://quarkus.io/guides/virtual-threads[仮想スレッドリファレンスガイド] を参照してください。"

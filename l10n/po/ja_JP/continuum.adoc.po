msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: continuum.adoc
msgid "Versatility"
msgstr "多用途性"

#: continuum.adoc
msgid "The client-server architecture has been the de-facto standard for building applications for years. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, function as a service, and AI-infused applications are now central players in modern systems."
msgstr ""
"クライアント サーバー アーキテクチャは、長年にわたりアプリケーション構築の事実上の標準でした。\n"
"しかし、大きな変化が起こりました。<em>1 つのモデルがすべてを支配する</em>時代は終わりました。新しいアプリケーションとアーキテクチャ スタイルが登場し、コードの記述方法やアプリケーションの展開および実行方法が変わりました。\n"
"HTTP マイクロサービス、リアクティブ アプリケーション、イベント駆動型アーキテクチャ、サービスとしての機能、AI を組み込んだアプリケーションは、現在、最新のシステムの中心的な存在となっています。"

#: continuum.adoc
msgid ""
"layout: feature\n"
"title: Versatility\n"
"subtitle:\n"
"permalink: /versatility/\n"
"intro: The client-server architecture has been the de-facto standard for building applications for years. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, function as a service, and AI-infused applications are now central players in modern systems.\n"
"icon-light: assets/images/about/icon-versatility.svg\n"
"icon-dark: assets/images/about/icon-versatility-dark.svg\n"
"---"
msgstr ""
"layout: feature\n"
"title: 多用途性\n"
"subtitle:\n"
"permalink: /versatility/\n"
"intro: The client-server architecture has been the de-facto standard for building applications for years. But a significant shift happened. The <em>one model rules them all</em> age is over. A new range of applications and architectural styles have emerged and transformed how code is written and how applications are deployed and executed. HTTP microservices, reactive applications, event-driven architecture, function as a service, and AI-infused applications are now central players in modern systems.\n"
"icon-light: assets/images/about/icon-versatility.svg\n"
"icon-dark: assets/images/about/icon-versatility-dark.svg\n"
"---"

#: continuum.adoc
msgid ""
"Quarkus has been designed with this new world in mind and provides first-class support for these paradigms.\n"
"That does not mean you cannot build monoliths with Quarkus; you can do it smoothly.\n"
"On the contrary, it means that the Quarkus development model morphs to adapt itself to the type of application you are developing: monoliths, microservices, CLIs, event-driven applications, functions, Kubernetes operators..."
msgstr ""
"Quarkus は、この新しい世界を念頭に置いて設計されており、これらのパラダイムに対する第一級のサポートを提供します。\n"
"これは、Quarkus でモノリスを構築できないという意味ではありません。スムーズに構築できます。\n"
"それどころか、Quarkus 開発モデルは、モノリス、マイクロサービス、CLI、イベント駆動型アプリケーション、関数、Kubernetes オペレーターなど、開発中のアプリケーションの種類に合わせて変化します。"

#: continuum.adoc
msgid "HTTP microservices"
msgstr "HTTPマイクロサービス"

#: continuum.adoc
msgid ""
"Let’s start with the basics: HTTP microservices. You need to develop an HTTP endpoint, often called REST.\n"
"You process incoming HTTP requests, and to do so, you usually need to rely on other services, such as databases or other HTTP services.\n"
"Let’s take a very simple application handling _elements_ from the https://en.wikipedia.org/wiki/Periodic_table[periodic table]."
msgstr ""
"まずは基本から始めましょう。HTTP マイクロサービスです。HTTP エンドポイント (REST と呼ばれることが多い) を開発する必要があります。\n"
"受信した HTTP リクエストを処理するには、通常、データベースや他の HTTP サービスなどの他のサービスに依存する必要があります。\n"
"https://en.wikipedia.org/wiki/Periodic_table[周期表] の _要素_ を処理する非常に単純なアプリケーションを見てみましょう。"

#: continuum.adoc
msgid "Using Quarkus REST and Hibernate ORM with Panache, the code would be something like:"
msgstr "Quarkus REST と Hibernate ORM with Panache を使用すると、コードは次のようになります:"

#: continuum.adoc
msgid "Using Quarkus REST"
msgstr "Using Quarkus REST"

#: continuum.adoc
msgid "Using the Spring MVC compatibility layer"
msgstr "Spring MVC互換性レイヤー"

#: continuum.adoc
msgid ""
"This development model should look familiar if you are a Java EE or Spring user.\n"
"You expose a resource containing methods annotated with `@GET`, `@POST` to handle the different requests.\n"
"Quarkus also proposes a https://quarkus.io/guides/spring-web[compatibility layer with Spring APIs], so you can also use `@GetMapping` and `@RestController`."
msgstr ""
"Java EE または Spring ユーザーであれば、この開発モデルはおなじみのはずです。\n"
"さまざまなリクエストを処理するために、`@GET`、`@POST` でアノテーションされたメソッドを含むリソースを公開します。\n"
"Quarkus は https://quarkus.io/guides/spring-web[Spring API との互換性レイヤー] も提供しているため、`@GetMapping` と `@RestController` も使用できます。"

#: continuum.adoc
msgid ""
"You can use the JPA entity manager directly.\n"
"You can also use Panache, an alternative that removes boilerplate and exposes active records or repository models.\n"
"With Panache, the `Element` class would be as simple as:"
msgstr ""
"JPA エンティティ マネージャーを直接使用できます。\n"
"また、定型句を削除し、アクティブレコードまたはリポジトリ モデルを公開する代替手段である Panache を使用することもできます。\n"
"Panache を使用すると、 `Element` クラスは次のように単純になります。"

#: continuum.adoc
msgid ""
"Microservices tend to come in systems.\n"
"Let’s now imagine you need to access another HTTP endpoint.\n"
"You can use a _low-level_ HTTP client directly; this is nothing more than repeating boilerplate code.\n"
"Quarkus provides a way to call HTTP endpoints easily using the https://quarkus.io/guides/rest-client[MicroProfile Rest Client API].\n"
"First, declare your service as follows:"
msgstr ""
"マイクロサービスはシステムに組み込まれる傾向があります。\n"
"別の HTTP エンドポイントにアクセスする必要があると仮定しましょう。\n"
"_低レベル_ HTTP クライアントを直接使用できます。これは定型コードを繰り返すだけです。\n"
"Quarkus は、https://quarkus.io/guides/rest-client[MicroProfile Rest Client API] を使用して HTTP エンドポイントを簡単に呼び出す方法を提供します。\n"
"まず、次のようにサービスを宣言します。"

#: continuum.adoc
msgid ""
"Just add a method and use annotations to describe the behavior for each call you intend to do.\n"
"Then, in your resource/controller, just use the `ElementService` interface:"
msgstr ""
"メソッドを追加し、アノテーションを使用して、実行する各呼び出しの動作を記述するだけです。\n"
"次に、リソース/コントローラーで、`ElementService` インターフェイスを使用します。"

#: continuum.adoc
msgid ""
"You may wonder where the URL is configured, as it’s not in the code.\n"
"It should not be hard-coded because the URL likely depends on the environment.\n"
"The URL is configured in the application configuration:"
msgstr ""
"URL はコード内にはないので、どこで設定されるのか疑問に思うかもしれません。\n"
"URL は環境に依存する可能性が高いため、ハードコードしないでください。\n"
"URL はアプリケーション構成で設定されます。"

#: continuum.adoc
msgid ""
"The URL can be updated during the deployment or at launch time using system properties or environment variables.\n"
"You can even use https://quarkus.io/guides/stork[service discovery and selection].\n"
"Quarkus is not limited to HTTP.\n"
"You can use https://quarkus.io/guides/grpc-getting-started[gRPC] or https://quarkus.io/guides/smallrye-graphql[GraphQL], two prominent alternatives in the microservice space."
msgstr ""
"URL は、システム プロパティまたは環境変数を使用して、デプロイ中または起動時に更新できます。\n"
"https://quarkus.io/guides/stork[サービスの検出と選択] を使用することもできます。\n"
"Quarkus は HTTP に限定されません。\n"
"マイクロサービス分野では、https://quarkus.io/guides/grpc-getting-started[gRPC] または https://quarkus.io/guides/smallrye-graphql[GraphQL] という 2 つの主要な代替手段を使用できます。"

#: continuum.adoc
msgid "Being reactive"
msgstr "リアクティブであること"

#: continuum.adoc
msgid ""
"Application requirements have changed drastically over the last few years.\n"
"Reactive architecture is increasingly becoming the preferred approach for any application to succeed in the era of cloud computing, Big Data, or IoT.\n"
"Today’s users embrace applications with milliseconds of response time, 100% uptime, lower latency, push data instead of pull, higher throughput, resilience, and elasticity.\n"
"However, these features are nearly impossible to achieve using yesterday’s software architecture without a considerable investment in resources, infrastructure, and tooling.\n"
"The world has changed, and having dozens of servers, long response times (> 500 ms), and downtime due to maintenance or waterfalls of failures does not meet the expected user experience.\n"
"We need to build _better_ distributed systems, and that’s the motto of _reactive systems._"
msgstr ""
"アプリケーションの要件は、ここ数年で劇的に変化しました。\n"
"リアクティブ アーキテクチャは、クラウド コンピューティング、ビッグ データ、IoT の時代にアプリケーションが成功するための、ますます好ましいアプローチになりつつあります。\n"
"今日のユーザーは、応答時間が数ミリ秒、稼働率が 100%、レイテンシが低い、プルではなくプッシュ データ、スループットが高く、回復力と弾力性があるアプリケーションを採用しています。\n"
"ただし、これらの機能は、リソース、インフラストラクチャ、ツールにかなりの投資をしなければ、従来のソフトウェア アーキテクチャを使用して実現することはほぼ不可能です。\n"
"世界は変化しており、数十台のサーバー、長い応答時間 (> 500 ミリ秒)、メンテナンスや障害の滝によるダウンタイムでは、期待されるユーザー エクスペリエンスを満たせません。\n"
"私たちは、_より優れた_ 分散システムを構築する必要があり、それが _リアクティブ システム_ のモットーです。"

#: continuum.adoc
msgid ""
"Quarkus aids you on your journey to build reactive systems.\n"
"Quarkus is based on a https://quarkus.io/version/main/guides/quarkus-reactive-architecture[reactive core].\n"
"Every Quarkus application is a reactive application.\n"
"It uses the system resources efficiently and can handle large throughput.\n"
"But, your code does not have to use reactive programming.\n"
"You can mix and match three alternatives: plain imperative code, imperative code using virtual threads, or reactive code.\n"
"Depending on your requirements, you will pick one or another or even mix them."
msgstr ""
"Quarkus は、リアクティブ システムを構築する道程を支援します。\n"
"Quarkus は、https://quarkus.io/version/main/guides/quarkus-reactive-architecture[リアクティブ コア] に基づいています。\n"
"すべての Quarkus アプリケーションはリアクティブ アプリケーションです。\n"
"システム リソースを効率的に使用し、大きなスループットを処理できます。\n"
"ただし、コードでリアクティブ プログラミングを使用する必要はありません。\n"
"プレーンな命令型コード、仮想スレッドを使用する命令型コード、リアクティブ コードの 3 つの選択肢を組み合わせて使用​​できます。\n"
"要件に応じて、いずれか 1 つを選択するか、または組み合わせることもできます。"

#: continuum.adoc
msgid "Imperative"
msgstr "命令型"

#: continuum.adoc
msgid "Reactive"
msgstr "リアクティブ"

#: continuum.adoc
msgid "Virtual Threads"
msgstr "仮想スレッド"

#: continuum.adoc
msgid "Event-driven Architectures"
msgstr "イベント駆動型アーキテクチャ"

#: continuum.adoc
msgid ""
"However, HTTP characteristics prohibit implementing fully https://www.reactivemanifesto.org/[reactive systems], where all the components interact using asynchronous messages passing.\n"
"You can consume messages from various brokers, such as Apache Kafka, Apache Pulsar, or RabbitMQ, and process these messages smoothly:"
msgstr ""
"しかしながら、HTTP の特性により、すべてのコンポーネントが非同期メッセージ パッシングを使用して対話する完全な https://www.reactivemanifesto.org/[リアクティブ システム] を実装することはできません。\n"
"Apache Kafka、Apache Pulsar、RabbitMQ などのさまざまなブローカーからのメッセージを消費し、これらのメッセージをスムーズに処理できます。"

#: continuum.adoc
msgid ""
"The `@Incoming` and `@Outgoing` annotations are part of https://www.smallrye.io/smallrye-reactive-messaging[Reactive Messaging].\n"
"They are used to express from which _channel_ you are consuming and to which _channel_ you are sending.\n"
"Thanks to https://smallrye.io/smallrye-reactive-messaging/latest/[SmallRye Reactive Messaging], you can consume and send messages from and to different brokers and transports such as HTTP, Pulsar, Kafka, RabbitMQ, JMS, or http://camel.apache.org/[Apache Camel]."
msgstr ""
"`@Incoming` および `@Outgoing` アノテーションは、https://www.smallrye.io/smallrye-reactive-messaging[Reactive Messaging] の一部です。\n"
"これらは、どの _channel_ から消費し、どの _channel_ に送信するかを表現するために使用されます。\n"
"https://smallrye.io/smallrye-reactive-messaging/latest/[SmallRye Reactive Messaging] のおかげで、HTTP、Pulsar、Kafka、RabbitMQ、JMS、http://camel.apache.org/[Apache Camel] などのさまざまなブローカーやトランスポートとの間でメッセージを消費および送信できます。"

#: continuum.adoc
msgid "As mentioned above, you can select among the three execution models: imperative (like shown above), reactive (using the Mutiny API, including stream manipulation), or virtual threads:"
msgstr "前述のように、実行モデルは、命令型 (上記のような)、リアクティブ型 (ストリーム操作を含む Mutiny API を使用)、仮想スレッドの 3 つから選択できます。"

#: continuum.adoc
msgid "Imperative message processing"
msgstr "命令型メッセージ処理"

#: continuum.adoc
msgid "Reactive message processing"
msgstr "リアクティブ型メッセージ処理"

#: continuum.adoc
msgid "Stream processing"
msgstr "ストリーム処理"

#: continuum.adoc
msgid "Message processing using virtual threads"
msgstr "仮想スレッドを用いたメッセージ処理"

#: continuum.adoc
msgid "Functions as a Service and Serverless"
msgstr "Functions as a Serviceとサーバーレス"

#: continuum.adoc
msgid ""
"Thanks to their stellar startup time and low memory usage, you can implement functions using Quarkus in serverless environments.\n"
"Quarkus provides Funqy, an approach to writing functions that are deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service.\n"
"With Funqy, a function is just:"
msgstr ""
"Quarkus は起動時間が短く、メモリ使用量が少ないため、サーバーレス環境で関数を実装できます。\n"
"Quarkus は、AWS Lambda、Azure Functions、Knative、Knative Events (Cloud Events) などのさまざまな FaaS 環境にデプロイ可能な関数を作成するためのアプローチである Funqy を提供します。\n"
"また、スタンドアロン サービスとしても使用できます。\n"
"Funqy では、関数は次のようになります。"

#: continuum.adoc
msgid ""
"You can use any of the Quarkus features in your function and benefit from the fast startup and low memory utilization.\n"
"With Quarkus, you can embrace this new world without changing your programming language.\n"
"Packaging and deployment are a breeze. Quarkus tailors your packaging to the environment you are targeting."
msgstr ""
"関数内で Quarkus のあらゆる機能を使用でき、高速起動とメモリ使用量の低さのメリットを享受できます。\n"
"Quarkus を使用すると、プログラミング言語を変更せずにこの新しい世界を取り入れることができます。\n"
"パッケージ化とデプロイは簡単です。 Quarkus は、ターゲットとする環境に合わせてパッケージ化を調整します。"

#: continuum.adoc
msgid "AI-Infused application"
msgstr "AI搭載アプリケーション"

#: continuum.adoc
msgid ""
"In recent years, AI has evolved from a niche technology to one of the most transformative innovations in IT.\n"
"The rise of large language models has opened new opportunities for building more intelligent, personalized, and adaptive applications.\n"
"Predictive and generative AI models are increasingly being integrated to provide smarter user experiences, automate decision-making, and enhance productivity.\n"
"However, developing AI-infused applications is not without its challenges.\n"
"These models are often non-deterministic, meaning they can produce different outputs given the same input.\n"
"They can also exhibit behaviors such as hallucination, where the model generates inaccurate or nonsensical results.\n"
"Furthermore, AI systems are vulnerable to intentional or accidental misuse, leading to privacy violations, security risks, or biased outcomes."
msgstr ""
"近年、AI はニッチな技術から IT における最も変革的なイノベーションの 1 つへと進化しました。\n"
"大規模言語モデルの台頭により、よりインテリジェントでパーソナライズされた適応型アプリケーションを構築する新たな機会が開かれました。\n"
"予測型および生成型 AI モデルは、よりスマートなユーザー エクスペリエンスの提供、意思決定の自動化、生産性の向上を目的として、ますます統合されています。\n"
"ただし、AI を組み込んだアプリケーションの開発には課題がないわけではありません。\n"
"これらのモデルは非決定論的であることが多く、同じ入力に対して異なる出力を生成する可能性があります。\n"
"また、モデルが不正確または無意味な結果を生成する幻覚などの動作を示すこともあります。\n"
"さらに、AI システムは意図的または偶発的な誤用に対して脆弱であり、プライバシー侵害、セキュリティ リスク、または偏った結果につながります。"

#: continuum.adoc
msgid ""
"To address these complexities, developers must ensure that their AI-powered applications are both robust and secure.\n"
"This includes implementing mechanisms to handle unpredictable behavior, validating and sanitizing inputs, monitoring outputs for potential issues, and auditing AI interactions for compliance and transparency."
msgstr ""
"これらの複雑さに対処するために、開発者は AI を活用したアプリケーションが堅牢かつ安全であることを保証する必要があります。\n"
"これには、予測できない動作を処理するメカニズムの実装、入力の検証とサニタイズ、潜在的な問題の出力の監視、コンプライアンスと透明性のための AI のやり取りの監査が含まれます。"

#: continuum.adoc
msgid ""
"Quarkus offers a seamless solution for building AI-infused applications.\n"
"It automatically manages communication with the AI model, ensuring that inputs and outputs are adequately guarded and processed.\n"
"Quarkus also provides built-in auditing and observability features."
msgstr ""
"Quarkus は、AI を組み込んだアプリケーションを構築するためのシームレスなソリューションを提供します。\n"
"AI モデルとの通信を自動的に管理し、入力と出力が適切に保護され、処理されるようにします。\n"
"Quarkus には、組み込みの監査機能と監視機能も用意されています。"

#: continuum.adoc
msgid "By leveraging Quarkus, you can focus on delivering intelligent, cutting-edge applications while ensuring they remain secure, reliable, and compliant with industry standards."
msgstr "Quarkus を活用することで、安全性、信頼性、業界標準への準拠を維持しながら、インテリジェントで最先端のアプリケーションの提供に集中できます。"

#: continuum.adoc
msgid "Continuum"
msgstr "連続性"

#: continuum.adoc
msgid ""
"Quarkus' core principles offer a versatile foundation that empowers developers to build virtually any type of modern application, from traditional monoliths to cloud-native, serverless architectures.\n"
"Its flexibility makes it ideal for applications of all sizes and complexities, enabling organizations to adapt to evolving business needs and technological landscapes.\n"
"One of the standout features of Quarkus is its reactive core. This allows applications to handle today’s most demanding challenges with remarkable efficiency.\n"
"By optimizing resource usage, Quarkus ensures that applications can scale seamlessly, even under high loads, while minimizing infrastructure costs.\n"
"The framework supports both imperative and reactive programming models, giving developers the freedom to choose the right approach based on the specific requirements of their project.\n"
"This flexibility enables the creation of high-performance applications that can react to real-time events and handle asynchronous workflows with ease."
msgstr ""
"Quarkus のコア原則は、従来のモノリスからクラウドネイティブのサーバーレス アーキテクチャまで、事実上あらゆるタイプの最新アプリケーションを開発者が構築できるようにする多用途の基盤を提供します。\n"
"その柔軟性により、あらゆる規模と複雑さのアプリケーションに最適であり、組織は進化するビジネス ニーズとテクノロジ ランドスケープに適応できます。\n"
"Quarkus の際立った機能の 1 つは、リアクティブ コアです。これにより、アプリケーションは今日の最も要求の厳しい課題を驚くほど効率的に処理できます。\n"
"Quarkus は、リソースの使用を最適化することで、インフラストラクチャ コストを最小限に抑えながら、高負荷下でもアプリケーションをシームレスに拡張できるようにします。\n"
"フレームワークは命令型プログラミング モデルとリアクティブ プログラミング モデルの両方をサポートしているため、開発者はプロジェクトの特定の要件に基づいて適切なアプローチを自由に選択できます。\n"
"この柔軟性により、リアルタイム イベントに反応し、非同期ワークフローを簡単に処理できる高性能アプリケーションを作成できます。"

#: continuum.adoc
msgid ""
"In addition, Quarkus excels in its ability to interact with a broad range of protocols and communication styles.\n"
"Whether your application needs to connect to legacy systems, microservices, or emerging cloud technologies, Quarkus facilitates smooth integration and interaction, enhancing the overall adaptability of your solutions.\n"
"Its support for event-driven architectures, RESTful APIs, gRPC, and other modern protocols ensures that Quarkus-powered applications are well-equipped to thrive in distributed and dynamic environments."
msgstr ""
"加えて、Quarkus は、幅広いプロトコルや通信スタイルとやり取りする能力に優れています。\n"
"アプリケーションがレガシー システム、マイクロサービス、または新興のクラウド テクノロジーに接続する必要がある場合でも、Quarkus はスムーズな統合とやり取りを促進し、ソリューションの全体的な適応性を高めます。\n"
"イベント駆動型アーキテクチャ、RESTful API、gRPC、およびその他の最新プロトコルをサポートしているため、Quarkus を搭載したアプリケーションは、分散型およびダイナミックな環境で十分に機能するようになります。"

#: continuum.adoc
msgid ""
"In summary, Quarkus is not only a robust and efficient framework but also a future-proof solution for building diverse, scalable, and resilient applications in today’s fast-paced digital world.\n"
"With its reactive core, adaptable development models, and broad protocol support, Quarkus provides the tools necessary to meet modern application development's diverse and growing demands."
msgstr ""
"つまり、Quarkus は堅牢で効率的なフレームワークであるだけでなく、今日の急速に変化するデジタル世界において、多様でスケーラブルで回復力のあるアプリケーションを構築するための将来を見据えたソリューションでもあります。\n"
"リアクティブ・コア、適応性の高い開発モデル、幅広いプロトコル サポートを備えた Quarkus は、現代のアプリケーション開発の多様で増大する需要を満たすために必要なツールを提供します。"

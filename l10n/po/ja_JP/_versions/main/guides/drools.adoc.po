msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Defining and executing business rules with Drools"
msgstr "Droolsによるビジネスルールの定義と実行"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can use https://www.drools.org[Drools] to add intelligent automation\n"
"and power it up with the Drools rule engine."
msgstr "このガイドでは、Quarkusアプリケーションに link:https://www.drools.org[Drools] を使用してインテリジェントな自動化を追加し、Droolsルールエンジンでパワーアップする方法を示します。"

#: _versions/main/guides/drools.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/main/guides/drools.adoc
msgid "Introduction"
msgstr "はじめに"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "https://www.drools.org[Drools] is a set of projects focusing on intelligent automation and decision management, most notably providing a forward-chaining and backward-chaining inference-based rule engine, DMN decisions engine and other projects. A rule engine is a fundamental building block to create an expert system which, in artificial intelligence, is a computer system that emulates the decision-making ability of a human expert. You can read more information on the https://www.drools.org[Drools website]."
msgstr "link:https://www.drools.org[Droolsは] インテリジェントな自動化と意思決定管理に焦点を当てたプロジェクト群で、特に前方連鎖型と後方連鎖型の推論ベースのルールエンジン、DMN意思決定エンジンなどを提供しています。ルールエンジンは、人工知能において、人間の専門家の意思決定能力をエミュレートするコンピュータシステムであるエキスパートシステムを作成するための基本的なビルディングブロックです。詳しくは link:https://www.drools.org[Droolsのウェブサイト] をご覧ください。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Drools allows defining rules with 2 different programming styles: one more traditional based on the concepts of a KieBase acting as a repository of business rules and a KieSession storing and evaluating the runtime data against them, and the other using a Rule Unit as a single abstraction that encapsulates the definitions of both a set of rules and the facts against which those rules will be matched."
msgstr "1つはKieBaseがビジネスルールのリポジトリとして機能し、KieSessionがそれに対するランタイムデータを保存し評価するというコンセプトに基づく伝統的なもので、もう1つはルールユニット（Rule Unit）を使用し、ルールセットとそれらのルールが照合されるファクトの両方の定義をカプセル化する単一の抽象化です。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Both these styles are fully supported in the Drools Quarkus extension and this document explains how to use both, outlining the pros and cons of each one."
msgstr "どちらのスタイルもDrools Quarkusエクステンションで完全にサポートされており、このドキュメントでは両方の使い方を説明し、それぞれの長所と短所を概説します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Integrating the traditional Drools programming model with Quarkus"
msgstr "従来のDroolsプログラミングモデルとQuarkusの統合"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "This first example demonstrates how to define a set of rules using the traditional Drools style and how to expose their evaluation inside a REST endpoint through Quarkus."
msgstr "この最初の例では、伝統的なDroolsスタイルを使用してルールセットを定義し、Quarkusを通してRESTエンドポイント内でその評価を公開する方法を示します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The domain model of this sample project is made only by two classes, a loan application"
msgstr "このサンプル・プロジェクトのドメイン・モデルは、2つのクラス、ローン申し込み"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "and the applicant who requested it"
msgstr "と依頼した申請者"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The rules set is made of business decisions to approve or reject an application plus one last rule collecting all the approved applications into a list."
msgstr "ルールセットは、申請を承認するか拒否するかのビジネス上の決定と、承認されたすべての申請をリストに集める最後のルールで構成されます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The goal that we want to achieve is putting the evaluation of these rules in a microservice, exposing them in a REST endpoint developed with Quarkus. To do so it is enough to add the Drools Quarkus extension among the dependencies of your project."
msgstr "達成したいゴールは、これらのルールの評価をマイクロサービスに置き、Quarkusで開発されたRESTエンドポイントでそれらを公開することです。そのためには、プロジェクトの依存関係にDrools Quarkusエクステンションを追加すれば十分です。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "and at this point it is possible to obtain a reference to the KieSession evaluating the formerly defined rules and use it in a REST endpoint as it follows:"
msgstr "この時点で、以前に定義されたルールを評価する KieSession への参照を取得し、次のように REST エンドポイントで使用することができます："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "where an implementation of the `KieRuntimeBuilder` interface is automatically generated and made injectable for you by the Drools extension and allows to obtain with a single statement an instance of any KieBases and KieSessions defined in your Drools project."
msgstr "`KieRuntimeBuilder` インターフェイスの実装がDroolsエクステンションによって自動的に生成され、インジェクト可能になります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Here the `LoanAppDto` is a simple POJO used to submit multiple loan application to the same KieSession"
msgstr "`LoanAppDto` は、同じ KieSession に複数のローン申請を提出するために使用される単純な POJO です。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "thus trying for example to invoke that endpoint with a set of loan applications"
msgstr "従って、例えば、ローン申込書一式でそのエンドポイントを呼び出そうとすると"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "the rule engine will evaluate them against the business rules we have configured before, returning the only one that in this case can be approved according to them"
msgstr "ルールエンジンは、事前に設定したビジネスルールと照らし合わせて評価し、このケースでビジネスルールに従って承認できる唯一のものを返します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Moving to the rule unit programming model"
msgstr "ルール・ユニット・プログラミング・モデルへの移行"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "A rule unit is a new concept introduced in Drools encapsulating both a set of rules and the facts against which those rules will be matched. It comes with a second abstraction called data source, defining the sources through which the facts are inserted, acting in practice as typed entry-points. There are two types of data sources:"
msgstr "ルールユニットはDroolsに導入された新しい概念で、ルールのセットとルールが照合されるファクトの両方をカプセル化します。データソースと呼ばれる2つ目の抽象化が付属しており、ファクトが挿入されるソースを定義し、実際には型付けされたエントリポイントとして機能します。データ・ソースには 2 つのタイプがあります："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "DataStream: an append-only data source"
msgstr "DataStream: 追加のみのデータソース"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "subscribers only receive new (and possibly past) messages"
msgstr "購読者は新しい（場合によっては過去の）メッセージのみを受信します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "cannot update/remove"
msgstr "更新/削除不可"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "stream may also be hot/cold in “reactive streams” terminology"
msgstr "リアクティブ・ストリーム \"の用語では、ストリームがホット／コールドになることもあります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "DataStore: data source for modifiable data"
msgstr "DataStore：変更可能なデータのデータソース"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "subscribers may act upon the data store, by acting upon the fact handle"
msgstr "サブスクライバは、ファクトハンドル"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "In order to use rule units in our quarkus application it is necessary to add a second dependency."
msgstr "quarkusアプリケーションでルールユニットを使用するには、2つ目の依存関係を追加する必要があります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "In essence a rule unit is made of 2 strictly related parts: the definition of the fact to be evaluated and the set of rules evaluating them. The first part is implemented with a POJO, that for the loan example could be something like the following:"
msgstr "要するに、ルール・ユニットは厳密に関連する2つの部分から構成されます：評価されるファクトの定義と、それらを評価するルールのセットです。最初の部分はPOJOで実装され、ローンの例では次のようになります："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Here instead of using the `LoanAppDto` that we introduced to marshall/unmarshall the JSON requests we are binding directly the class representing the rule unit. The two relevant differences are that it implements the `RuleUnitData` interface and uses a `DataStore` instead of a plain `List` containing the loan applications to be approved. The first is just a marker interface to notify the engine that this class is part of a rule unit definition. The use of a `DataStore` is necessary to let the rule engine to react accordingly to the changes by firing new rules and triggering other rules. In the example, the consequences of the rules modify the approved property of the loan applications. Conversely, the `maxAmount` value can be considered a configuration parameter of the rule unit and left as it is: it will automatically be processed during the rules evaluation with the same semantic of a global, and automatically set from the value passed by the JSON request as in the first example, so you will still be allowed to use it in your rules."
msgstr "ここでは、JSONリクエストをマーシャル/アンマーシャルするために導入した `LoanAppDto` を使用する代わりに、ルールユニットを表すクラスを直接バインドしています。関連する2つの違いは、 `RuleUnitData` インターフェースを実装していることと、承認されるローン申請書を含むプレーンな `List` の代わりに `DataStore` を使用していることです。1つ目は、このクラスがルール・ユニット定義の一部であることをエンジンに通知するための単なるマーカー・インターフェースです。 `DataStore` の使用は、ルール・エンジンが新しいルールを発火させ、他のルールをトリガーすることで、変更に応じて反応できるようにするために必要です。この例では、ルールの結果、ローン申請の承認プロパティが変更されます。逆に、 `maxAmount` の値をルールユニットの設定パラメータとみなして、そのままにしておくこともできます。ルール評価中にグローバルと同じセマンティクスで自動的に処理され、最初の例と同じように JSON リクエストで渡された値から自動的に設定されます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The second part of the rule unit is the drl file containing the rules belonging to this unit."
msgstr "ルール・ユニットの2番目の部分は、このユニットに属するルールを含むdrlファイルです。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "This rules file must declare the same package and a unit with the same name of the Java class implementing the `RuleUnitData` interface in order to state that they belong to the same rule unit."
msgstr "このルール・ファイルは、同じルール・ユニットに属することを示すために、 `RuleUnitData` インターフェースを実装する Java クラスの同じパッケージと同じ名前のユニットを宣言する必要があります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "This file has also been rewritten using the new OOPath notation: as anticipated, here the data source acts as a typed entry-point and the oopath expression has its name as root while the constraints are in square brackets, like in the following example."
msgstr "このファイルも新しいOOPath記法を使用して書き換えられています。予想通り、ここではデータ・ソースが型付けされたエントリ・ポイントとして機能し、次の例のように制約が角括弧内にある間、OOPath式はその名前をルートとして持ちます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Alternatively you can still use the old DRL syntax, specifying the name of the data source as an entry-point, with the drawback that in this case you need to specify again the type of the matched object, even if the engine can infer it from the type of the datasource, as it follows."
msgstr "この場合、エンジンがデータソースの型から推測できる場合でも、マッチしたオブジェクトの型を再度指定する必要があります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Finally note that the last rule collecting all the approved loan applications into a global `List` has been replaced by a query simply retrieving them. One of the advantages in using a rule unit is that it clearly defines the context of computation, in other terms the facts to be passed in input to the rule evaluation. Similarly, the query defines what is the output expected by this evaluation."
msgstr "最後に、承認されたすべてのローン申請をグローバルな `List` に収集する最後のルールは、単にそれらを検索するクエリに置き換えられていることに注意してください。ルール・ユニットを使用する利点の 1 つは、計算のコンテキストを明確に定義できることです。同様に、クエリはこの評価によって期待される出力を定義します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "This clear definition of the computation boundaries allows Drools to also automatically generate a class executing the query and returning its results, together with a REST endpoint taking the rule unit as input, passing it to the former query executor and returning its as output."
msgstr "このように計算境界を明確に定義することで、Droolsはクエリを実行し、その結果を返すクラスを、ルールユニットを入力として受け取り、前者のクエリ実行者に渡し、その結果を出力として返すRESTエンドポイントと共に自動的に生成することができます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "You can have as many query as you want and for each of them it will be generated a different REST endpoint with the same name of the query transformed from camel case (like `FindApproved`) to dash separated (like `find-approved`)."
msgstr "クエリはいくつでも作ることができ、それぞれのクエリに対して、同じクエリ名をキャメルケース ( `FindApproved` のような) からダッシュ区切り ( `find-approved` のような) に変換した別の REST エンドポイントが生成されます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "A more comprehensive example"
msgstr "より包括的な例"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "In this more comprehensive and complete example, we will augment a basic Quarkus application with a few simple rules to infer potential issues with the status of a home automation setup."
msgstr "このより包括的で完全な例では、基本的なQuarkusアプリケーションをいくつかの簡単なルールで補強し、ホームオートメーションのセットアップのステータスに関する潜在的な問題を推測します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "We will define a Drools Rule Unit and the rules in the DRL format."
msgstr "Drools Rule UnitとDRL形式のルールを定義します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "We will wire the Rule Unit into a standard Quarkus CDI bean, for use in the Quarkus application (for instance, wiring MQTT messages from Kafka, etc.)."
msgstr "ルールユニットを標準のQuarkus CDI Beanに配線し、Quarkusアプリケーションで使用します（たとえば、KafkaからのMQTTメッセージの配線など）。"

#: _versions/main/guides/drools.adoc
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分以内"

#: _versions/main/guides/drools.adoc
msgid "an IDE"
msgstr "IDE"

#: _versions/main/guides/drools.adoc
msgid "JDK 17+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 17+がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Apache Maven 3.9.3+"
msgstr "Apache Maven 3.9.3+"

#: _versions/main/guides/drools.adoc
msgid "Docker"
msgstr "Docker"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "link:{https://quarkus.io/guides/building-native-image}[GraalVM installed] if you want to run in native mode"
msgstr "ネイティブモードで実行する場合は、 link:{https://quarkus.io/guides/building-native-image}[GraalVMをインストールします] 。"

#: _versions/main/guides/drools.adoc
msgid "Creating the Maven Project"
msgstr "Maven プロジェクトの作成"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid ""
"First, we need a new Quarkus project.\n"
"To create a new Quarkus project, you can reference the link:{https://quarkus.io/guides/maven-tooling}[Quarkus and Maven Guide]"
msgstr "まず、新しいQuarkusプロジェクトが必要です。新しいQuarkusプロジェクトを作成するには、 link:{https://quarkus.io/guides/maven-tooling}[Quarkus and Maven Guide] を参照してください。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "When you have your Quarkus project configured, you can add the Drools Quarkus extensions to your project by adding the following dependencies to your `pom.xml`:"
msgstr "Quarkusプロジェクトの設定が完了したら、 `pom.xml` に以下の依存関係を追加することで、Drools Quarkusエクステンションをプロジェクトに追加できます："

#: _versions/main/guides/drools.adoc
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Let's start from the application domain model."
msgstr "アプリケーション・ドメイン・モデルから始めましょう。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "This application goal is to infer potential issues with the status of a home automation setup, so we create the necessary domain models to represent status of sensors, devices and other things inside the house."
msgstr "このアプリケーションの目標は、ホームオートメーションのセットアップのステータスに関する潜在的な問題を推測することです。そこで、家の中のセンサーやデバイスなどのステータスを表現するために必要なドメインモデルを作成します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Light device domain model:"
msgstr "光デバイスのドメインモデル："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "CCTV security camera domain model:"
msgstr "CCTVセキュリティカメラのドメインモデル："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Smartphone detected in WiFi domain model:"
msgstr "WiFiドメインモデルで検出されたスマートフォン："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Alert class to hold information of the potential detected problems:"
msgstr "検出された潜在的な問題の情報を保持するアラートクラス："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Next, we create a rule file `rules.drl` inside the `src/main/resources/org/drools/quarkus/quickstart/test` folder of the Quarkus project."
msgstr "次に、Quarkusプロジェクトの `src/main/resources/org/drools/quarkus/quickstart/test` フォルダ内にルールファイル `rules.drl` を作成します。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "In this file there are some example rules to decide whether the overall status of the house is deemed inappropriate, triggering the necessary `Alert` (s)."
msgstr "このファイルには、家の全体的なステータスが不適切と判断され、必要な `Alert` (s) がトリガーされるかどうかを決定するためのルール例があります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Rule Unit a central paradigm introduced in Drools 8 that helps users to encapsulate the set of rules and the facts against which those rules will be matched; you can read more information in the https://www.drools.org/learn/documentation.html[Drools documentation]."
msgstr "ルールユニット link:https://www.drools.org/learn/documentation.html[Drools] 8で導入された中心的なパラダイムで、ルールのセットと、ルールが照合されるファクトをカプセル化するのに役立ちます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The facts will be inserted into a `DataStore`, a type-safe entry point. To make everything work, we need to define both the RuleUnit and the DataStore."
msgstr "ファクトは型安全なエントリ・ポイントである `DataStore` に挿入されます。すべてを動作させるには、RuleUnitとDataStoreの両方を定義する必要があります。"

#: _versions/main/guides/drools.adoc
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "We can create a standard Quarkus and JUnit test to check the behaviour of the Rule Unit and the defined rules, accordingly to a certain set of scenarios."
msgstr "標準的な Quarkus テストと JUnit テストを作成し、特定のシナリオに従って、ルールユニットと定義されたルールの動作をチェックします。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "Wiring the Rule Unit with Quarkus CDI beans"
msgstr "QuarkusのCDIビーンズを使用したルールユニットの配線"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "We can now wire the Rule Unit into a standard Quarkus CDI bean, for general use in the Quarkus application."
msgstr "これで、ルールユニットを標準のQuarkus CDI Beanに配線し、Quarkusアプリケーションで一般的に使用できるようになります。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "For example, this might later be helpful to wire device status reporting through MQTT via Kafka, using the appropriate Quarkus extensions."
msgstr "例えば、適切なQuarkusのエクステンションを使用して、Kafka経由でMQTTを経由してデバイスのステータスをレポートすることができます。"

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "We create a simple CDI bean to abstract away the Rule Unit API usage with:"
msgstr "ルールユニットAPIの使用を抽象化するために、単純なCDIビーンを作成します："

#: _versions/main/guides/drools.adoc
#, fuzzy
msgid "The same test scenarios can be refactored using this CDI bean accordingly."
msgstr "同じテストシナリオを、この CDI Bean を使ってリファクタリングすることができます。"

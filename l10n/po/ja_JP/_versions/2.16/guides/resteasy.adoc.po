msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy Classic"
msgstr "RESTEasy Classic"

#. type: delimited block =
#: _versions/2.16/guides/resteasy.adoc
msgid "This guide is about https://resteasy.dev[RESTEasy Classic] which used to be the default JAX-RS implementation until Quarkus 2.8."
msgstr "このガイドは、 Quarkus 2.8 までデフォルトの JAX-RS 実装として使用されていた https://resteasy.dev[RESTEasy Classic] についてのガイドです。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"It is now recommended to use RESTEasy Reactive, which supports equally well traditional blocking workloads and reactive workloads.\n"
"For more information about RESTEasy Reactive,\n"
"please see the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:resteasy-reactive.adoc[RESTEasy Reactive guide]."
msgstr "現在では、従来のブロック型ワークロードとリアクティブ型ワークロードを同様にサポートする RESTEasy Reactive の使用が推奨されています。 RESTEasy Reactive の詳細については、 xref:rest-json.adoc[入門編の REST JSON ガイド]または詳細な xref:resteasy-reactive.adoc[RESTEasy Reactive ガイド]を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "there is another guide if you need a xref:rest-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr "RESTEasy Classic をベースにした REST クライアント（ JSON のサポートを含む）が必要な場合は、xref:rest-client.adoc[別のガイド]を参照してください。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで開発するアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべて JSON 形式になっています。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/JAX-RS and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular adds the following dependency:"
msgstr "このコマンドは、 RESTEasy/JAX-RS および https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートする新しいプロジェクトを生成し、特に次の依存関係を追加します。"

#. type: Block title
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: delimited block =
#: _versions/2.16/guides/resteasy.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkusは3つのJackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8モジュール] を登録しているので、手動で登録する必要はありません。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr "Quarkus は https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているため、 Jackson よりも JSON-B を利用したい場合は、代わりに RESTEasy JSON-B エクステンションを依存関係に持つプロジェクトを作成することができます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/JAX-RS and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular adds the following dependency:"
msgstr "このコマンドは、 RESTEasy/JAX-RS および https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] エクステンションをインポートする新しいプロジェクトを生成し、特に次の依存関係を追加します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "次に、 `org.acme.rest.json.FruitResource` クラスを以下のように作成します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations."
msgstr "実装は非常に簡単で、 JAX-RS のアノテーションを使ってエンドポイントを定義するだけです。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr "`quarkus-resteasy-jackson` や `quarkus-resteasy-jsonb` などの JSON エクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkus はほとんどの戻り値に `application/json` メディアタイプをデフォルトで使用します( `String` や `File` などのよく知られたタイプには例外があり、それぞれ `text/plain` と `application/octet-stream` がデフォルトとなっています)。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this\n"
"you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "デフォルトでJSONを使用したくない場合は、 `quarkus.resteasy-json.default-json=false` を設定すると、デフォルトは自動ネゴシエーションに戻ります。これを設定した場合、JSON を使用するためには `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` をエンドポイントに追加する必要があります。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of JAX-RS providers (which can be seen as converters) included in the native executable."
msgstr "JSON のデフォルトに頼らない場合は、エンドポイントに `@Produces` や `@Consumes` のアノテーションを付けて、期待されるコンテンツタイプを正確に定義することを強くお勧めします。これにより、ネイティブ実行可能ファイルに含まれる JAX-RS プロバイダ (コンバータとみなすことができます) の数を絞り込むことができます。"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Configuring JSON support"
msgstr "JSON サポートの設定"

#. type: Title ====
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Jackson"
msgstr "Jackson"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties\n"
"(by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "Quarkusでは、CDI経由で取得した(そしてQuarkusのエクステンションによって消費される)デフォルトのJackson `ObjectMapper` は、未知のプロパティーを無視するように設定されています( `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 機能を無効にすることで)。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`\n"
"or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 クラスごとに `@JsonIgnoreProperties(ignoreUnknown = false)` を設定することで、Jackson のデフォルトの動作を復元することができます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601\n"
"(by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "さらに、 `ObjectMapper` 、日付と時刻をISO-8601でフォーマットするように設定されています（ `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` の機能を無効にすることで）。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true`\n"
"in your `application.properties`. If you want to change the format for a single field, you can use the\n"
"`@JsonFormat` annotation."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 `@JsonIgnoreProperties(ignoreUnknown = false)` を経由してクラスごとに設定することで、Jackson のデフォルトの動作を復元することができます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.\n"
"The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer`\n"
"inside of which any Jackson configuration can be applied."
msgstr "また、Quarkusは、CDI Bean を介して、様々なJackson設定を非常に簡単に設定することができます。最も単純な(そして推奨される)アプローチは、 `io.quarkus.jackson.ObjectMapperCustomizer` 型の CDI Bean を定義し、その中で、Jackson の設定を適用することです。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、選択すれば自分の `ObjectMapper` Beanを提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#. type: Title ====
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "JSON-B"
msgstr "JSON-B"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、Quarkusでは、 `quarkus-resteasy-jsonb` エクステンションを使用することで、Jacksonの代わりにJSON-Bを使用するオプションを提供しています。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前項と同様のアプローチで、 `io.quarkus.jsonb.JsonbConfigCustomizer` beanを使用してJSON-Bを設定することができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `FooSerializer` という名前のカスタムシリアライザを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `javax.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `javax.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションとしては、 `javax.json.bind.JsonbConfig` ( `Dependent` スコープ付き)の Bean を直接提供するか、極端な場合には `javax.json.bind.Jsonb` ( `Singleton` スコープ付き)のタイプの Bean を提供することが考えられます。後者のアプローチを利用する場合は、 `javax.json.bind.Jsonb` を生成する CDI プロデューサに `io.quarkus.jsonb.JsonbConfigCustomizer` Bean をすべて手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される JSON-B 固有のカスタマイズが適用されなくなります。"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "JSON Hypertext Application Language (HAL) support"
msgstr "JSON Hypertext Application Language ( HAL ) のサポート"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] 標準は、ウェブリンクを表現するためのシンプルなフォーマットです。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr "HAL のサポートを有効にするには、 `quarkus-hal` エクステンションをプロジェクトに追加します。また、 HAL は JSON サポートを必要とするため、 `quarkus-resteasy-jsonb` または `quarkus-resteasy-jackson` のいずれかのエクステンションモジュールを追加する必要があります。"

#. type: Block title
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Table Context object"
msgstr "テーブルコンテキストオブジェクト"

#. type: Table
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "GAV"
msgstr "GAV"

#. type: Table
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Usage"
msgstr "使用方法"

#. type: Table
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "`io.quarkus:quarkus-hal`"
msgstr "`io.quarkus:quarkus-hal`"

#. type: Table
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr "エクステンションを追加したら、次は REST リソースにアノテーションを付け、メディアタイプ `application/hal+json` (または RestMediaType.APPLICATION_HAL_JSON を使用) を生成できるようにします。例えば、以下のようになります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr "これで、エンドポイント `/records` と `/records/first` は、メディアタイプ `json` と `hal+json` の両方を受け入れ、HAL 形式のレコードを表示します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr "例えば、 curl を使用して `/records` エンドポイントを呼び出してレコードのリストを返す場合、HAL 形式は次のようになります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr "When we call a resource `/records/first` that returns only one instance, then the output is:"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "ここで、 `FruitResource` .Quarkusと対話するための簡単なウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルの内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "start Quarkus with:"
msgstr "以下のように Quarkus を起動します。"

#: _versions/2.16/guides/resteasy.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/2.16/guides/resteasy.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/2.16/guides/resteasy.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "You can build a native executable with the usual command:"
msgstr "以下のコマンドでネイティブ実行可能ファイルをビルドすることができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "About serialization"
msgstr "シリアライゼーションについて"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "GraalVMでネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。良いニュースは、Quarkusがほとんどの場合、その作業を代行してくれるということです。これまでのところ、 `Fruit` でさえ、リフレクトを使用するためのクラスを登録しておらず、すべてが正常に動作しています。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at build time\n"
"and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkusは、ビルド時にRESTメソッドを分析することで、自動的にそのような処理を行ってくれます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Another common pattern in the JAX-RS world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "JAX-RSの世界では、 `Response` オブジェクトを使用するのがもう一つの一般的なパターンです。 `Response` にはいくつかの素晴らしい特典があります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "メソッドで何が起こるかによって異なるエンティティータイプを返すことができます (例えば `Legume` や `Error` )。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr " `Response` の属性を設定することができます (エラーが発生した時にステータスを知ることができます)。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "`Response` に含まれるタイプは情報がないため、Quarkusがビルド時に判断することはできません。この場合、Quarkusは必要なクラスを自動的に反映登録することができません。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Using Response"
msgstr "レスポンスの利用"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみましょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "それでは、マメ科植物のリストを返すメソッドを一つだけ持つ `LegumeResource` REST サービスを作成してみましょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Now let's add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "ブラウザーを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "create the native executable with:"
msgstr "以下でネイティブ実行可能ファイルを作成します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "ブラウザーを起動し、 http://localhost:8080/legumes.html にアクセスします。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "No legumes there."
msgstr "そこには豆類はありません。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr "上記のように、問題は Quarkus が、 REST エンドポイントを分析することで `Legume` クラスが何らかのリフレクションを必要とすることを判断できなかったことです。 JSON シリアライズライブラリーは、 `Legume` のフィールドのリストを取得しようとすると空のリストを取得するため、フィールドのデータをシリアライズしません。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will simply return an empty list of fields."
msgstr "現時点では、JSON-BやJacksonがクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外はスローされません。GraalVMは単に空のフィールドのリストを返します。"

#. type: delimited block =
#: _versions/2.16/guides/resteasy.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するよう Quarkus に指示します。 `@RegisterForReflection` アノテーションの詳細については、 xref:writing-native-applications-tips.adoc#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Let's do that and follow the same steps as before:"
msgstr "それを実行して、今までと同じ手順を踏んでみましょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Being reactive"
msgstr "リアクティブであること"

#. type: delimited block =
#: _versions/2.16/guides/resteasy.adoc
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr "リアクティブなワークロードには、常に xref:resteasy-reactive.adoc[RESTEasy Reactive] を使用してください。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr "Mutiny と RESTEasy を統合するには、 `quarkus-resteasy-mutiny` 依存関係をプロジェクトに追加する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutiny についての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリー] に記載されています。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "HTTP filters and interceptors"
msgstr "HTTP フィルターとインターセプター"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP\n"
"headers, query parameters, media type, and other metadata. They also have the capability to abort the request\n"
"processing, for instance when the user does not have the permissions to access the endpoint."
msgstr "HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、 インターセプトすることができます。これらのフィルタは、メッセージに関連付けられたメタデータを処理するのに適しています。HTTP ヘッダ、クエリパラメーター、メディアタイプ、その他のメタデータです。また、ユーザーがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止する機能も持っています。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing\n"
"`ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "CORS filter"
msgstr "CORS フィルター"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Quarkus comes with a CORS filter. Read the xref:http-reference.adoc#cors-filter[HTTP Reference Documentation] to learn\n"
"how to use it."
msgstr "Quarkus には、 CORS フィルターが付属しています。使用方法については、 xref:http-reference.adoc#cors-filter[HTTP リファレンスドキュメント] を参照してください。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "GZip Support"
msgstr "GZipのサポート"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr "QuarkusにはGZipサポートが搭載されています(デフォルトでは有効になっていませんが)。以下の設定ノブを使用して、GZipサポートを設定できます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Enable Gzip support."
msgstr "Gzipサポートを有効にします。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Configure the upper limit on deflated request body. This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.\n"
"This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix is given, assume bytes."
msgstr "デフレーションされたリクエストボディの上限を設定します。これは、リーチを制限することで潜在的な攻撃を緩和するのに便利です。既定値は `10M` です。この設定オプションは、以下の形式の文字列を認識します(正規表現で表示されます): `[0-9]+[KkMmGgTtPpEeZzYy]?` .サフィックスが指定されていない場合は、バイトとみなします。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Once GZip support has been enabled you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr "GZip サポートが有効になったら、エンドポイントメソッドに `@org.jboss.resteasy.annotations.GZIP` アノテーションを追加することで、エンドポイントで使用することができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "The configuration property `quarkus.http.enable-compression` has no effect on compression support of RESTEasy Classic endpoints."
msgstr "設定プロパティー `quarkus.http.enable-compression` は、RESTEasy Classic エンドポイントの圧縮サポートに影響を与えません。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Multipart Support"
msgstr "マルチパートサポート"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr "RESTEasyは link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider] を介してマルチパートをサポートしています。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr "Quarkusは、 `quarkus-resteasy-multipart` というエクステンションを提供しています。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr "このエクステンションは、デフォルトの文字セットが US-ASCII ではなく UTF-8 であるため、RESTEasy のデフォルトの動作とは若干異なります。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "You can configure this behavior with the following configuration properties:"
msgstr "この動作は、以下の設定プロパティーで設定できます。"

#: _versions/2.16/guides/resteasy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Servlet compatibility"
msgstr "サーブレットとの互換性"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr "Quarkusでは、RESTEasyはVert.x HTTPサーバーの上で直接実行するか、サーブレットに依存している場合はUndertowの上で実行することができます。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always available for injection. Most use-cases for this particular\n"
"class are covered by JAX-RS equivalents, except for getting the remote client's IP. RESTEasy comes with a replacement API which you can inject:\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`]\n"
"and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`]\n"
"to solve this problem."
msgstr "その結果、 `HttpServletRequest` のような特定のクラスが常にインジェクションに利用できるわけではありません。この特定のクラスのほとんどのユースケースは、リモートクライアントの IP を取得することを除いて、JAX-RS と同等のものでカバーされています。RESTEasy には、インジェクション可能な代替 API が付属しています。 link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`] これは以下のメソッドを持っています。 link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] そして link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] を解決するために、この問題を解決します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "RESTEasy and REST Client interactions"
msgstr "RESTEasy と RESTクライアントのやりとり"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"In Quarkus, the RESTEasy extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the JAX-RS meaning of the word)."
msgstr "Quarkus では、 RESTEasy エクステンションと xref:rest-client.adoc[REST Client エクテンション]は同じインフラストラクチャーを共有しています。この考察の重要な結果の1つは、 JAX-RS の意味においての同じプロバイダーリストを共有していることです。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "What's Different from Jakarta EE Development"
msgstr "Jakarta EE 開発との違い"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "No Need for `Application` Class"
msgstr "`Application` クラスは不要"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Configuration via an application-supplied subclass of `Application` is supported, but not required."
msgstr "`Application` のアプリケーションが提供するサブクラスによる設定もサポートされていますが、必須ではありません。"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Only a single JAX-RS application"
msgstr "単一のJAX-RSアプリケーションのみ"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"In contrast to JAX-RS (and RESTeasy) running in a standard servlet-container, Quarkus only supports the deployment of a single JAX-RS application.\n"
"If multiple JAX-RS `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr "JAX-RS(およびRESTeasy)が標準のサーブレットコンテナーで実行されているのとは対照的に、Quarkusは単一のJAX-RSアプリケーションのデプロイのみをサポートしています。複数のJAX-RS `Application` クラスが定義されている場合、ビルドは `Multiple classes have been annotated with @ApplicationPath which is currently not supported` というメッセージとともに失敗するでしょう。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "If multiple JAX-RS applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes. This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr "複数の JAX-RS アプリケーションが定義されている場合、 `quarkus.resteasy.ignoreApplicationClasses=true` プロパティーを使用して、すべての明示的な `Application` クラスを無視することができます。これにより、すべてのリソースクラスが `quarkus.resteasy.path` で定義されたアプリケーションパス ( デフォルトは `/` ) を介して利用できるようになります。"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Support limitations of JAX-RS application"
msgstr "JAX-RS アプリケーションのサポートの制限"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"The RESTEasy extension doesn't support the method `getProperties()` of the class `javax.ws.rs.core.Application`. Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider and feature classes.\n"
"It doesn't filter out the built-in resource, provider and feature classes and also the resource, provider and feature classes registered by the other extensions.\n"
"Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is actually managed the same way as `getClasses()`."
msgstr "RESTEasy エクステンションは、クラス `javax.ws.rs.core.Application` のメソッド `getProperties()` をサポートしていません。さらに、アノテーションされたリソース、プロバイダー、機能クラスをフィルタリングするために、 `getClasses()` と `getSingletons()` のメソッドにのみ依存しています。組み込みのリソース、プロバイダー、機能クラスや、他のエクステンションで登録されたリソース、プロバイダー、機能クラスはフィルタリングされません。最後に、メソッド `getSingletons()` が返すオブジェクトは無視され、リソース、プロバイダー、機能クラスをフィルタリングするためにクラスのみが考慮されます。言い換えれば、メソッド `getSingletons()` は実際には `getClasses()` と同じように管理されます。"

#. type: Title ===
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Lifecycle of Resources"
msgstr "リソースのライフサイクル"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"In Quarkus all JAX-RS resources are treated as CDI beans.\n"
"It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr "Quarkusでは、すべてのJAX-RSリソースはCDI Bean として扱われます。 `@Inject` を介して他の Bean を注入したり、 `@Transactional` のようなバインディングを使用してインターセプターをバインドしたり、 `@PostConstruct` コールバックを定義したりすることが可能です。"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"If there is no scope annotation declared on the resource class then the scope is defaulted.\n"
"The default scope can be controlled through the `quarkus.resteasy.singleton-resources` property.\n"
"If set to `true` (default) then a *single instance* of a resource class is created to service all requests (as defined by `@javax.inject.Singleton`).\n"
"If set to `false` then a *new instance* of the resource class is created per each request.\n"
"An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr "リソースクラスでスコープアノテーションが宣言されていない場合は、スコープはデフォルトになります。デフォルトのスコープは `quarkus.resteasy.singleton-resources` プロパティーで制御できます。 `true` (デフォルト) に設定すると、( `@javax.inject.Singleton` で定義されているように) すべてのリクエストにサービスを提供するためのリソースクラスの *単一のインスタンス* が作成されます。 `false` に設定すると、各リクエストごとにリソースクラスの *新しい インスタンス* が作成されます。明示的な CDI スコープアノテーション ( `@RequestScoped` , `@ApplicationScoped` , など) は常にデフォルトの動作を上書きし、リソースインスタンスのライフサイクルを指定します。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Include/Exclude JAX-RS classes with build time conditions"
msgstr "ビルド時条件による JAX-RS クラスの包含および除外"

#: _versions/2.16/guides/resteasy.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of JAX-RS Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various JAX-RS classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these JAX-RS classes should be included."
msgstr "Quarkusでは、CDI Beanの場合と同様に、ビルド時の条件に応じて、JAX-RSリソース、プロバイダー、および機能を直接包含または除外することができます。したがって、さまざまなJAX-RSクラスは、プロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）および／またはプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）でアノテーションすることができ、構築時にどの条件でこれらのJAX-RSクラスが含まれるべきかをQuarkusに示すことができます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr "次の例では、 Quarkus は、ビルドプロファイル `app1` が有効になっている場合に限り、エンドポイント `sayHello` を含めます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Please note that if a JAX-RS Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the JAX-RS Application."
msgstr "JAX-RS アプリケーションが検出され、メソッド `getClasses()` および、または `getSingletons()` がオーバーライドされている場合、 Quarkus はビルド時の条件を無視し、 JAX-RS アプリケーションで定義されているもののみを考慮することに注意してください。"

#. type: Title ==
#: _versions/2.16/guides/resteasy.adoc
#, no-wrap
msgid "Conclusion"
msgstr "まとめ"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行えます。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#. type: Plain text
#: _versions/2.16/guides/resteasy.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "覚えておくべきことは一つだけあります。 `Response` を使用していて、Quarkus がシリアライズされているBeanを特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があります。"

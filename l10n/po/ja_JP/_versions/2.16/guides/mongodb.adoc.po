msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Using the MongoDB Client"
msgstr "MongoDB クライアントの利用"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB is a well known NoSQL Database that is widely used."
msgstr "MongoDBは広く使われているNoSQLデータベースとして知られています。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this guide, we see how you can get your REST services to use the MongoDB database."
msgstr "このガイドでは、RESTサービスでMongoDBデータベースを使用する方法を見ていきます。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB installed or Docker installed"
msgstr "MongoDBがインストールされているか、Dockerがインストールされている"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで開発するアプリケーションは非常にシンプルです: ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべてJSON形式になっています。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The elements are stored in MongoDB."
msgstr "要素はMongoDBに格納されています。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The solution is located in the `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory]."
msgstr "ソリューションは `mongodb-quickstart` {quickstarts-tree-url}/mongodb-quickstart[directory] にあります。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"This command generates a Maven structure importing the RESTEasy Reactive Jackson and MongoDB Client extensions.\n"
"After this, the `quarkus-mongodb-client` extension has been added to your build file."
msgstr "このコマンドは、RESTEasy Reactive JacksonとMongoDB ClientエクステンションをインポートするMaven構造を生成します。その後、 `quarkus-mongodb-client` エクステンションがビルドファイルに追加されます。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `mongodb-client` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `mongodb-client` エクステンションを追加することができます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Now create a `org.acme.mongodb.FruitService` that will be the business layer of our application and store/load the fruits from the mongoDB database."
msgstr "今、私たちのアプリケーションのビジネス層となる `org.acme.mongodb.FruitService` を作成し、mongoDB データベースからフルーツを保存/ロードします。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Now, create the `org.acme.mongodb.FruitResource` class as follows:"
msgstr "では、次のように `org.acme.mongodb.FruitResource` クラスを作成します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the JAX-RS annotations and use the `FruitService` to list/add new fruits."
msgstr "実装はとても簡単で、JAX-RSのアノテーションを使ってエンドポイントを定義し、 `FruitService` を使って新しいフルーツをリスト/追加するだけです。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Configuring the MongoDB database"
msgstr "MongoDBデータベースの設定"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The main property to configure is the URL to access to MongoDB. Almost all configuration can be included in the connection URI, so we advise you to do so. You can find more information in the MongoDB documentation: https://docs.mongodb.com/manual/reference/connection-string/"
msgstr "設定する主なプロパティーはMongoDBにアクセスするためのURLです。ほとんどすべての設定は接続URIに含めることができるので、そうすることをお勧めします。 MongoDBドキュメントで、さらに情報を得ることができます: https://docs.mongodb.com/manual/reference/connection-string/"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "A sample configuration should look like this:"
msgstr "設定のサンプルは以下のようになります。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "In this example, we are using a single instance running on localhost:"
msgstr "この例では、ローカルホスト上で実行されている単一のインスタンスを使用しています。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you need more configuration properties, there is a full list at the end of this guide."
msgstr "その他の設定プロパティーが必要な場合は、このガイドの最後に完全なリストがあります。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"By default, Quarkus will restrict the use of JNDI within an application, as a precaution to try and mitigate any future vulnerabilities similar to Log4Shell.\n"
"Because the `mongo+srv` protocol often used to connect to MongoDB requires JNDI, this protection is automatically disabled when using the MongoDB client extension."
msgstr "デフォルトでは、Quarkusはアプリケーション内でのJNDIの使用を制限します。これは、log4shellのような将来的な脆弱性を軽減するための予防策です。MongoDBへの接続によく使われる `mongo+srv` プロトコルはJNDIを必要とするため、MongoDBクライアントエクステンションを使用すると、この保護機能は自動的に無効になります。"

#. type: Title ===
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Dev Services (Configuration Free Databases)"
msgstr "開発サービス（コンフィグレーション・フリー・データベース）"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Quarkus supports a feature called Dev Services that allows you to create various datasources without any config. In the case of MongoDB this support extends to the default MongoDB connection.\n"
"What that means practically, is that if you have not configured `quarkus.mongodb.connection-string`, Quarkus will automatically start a MongoDB container when running tests or in dev mode,\n"
"and automatically configure the connection."
msgstr "QuarkusはDev Servicesと呼ばれる機能をサポートしており、設定なしで様々なデータソースを作成することができます。MongoDBの場合、このサポートはデフォルトのMongoDB接続にまで及びます。実際どう動くかというと、 `quarkus.mongodb.connection-string` を設定していない場合、Quarkusはテストやdev-modeの実行時に自動的にMongoDBコンテナを起動し、接続を自動的に設定します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "MongoDB Dev Services is based on link:https://www.testcontainers.org/modules/databases/mongodb/[Testcontainers MongoDB module] that will start a single node replicaset."
msgstr "MongoDB Dev Servicesは link:https://www.testcontainers.org/modules/databases/mongodb/[Testcontainers MongoDBモジュール] をベースにしており、単一ノードのレプリカセットを起動することができます。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"When running the production version of the application, the MongoDB connection need to be configured as normal, so if you want to include a production database config in your\n"
"`application.properties` and continue to use Dev Services we recommend that you use the `%prod.` profile to define your MongoDB settings."
msgstr "本番環境のアプリケーションを実行する場合、MongoDBの接続は通常通りに設定する必要があります。本番環境のデータベースの設定を `application.properties` に含めてDev Servicesを継続して使用する場合は、 `%prod.` プロファイルを使用してMongoDBの設定を定義することをお勧めします。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Multiple MongoDB Clients"
msgstr "複数のMongoDBクライアント"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"MongoDB allows you to configure multiple clients.\n"
"Using several clients works the same way as having a single client."
msgstr "MongoDBでは、複数のクライアントを設定することができます。複数のクライアントを使っても、単一のクライアントを持つのと同じように動作します。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Notice there's an extra bit in the key (the `users` and `inventory` segments).\n"
"The syntax is as follows: `quarkus.mongodb.[optional name.][mongo connection property]`.\n"
"If the name is omitted, it configures the default client."
msgstr "キーに余分なビットがあることに注意してください ( `users` と `inventory` のセグメント)。構文は以下の通りです。 `quarkus.mongodb.[optional name.][mongo connection property]` .名前を省略すると、デフォルトのクライアントを設定します。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The use of multiple MongoDB clients enables multi-tenancy for MongoDB by allowing to connect to multiple MongoDB clusters. +\n"
"If you want to connect to multiple databases inside the same cluster,\n"
"multiple clients are **not** necessary as a single client is able to access all databases in the same cluster\n"
"(as a JDBC connection is able to access to multiple schemas inside the same database)."
msgstr "複数の MongoDB クライアントを使うことで、複数の MongoDB クラスターに接続できるようになり、MongoDB のマルチテナンシーが可能になります。+ 同じクラスター内の複数のデータベースに接続したい場合は、(JDBC接続が同じデータベース内の複数のスキーマにアクセスできるように) 1つのクライアントで同じクラスター内のすべてのデータベースにアクセスできるので、複数のクライアントは必要あり *ません* 。"

#. type: Title ===
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Named Mongo client Injection"
msgstr "名前付きMongoクライアントの注入"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"When using multiple clients, each `MongoClient`, you can select the client to inject using the `io.quarkus.mongodb.MongoClientName` qualifier.\n"
"Using the above properties to configure three different clients, you can also inject each one as follows:"
msgstr "複数のクライアントを使用する場合、各 `MongoClient` は、 `io.quarkus.mongodb.MongoClientName` の修飾子を使用して注入するクライアントを選択できます。上記のプロパティーを使用して、以下のように3つの異なるクライアントを設定し、それぞれに注入することもできます。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Running a MongoDB Database"
msgstr "MongoDB データベースの実行"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "As by default, `MongoClient` is configured to access a local MongoDB database on port 27017 (the default MongoDB port), if you have a local running database on this port, there is nothing more to do before being able to test it!"
msgstr "デフォルトでは、 `MongoClient` はポート 27017 (デフォルトの MongoDB ポート) でローカルの MongoDB データベースにアクセスするように設定されています。このポートで実行されているローカルのデータベースがある場合は、他に何もする必要はありません!"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use Docker to run a MongoDB database, you can use the following command to launch one:"
msgstr "Dockerを使ってMongoDBデータベースを起動したい場合は、以下のコマンドで起動することができます。"

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "If you use <<dev-services,Dev Services>>, launching the container manually is not necessary!"
msgstr "link:#dev-services[Dev Services]を使用している場合は、手動でコンテナを起動する必要はありません。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "ここで、 `FruitResource` .Quarkusと対話するための簡単なウェブページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリーの下にある静的なリソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/mongodb-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html]ファイルの内容を含む `fruits.html` ファイルを追加します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "start Quarkus with:"
msgstr "以下のように Quarkus を起動します。"

#: _versions/2.16/guides/mongodb.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/2.16/guides/mongodb.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/2.16/guides/mongodb.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Reactive MongoDB Client"
msgstr "リアクティブな MongoDB クライアント"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"A reactive MongoDB Client is included in Quarkus.\n"
"Using it is as easy as using the classic MongoDB Client.\n"
"You can rewrite the previous example to use it like the following."
msgstr "リアクティブなMongoDBクライアントがQuarkusに含まれています。これを使うのは、古典的なMongoDBクライアントを使うのと同じくらい簡単です。先ほどの例を以下のように書き換えて使うことができます。"

#. type: Block title
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The MongoDB reactive client uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "MongoDBのリアクティブ・クライアントは、Mutinyのリアクティブ・タイプを使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - an intuitive reactive programming library]をご覧ください。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Simplifying MongoDB Client usage using BSON codec"
msgstr "BSON codecを使ってMongoDBクライアントの利用をシンプルにする"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "By using a Bson `Codec`, the MongoDB Client will take care of the transformation of your domain object to/from a MongoDB `Document` automatically."
msgstr "Bson `Codec` を使用することで、MongoDB クライアントは自動的に MongoDB `Document` への/からドメインオブジェクトの変換の世話をします。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"First you need to create a Bson `Codec` that will tell Bson how to transform your entity to/from a MongoDB `Document`.\n"
"Here we use a `CollectibleCodec` as our object is retrievable from the database (it has a MongoDB identifier), if not we would have used a `Codec` instead.\n"
"More information in the codec documentation: https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/codecs/."
msgstr "まず、Bson `Codec` を作成する必要があります。これは、エンティティーを MongoDB `Document` に変換する方法を Bson に伝えます。ここでは `CollectibleCodec` を使用しています。私たちのオブジェクトはデータベースから取得可能なので (MongoDB の識別子を持っています)、そうでなければ `Codec` を使用します。詳細はcodecのドキュメントを参照ください: https://mongodb.github.io/mongo-java-driver/3.10/bson/codecs 。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Then you need to create a `CodecProvider` to link this `Codec` to the `Fruit` class."
msgstr "そして、この `Codec` を `Fruit` クラスにリンクさせるための `CodecProvider` を作成する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Quarkus takes care of registering the `CodecProvider` for you as a CDI bean of `@Singleton` scope."
msgstr "Quarkusは、 `CodecProvider` を `@Singleton` スコープのCDIビーンとして登録する作業を行います。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Finally, when getting the `MongoCollection` from the database you can use directly the `Fruit` class instead of the `Document` one, the codec will automatically map the `Document` to/from your `Fruit` class."
msgstr "最後に、データベースから `MongoCollection` を取得するとき、 `Document` の代わりに `Fruit` クラスを直接使用することができます。コーデックは自動的に `Document` を `Fruit` クラスにマッピングします。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Here is an example of using a `MongoCollection` with the `FruitCodec`."
msgstr "これが、 `MongoCollection` を `FruitCodec` と使用する例です。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "The POJO Codec"
msgstr "POJO codec"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The link:https://www.mongodb.com/docs/drivers/java/sync/current/fundamentals/data-formats/document-data-format-pojo/[POJO Codec] provides a set of annotations that enable the customization of\n"
"the way a POJO is mapped to a MongoDB collection and this codec is initialized automatically by Quarkus"
msgstr "link:http://mongodb.github.io/mongo-java-driver/3.12/bson/pojos[POJO codec] は、POJOをMongoDBコレクションにマッピングする方法をカスタマイズできるアノテーションのセットを提供しています。このCodecはQuarkusによって自動的に初期化されます。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"One of these annotations is the `@BsonDiscriminator` annotation that allows to storage multiple Java types in a single MongoDB collection by adding\n"
"a discriminator field inside the document. It can be useful when working with abstract types or interfaces."
msgstr "このアノテーションのひとつに `@BsonDiscriminator` アノテーションがありますが、これは、ドキュメントの中にデリミタフィールドを追加することで、複数の Java 型をひとつの MongoDB コレクションに保存できるようにするものです。抽象的な型やインターフェイスを扱うときに便利です。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Quarkus will automatically register all the classes annotated with `@BsonDiscriminator` with the POJO codec."
msgstr "Quarkusは、 `@BsonDiscriminator` でアノテーションされたすべてのクラスをPOJOコーデックで自動的に登録します。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The POJO Codec have enhanced generic support via `PropertyCodecProvider`,\n"
"Quarkus will automatically register any `PropertyCodecProvider` with the POJO Codec (these classes are automatically made CDI beans of `@Singleton` scope).\n"
"When building native executables and using generic types, you might need to register the type arguments for reflection."
msgstr "POJO Codecでは、 `PropertyCodecProvider` によるジェネリックサポートが強化されています。Quarkusでは、POJO Codecで `PropertyCodecProvider` を使用すると自動的に登録されます（これらのクラスは自動的に `@Singleton` スコープのCDI Beanになります）。ネイティブ実行可能ファイルをビルドしてジェネリック型を使用する場合、リフレクションのために型の引数を登録する必要があるかもしれません。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Simplifying MongoDB with Panache"
msgstr "PanacheでMongoDBをシンプルにする"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "The xref:mongodb-panache.adoc[MongoDB with Panache] extension facilitates the usage of MongoDB by providing active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "xref:mongodb-panache.adoc[MongoDB with Panache]エクステンションは、 xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] にあるようなアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供することで、MongoDBの利用を促進し、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Schema migration with Liquibase"
msgstr "Liquibaseによるスキーママイグレーション"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The xref:liquibase-mongodb.adoc[Liquibase MongoDB] extension facilitates the initialization of a MongoDB database including indices and initial data.\n"
"It implements the same schema migration facilities that Liquibase offers for SQL databases."
msgstr "xref:liquibase-mongodb.adoc[Liquibase MongoDB] エクステンションは、インデックスと初期データを含む MongoDB データベースの初期化を容易にします。 Liquibase が SQL データベースに提供するものと同じスキーママイグレーション機能を実装しています。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Connection Health Check"
msgstr "接続のヘルスチェック"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `quarkus-mongodb-client` will automatically add a readiness health check\n"
"to validate the connection to the cluster."
msgstr "`quarkus-smallrye-health` エクステンションを使用している場合、 `quarkus-mongodb-client` はクラスターへの接続を検証するためのReadinessヘルスチェックを自動的に追加します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "So when you access the `/q/health/ready` endpoint of your application you will have information about the connection validation status."
msgstr "そのため、アプリケーションの `/q/health/ready` エンドポイントにアクセスすると、接続の検証状況に関する情報が表示されます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "This behavior can be disabled by setting the `quarkus.mongodb.health.enabled` property to `false` in your `application.properties`."
msgstr "この動作は、 `application.properties` で `quarkus.mongodb.health.enabled` プロパティーを `false` に設定することで無効にできます。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-micrometer` or `quarkus-smallrye-metrics` extension, `quarkus-mongodb-client` can provide metrics about the connection pools.\n"
"This behavior must first be enabled by setting the `quarkus.mongodb.metrics.enabled` property to `true` in your `application.properties`."
msgstr "`quarkus-micrometer` または `quarkus-smallrye-metrics` エクステンションを使用している場合、 `quarkus-mongodb-client` は接続プールに関するメトリクスを提供することができます。この動作を有効にするには、まず `application.properties` の `quarkus.mongodb.metrics.enabled` プロパティーを `true` に設定する必要があります。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"So when you access the `/q/metrics` endpoint of your application you will have information about the connection pool status.\n"
"When using xref:smallrye-metrics.adoc[SmallRye Metrics], connection pool metrics will be available under the `vendor` scope."
msgstr "そのため、アプリケーションの `/q/metrics` エンドポイントにアクセスすると、接続プールの状況に関する情報が表示されます。link:smallrye-metrics.html[SmallRye Metrics]を使用すると、接続プールのメトリクスは `vendor` スコープの配下で利用可能になっています。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Tracing"
msgstr "トレース"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you are using the `quarkus-smallrye-opentracing` extension, `quarkus-mongodb-client` can register traces about the commands executed.\n"
"This behavior must be enabled by setting the `quarkus.mongodb.tracing.enabled` property to `true` in your `application.properties` and adding the dependency `io.opentracing.contrib:opentracing-mongo-common` to your pom.xml (for more info read the xref:opentracing.adoc#mongodb-client[OpenTracing - MongoDB client] section)."
msgstr "`quarkus-smallrye-opentracing` エクステンションを使用している場合、 `quarkus-mongodb-client` は実行されたコマンドについてのトレースを登録することができます。この動作を有効にするには、まず `application.properties` の `quarkus.mongodb.tracing.enabled` プロパティーを `true` に設定する必要があり、pom.xmlに `io.opentracing.contrib:opentracing-mongo-common` の依存関係を追加する必要があります (詳細は link:opentracing.html#mongodb-client[OpenTracing - MongoDB client]セクションをご覧ください)。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Read the xref:opentracing.adoc[OpenTracing] guide, for how to configure OpenTracing and how to use the Jaeger tracer."
msgstr "OpenTracingの設定方法やJaegerトレーサーの使用方法については、 link:opentracing.html[OpenTracing]ガイドをお読みください。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Testing helpers"
msgstr "テストヘルパー"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "xref:#dev-services[Dev Services for MongoDB] is your best option to start a MongoDB database for your unit tests."
msgstr "xref:#dev-services[Dev Services for MongoDB] は、ユニットテスト用のMongoDBデータベースを起動するための最適なオプションです。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"But if you can't use it, you can start a MongoDB database using one of the two `QuarkusTestResourceLifecycleManager` that Quarkus provides.\n"
"They rely on link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB]."
msgstr "しかし、それを使用できない場合は、Quarkus が提供する 2 つの `QuarkusTestResourceLifecycleManager` のいずれかを使用して MongoDB データベースを開始できます。 彼らは link:https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo[Flapdoodle embedded MongoDB] に依存しています。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "`io.quarkus.test.mongodb.MongoTestResource` will start a single instance on port 27017."
msgstr "`io.quarkus.test.mongodb.MongoTestResource` は、ポート27017に単一のインスタンスを起動します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` will start a replicaset with two instances, one on port 27017 and the other on port 27018."
msgstr "`io.quarkus.test.mongodb.MongoReplicaSetTestResource` は、ポート27017とポート27018にある2つのインスタンスでレプリカセットを開始します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To use them, you need to add the `io.quarkus:quarkus-test-mongodb` dependency to your pom.xml."
msgstr "これらを使用するには、 `io.quarkus:quarkus-test-mongodb` の依存関係を pom.xml に追加する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "For more information about the usage of a `QuarkusTestResourceLifecycleManager` please read xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus test resource]."
msgstr "`QuarkusTestResourceLifecycleManager` の使用方法の詳細については、 xref:getting-started-testing.adoc#quarkus-test-resource[Quarkus テストリソース] を参照してください。"

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "To set the desired port MongoDB will listen to when it is launched, the following code should be used:"
msgstr "MongoDB が起動時にリッスンする希望のポートを設定するには、次のコードを使用します。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To set the desired MongoDB version that will be launched, the following code should be used:"
msgstr "起動するMongoDBのバージョンを任意に設定するには、次のコードを使用します。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"The string value used can be any of one of the `de.flapdoodle.embed.mongo.distribution.Version` or `de.flapdoodle.embed.mongo.distribution.Version.Main` enums.\n"
"If no version is specified, `Version.Main.V4_0` is used by default."
msgstr "使用する文字列の値は `de.flapdoodle.embed.mongo.distribution.Version` または `de.flapdoodle.embed.mongo.distribution.Version.Main` のいずれかの列挙型になります。 バージョンを指定しない場合、デフォルトで `Version.Main.V4_0` が使用されます。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "The legacy client"
msgstr "レガシークライアント"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"We don't include the legacy MongoDB client by default. It contains the now retired MongoDB Java API (DB, DBCollection,... )\n"
"and the `com.mongodb.MongoClient` that is now superseded by `com.mongodb.client.MongoClient`."
msgstr "デフォルトではレガシーな MongoDB クライアントは含まれていません。今では引退した MongoDB Java API (DB, DBCollection, ... ) と `com.mongodb.MongoClient` が含まれていますが、今では `com.mongodb.client.MongoClient` に取って代わられています。"

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use the legacy API, you need to add the following dependency to your build file:"
msgstr "レガシーAPIを使用したい場合は、次の依存関係をビルドファイルに追加する必要があります。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can use the MongoDB client in a native executable."
msgstr "MongoDBクライアントをネイティブ実行可能ファイルで使うことができます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "If you want to use SSL/TLS encryption, you need to add these properties in your `application.properties`:"
msgstr "SSL/TLS 暗号化を使用したい場合は、これらのプロパティを `application.properties` に追加する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can then build a native executable with the usual command:"
msgstr "その後、通常のコマンドでネイティブ実行可能ファイルをビルドすることができます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Running it is as simple as executing `./target/mongodb-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は `./target/mongodb-quickstart-1.0-SNAPSHOT-runner` を実行するだけで簡単です。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#. type: delimited block =
#: _versions/2.16/guides/mongodb.adoc
msgid "Currently, Quarkus doesn't support link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption] in native mode."
msgstr "現在、Quarkusはネイティブモードでの link:https://docs.mongodb.com/manual/core/security-client-side-encryption/[Client-Side Field Level Encryption]をサポートしていません。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you encounter the following error when running your application in native mode: +\n"
"`Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can't find a codec for class org.acme.MyVariable.` +\n"
"This means that the `org.acme.MyVariable` class is not known to GraalVM, the remedy is to add the `@RegisterForReflection` annotation to your `MyVariable class`.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "アプリケーションをネイティブモードで実行した際に、以下のようなエラーが発生した場合があります。+ `Failed to encode 'MyObject'. Encoding 'myVariable' errored with: Can’t find a codec for class org.acme.MyVariable.` + これは、 `org.acme.MyVariable` クラスがGraalVMに知られていないことを意味しています。対策としては、 `@RegisterForReflection` アノテーションを `MyVariable class` に追加してください。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページをご覧ください。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Using mongo+srv:// urls"
msgstr "mongo+srv://のURLの使用"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"`mongo+srv://` urls are supported out of the box in JVM mode.\n"
"However, in native, the default DNS resolver, provided by the MongoDB client, uses JNDI and does not work in native mode."
msgstr "`mongo+srv://` url は、JVM モードではサポートされます。しかし、ネイティブモードでは、MongoDB クライアントが提供するデフォルトの DNS リゾルバは JNDI を使っているので動作しません。"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"If you need to use `mongo+srv://` in native mode, you can configure an alternative DNS resolver.\n"
"This feature is **experimental** and may introduce a difference between JVM applications and native applications."
msgstr "`mongo+srv://` をネイティブモードで使用する必要がある場合は、代替の DNS リゾルバを設定することができます。この機能は *実験的な*もので、JVMアプリケーションとネイティブアプリケーションの間に違いが生じる可能性があります。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "To enable the alternative DNS resolver, use:"
msgstr "代替のDNSリゾルバを有効にするには"

#: _versions/2.16/guides/mongodb.adoc
msgid ""
"As indicated in the property name, it uses Vert.x to retrieve the DNS records.\n"
"By default, it tries to read the first `nameserver` from `/etc/resolv.conf`, if this file exists.\n"
"You can also configure your DNS server:"
msgstr "プロパティ名で示されているように、Vert.xを使用してDNSレコードを取得します。デフォルトでは、 `/etc/resolv.conf` から最初の `nameserver` を読み取ろうとします。このファイルが存在する場合は、そのファイルを使用します。また、DNS サーバーを設定することもできます。"

#. type: Plain text
#: _versions/2.16/guides/mongodb.adoc
msgid "Also, you can configure the lookup timeout using:"
msgstr "また、ルックアップのタイムアウトは、以下の方法で設定できます。"

#. type: Title ==
#: _versions/2.16/guides/mongodb.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#: _versions/2.16/guides/mongodb.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "OpenID Connect (OIDC) authorization code flow mechanism"
msgstr "OpenID Connect (OIDC) 認可コードフローメカニズム"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as https://www.keycloak.org[Keycloak]."
msgstr "このガイドでは、Quarkus OpenID Connect (OIDC) エクステンションを使用して、 link:https://www.keycloak.org/[Keycloak] などのOpenID Connect準拠の認証サーバーでサポートされている OpenID Connect 認可コードフローを使用して Quarkus HTTP エンドポイントを保護する方法を説明します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful. Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr "このエクステンションは、OpenID Connect Provider (例: Keycloak) にリダイレクトしてログインさせ、認証が完了したら、認証に成功したことを確認するコードを使って、ウェブアプリケーションのユーザーを簡単に認証することができます。エクステンションは、認可コードグラントを使用して OpenID Connect Provider から ID とアクセストークンを要求し、アプリケーションへのアクセスを承認するためにこれらのトークンを検証します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "次の図は、Quarkus における認可コードフローメカニズムの概要を示しています。"

#. type: Block title
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkusにおける認可コードフローメカニズム"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The Quarkus user requests access to a Quarkus web-app application."
msgstr "Quarkusユーザーが、Quarkus web-appアプリケーションへのアクセスを要求します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus Web-appは、ユーザーを認証エンドポイント、つまり認証用のOIDCプロバイダーにリダイレクトします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDCプロバイダは、ユーザーをログインと認証のプロンプトにリダイレクトします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr "プロンプトで、ユーザーは自分のユーザー認証情報を入力します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code then redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDCプロバイダは、入力されたユーザーの資格情報を認証し、成功すると認可コードを発行して、クエリパラメータとしてコードが含まれるQuarkus Web-appにユーザーをリダイレクトします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus Webアプリケーションは、この認可コードをOIDCプロバイダーと交換し、ID、アクセス、およびリフレッシュの各トークンを取得します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grant the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr "認可コードフローが完了し、Quarkus web-appは発行されたトークンを使用して、ユーザーに関する情報にアクセスし、そのユーザーに関連するロールベースの認可を付与します。発行されるトークンは以下の通りです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "ID token: The Quarkus web-app uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web-app."
msgstr "ID トークン: Quarkus ウェブアプリは ID トークン内のユーザー情報を使用して、認証されたユーザーが安全にログインできるようにし、ウェブアプリへのロールベースのアクセスを提供します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or propagate it to another endpoint."
msgstr "アクセス トークン: Quarkus ウェブアプリは、アクセス トークンを使用して UserInfo API にアクセスし、認証されたユーザーに関する追加情報を取得したり、別のエンドポイントに伝達したりします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "リフレッシュ トークン: (オプション) ID およびアクセス トークンの有効期限が切れた場合、Quarkus ウェブアプリはリフレッシュ トークンを使用して新しい ID およびアクセス トークンを取得できます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "For information about protecting your applications using Bearer Token authorization, see xref:security-openid-connect.adoc[Using OpenID Connect to Protect Service Applications]."
msgstr "Bearer Token 認証を使用してアプリケーションを保護する方法については、xref:security-openid-connect.adoc [OpenID Connect を使用してサービス アプリケーションを保護する] を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "For information about multitenant support, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "マルチテナント サポートの詳細については、xref:security-openid-connect-multitenancy.adoc [OpenID Connect マルチテナンシーの使用] を参照してください。"

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Quickstart"
msgstr "クイックスタート"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In this example, we build a very simple web application with a single page:"
msgstr "この例では、1ページの非常にシンプルなWebアプリケーションを構築しています。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`/index.html`"
msgstr "`/index.html`"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This page is protected and can only be accessed by authenticated users."
msgstr "このページは保護されており、認証されたユーザーのみがアクセスできます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The solution is located in the `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory]."
msgstr "ソリューションは `security-openid-connect-web-authentication-quickstart` {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart[directory] にあります。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `oidc` エクステンションを追加することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Let's write a simple JAX-RS resource which has all the tokens returned in the authorization code grant response injected:"
msgstr "認可コードグラントのレスポンスで返されたすべてのトークンが注入されたシンプルなJAX-RSリソースを書いてみましょう。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This endpoint has ID, access and refresh tokens injected. It returns a `preferred_username` claim from the ID token, a `scope` claim from the access token and also a refresh token availability status."
msgstr "このエンドポイントには、ID、アクセス、およびリフレッシュ トークンが注入されています。ID トークンから `preferred_username` クレーム、アクセス トークンから `scope` クレーム、およびリフレッシュ トークンの可用性ステータスを返します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that you do not have to inject the tokens - it is only required if the endpoint needs to use the ID token to interact with the currently authenticated user or use the access token to access a downstream service on behalf of this user."
msgstr "基本的にトークンを注入する必要はありません。エンドポイントが ID トークンを使用して現在認証されているユーザーとやりとりする必要がある場合や、アクセス・トークンを使用してこのユーザーに代わってダウンストリーム・サービスにアクセスする必要がある場合にのみ必要となります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please see <<access_id_and_access_tokens,Access ID and Access Tokens>> section below for more information."
msgstr "詳しくは下記の link:#access_id_and_access_tokens[アクセスID・アクセストークン] の項をご覧ください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The OpenID Connect extension allows you to define the configuration using the `application.properties` file which should be located at the `src/main/resources` directory."
msgstr "OpenID Connect エクステンションを使用すると、src/main/resources` ディレクトリーにあるはずの `application.properties` ファイルを使用して設定を定義することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This is the simplest configuration you can have when enabling authentication to your application."
msgstr "これは、アプリケーションへの認証を有効にする際に最もシンプルな設定です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The `quarkus.oidc.client-id` property references the `client_id` issued by the OpenID Connect Provider and the `quarkus.oidc.credentials.secret` property sets the client secret."
msgstr "`quarkus.oidc.client-id` プロパティーは OpenID Connect プロバイダーが発行した `client_id` を参照し、 `quarkus.oidc.credentials.secret` プロパティーはクライアントの秘密を設定します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The `quarkus.oidc.application-type` property is set to `web-app` in order to tell Quarkus that you want to enable the OpenID Connect Authorization Code Flow, so that your users are redirected to the OpenID Connect Provider to authenticate."
msgstr "OpenID Connect 認可コードフローを有効にしたいことをQuarkusに伝えるために、 `quarkus.oidc.application-type` プロパティーは、 `web-app` に設定します。これにより、ユーザーが認証のためにOpenID Connect Providerにリダイレクトされます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"For last, the `quarkus.http.auth.permission.authenticated` permission is set to tell Quarkus about the paths you want to protect. In this case,\n"
"all paths are being protected by a policy that ensures that only `authenticated` users are allowed to access. For more details check xref:security-authorize-web-endpoints-reference.adoc[Security Authorization Guide]."
msgstr "最後に、保護したいパスについてQuarkusに伝えるために、 `quarkus.http.auth.permission.authenticated` パーミッションが設定されています。この場合では、すべてのパスは、 `authenticated` ユーザーだけがアクセスできるようにするポリシーで保護されています。詳細については、 link:security-authorize-web-endpoints-reference.html[セキュリティ認可ガイド] を参照してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloak サーバーの起動と設定"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "To start a Keycloak Server you can use Docker and just run the following command:"
msgstr "Keycloak サーバーを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "where `keycloak.version` should be set to `17.0.0` or higher."
msgstr "ここで、 `keycloak.version` は `17.0.0` 以上に設定する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You should be able to access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスできるはずです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Log in as the `admin` user to access the Keycloak Administration Console. Username should be `admin` and password `admin`."
msgstr "Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は `admin` 、パスワードは `admin` です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm. For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-web-authentication-quickstart/config/quarkus-realm.json[realm構成ファイル]をインポートします。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新しいレルムの作成] 方法についてのKeycloakのドキュメントを参照してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Running the Application in Dev and JVM modes"
msgstr "開発モードと JVM モードでのアプリケーションの実行"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "To run the application in a dev mode, use:"
msgstr "アプリケーションを開発モードで実行するには、次を使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "When you're done playing with dev mode you can run it as a standard Java application."
msgstr "「開発モード」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Then run it:"
msgstr "次に、以下を実行してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Running the Application in Native Mode"
msgstr "ネイティブモードでのアプリケーションの実行"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resource overhead."
msgstr "これは、生成されたバイナリーにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Compilation will take a bit longer, so this step is disabled by default;\n"
"let's build again by enabling the native build:"
msgstr "コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。ネイティブビルドを有効にして再度ビルドしてみましょう。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲み終わると、このバイナリーは以下のように直接実行出来るようになります:"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "To test the application, you should open your browser and access the following URL:"
msgstr "テストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "http://localhost:8080/tokens[http://localhost:8080/tokens]"
msgstr "http://localhost:8080/tokens[http://localhost:8080/tokens]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If everything is working as expected, you should be redirected to the Keycloak server to authenticate."
msgstr "すべてが期待通りに動作している場合は、認証のためにKeycloakサーバーにリダイレクトされるはずです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In order to authenticate to the application you should type the following credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Username: *alice*"
msgstr "Username: *alice*"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Password: *alice*"
msgstr "Password: *alice*"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "After clicking the `Login` button you should be redirected back to the application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please also see the <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> section below about writing the integration tests which depend on `Dev Services for Keycloak`."
msgstr "また、 `Dev Services for Keycloak`に依存する統合テストの書き方については、以下の <<integration-testing-keycloak-devservices, Dev Services for Keycloak>> セクションを参照してください。"

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Reference Guide"
msgstr "リファレンスガイド"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Accessing ID and Access Tokens"
msgstr "ID とアクセストークンへのアクセス"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC Code Authentication Mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDToken], Access Token and Refresh Token."
msgstr "OIDC コード認証メカニズムは、認可コードフローにおいて https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン] 、アクセストークン、リフレッシュトークンの 3 つのトークンを取得します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"ID Token is always a JWT token and is used to represent a user authentication with the JWT claims.\n"
"One can access ID Token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr "ID トークン は常に JWT トークンであり、JWT クレームでユーザー認証を表現するために使用されます。 `JsonWebToken` に `IdToken` という修飾子をつけて注入することで、ID トークンクレームにアクセスすることができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Access Token is usually used by the OIDC `web-app` application to access other endpoints on behalf of the currently logged-in user. The raw access token can be accessed as follows:"
msgstr "アクセストークンは通常、OIDC `web-app` アプリケーションが、現在ログインしているユーザーの代わりに他のエンドポイントにアクセスするために使用されます。生のアクセストークンは以下のようにアクセスすることができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that `AccessTokenCredential` will have to be used if the Access Token issued to the Quarkus `web-app` application is opaque (binary) and can not be parsed to `JsonWebToken`."
msgstr "Quarkus `web-app` アプリケーションに発行された Access Token が Opaque (バイナリー) で、 `JsonWebToken` にパースできない場合は、 `AccessTokenCredential` を使用しなければならないことに注意してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "RefreshToken is only used to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "RefreshTokenは、その <<session-management,セッション管理>> プロセスの一部として、現在のIDとアクセストークンをリフレッシュするためにのみ使用されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If IdToken does not provide enough information about the currently authenticated user then you can set a `quarkus.oidc.authentication.user-info-required=true` property for a https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC userinfo endpoint to be requested."
msgstr "IdTokenが現在認証されているユーザーに関する十分な情報を提供しない場合は、 `quarkus.oidc.authentication.user-info-required=true` プロパティーを設定することで OIDC の userinfo エンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON オブジェクトを要求することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "A request will be sent to the OpenID Provider UserInfo endpoint using the access token returned with the authorization code grant response and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object will be created. `io.quarkus.oidc.UserInfo` can be either injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr "リクエストは、認可コードグラント応答で返されたアクセストークンを使用して OpenID プロバイダー UserInfo エンドポイントに送信され、 `io.quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー) オブジェクトが作成されます。 `io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として挿入またはアクセスできます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuration Metadata"
msgstr "設定メタデータ"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be either injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントが検出した link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスが可能です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームとセキュリティーアイデンティティロール"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-openid-connect.adoc#token-claims-and-securityidentity-roles[bearer tokens] with the only difference being is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID Token] is used as a source of the roles by default."
msgstr "検証済みトークンからSecurityIdentityのロールにロールをマッピングする方法は、 xref:security-openid-connect.adoc#token-claims-and-securityidentity-roles[ベアラートークン] の場合と同じですが、唯一の違いは、 xref:https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン] がデフォルトでロールのソースとして使用されるということです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note if you use Keycloak then you should set a Microprofile JWT client scope for ID token to contain a `groups` claim, please see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server Administration Guide] for more information."
msgstr "Keycloakを使用する場合は、IDトークン用のMicroprofile JWTクライアントスコープに `groups` クレームを含めるように設定する必要があることに注意してください。詳細については、 link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloakサーバー管理ガイド] を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If only the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンのみがロールを含み、このアクセストークンが下流のエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` をセットします。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If UserInfo is the source of the roles then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles as documented xref:security-overview-concept.adoc#security-identity-customization[here]."
msgstr "さらに、xref:security.adoc#security-identity-customization[ここ] に文書化されているようにロールを追加することにカスタム `SecurityIdentityAugmentor` を使用することも出来ます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Verification And Introspection"
msgstr "トークンの検証とイントロスペクション"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#token-verification-introspection[Token Verification And Introspection] for details about how the tokens are verified and introspected."
msgstr "トークンの検証とイントロスペクトの方法の詳細については、 xref:security-openid-connect.adoc#token-verification-introspection[トークンの検証とイントロスペクション] を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that in case of `web-app` applications only `IdToken` is verified by default since the access token is not used by default to access the current Quarkus `web-app` endpoint and instead meant to be propagated to the services expecting this access token, for example, to the OpenID Connect Provider's UserInfo endpoint, etc. However, if you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`) then it will also be verified."
msgstr "`web-app` アプリケーションの場合、アクセストークンはデフォルトで現在の Quarkus `web-app` エンドポイントにアクセスするために使用されず、代わりにこれを期待するサービスに伝播されることを意図しているため、デフォルトでは `IdToken` のみが検証されることに注意してくださいたとえば、OpenID Connect Provider の UserInfo エンドポイントなどへのアクセストークン。ただし、アクセストークンに現在の Quarkus エンドポイント (`quarkus.oidc.roles.source=accesstoken`) にアクセスするために必要なロールが含まれていると予想される場合は、また、検証されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Introspection and UserInfo Cache"
msgstr "トークンイントロスペクションと UserInfo キャッシュ"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Code flow access tokens are not introspected unless they are expected to be the source of roles but will be used to get `UserInfo`. So there will be one or two remote calls with the code flow access token, if the token introspection and/or `UserInfo` are required."
msgstr "コードフローアクセストークンは、ロールのソースであることが期待されない限り、イントロスペクトされませんが、 `UserInfo` を取得するために使用されます。したがって、トークンのイントロスペクションや `UserInfo` が必要な場合は、コードフローアクセストークンを使用して 1 つまたは 2 つのリモート呼び出しが行われます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#token-introspection-userinfo-cache[Token Introspection and UserInfo cache] for more information about using a default token cache or registering a custom cache implementation."
msgstr "デフォルトのトークンキャッシュの使用またはカスタムキャッシュ実装の登録の詳細については、xref:security-openid-connect.adoc#token-introspection-userinfo-cache[Token Introspection および UserInfo キャッシュ] を参照してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "JSON Web Token Claim Verification"
msgstr "JSON Web トークンのクレーム検証"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Please see xref:security-openid-connect.adoc#jwt-claim-verification[JSON Web Token Claim verification] section about the claim verification, including the `iss` (issuer) claim.\n"
"It applies to ID tokens but also to access tokens in a JWT format if the `web-app` application has requested the access token verification."
msgstr "`iss` (発行者) クレームを含むクレーム検証については、 xref:security-openid-connect.adoc#jwt-claim-verificationJSONWeb[トークンクレーム検証] セクションを参照してください。これは ID トークンに適用されますが、 `web-app` アプリケーションがアクセストークンの検証を要求した場合は JWT 形式のアクセストークンにも適用されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "When the user is redirected to the OpenID Connect Provider to authenticate, the redirect URL includes a `redirect_uri` query parameter which indicates to the Provider where the user has to be redirected to once the authentication has been completed."
msgstr "ユーザーが認証のために OpenID Connect プロバイダーにリダイレクトされる場合、リダイレクト URL には、認証が完了した後にユーザーをリダイレクトする必要がある場所をプロバイダーに示す `redirect_uri` クエリーパラメーターが含まれます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Quarkus will set this parameter to the current request URL by default. For example, if the user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/1`. Similarly, if the request URL is `http://localhost:8080/service/2` then the `redirect_uri` parameter will be set to `http://localhost:8080/service/2`, etc."
msgstr "Quarkus は、デフォルトでこのパラメーターを現在のリクエスト URL に設定します。たとえば、ユーザーが `http://localhost:8080/service/1` で Quarkus サービスエンドポイントにアクセスしようとしている場合、 `redirect_uri` パラメーターは`http://localhost:8080/service/1` に設定されます。同様に、リクエスト URL が `http://localhost:8080/service/2` の場合、 `redirect_uri` パラメーターは `http://localhost:8080/service/2` などに設定されます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"OpenID Connect Providers may be configured to require the `redirect_uri` parameter to have the same value (e.g. `http://localhost:8080/service/callback`) for all the redirect URLs.\n"
"In such cases a `quarkus.oidc.authentication.redirect-path` property has to be set, for example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback` which will be the same regardless of the current request URL."
msgstr "OpenID Connect プロバイダーは、すべてのリダイレクト URL に対して同じ値 (例: `http://localhost:8080/service/callback`) を持つように `redirect_uri` パラメーターを要求するように設定できます。このような場合、 `quarkus.oidc.authentication.redirect-path` プロパティーが設定される必要があります (例: `quarkus.oidc.authentication.redirect-path=/service/callback`)。また、Quarkus は `redirect_uri` パラメータに `http://localhost:8080/service/callback` のような絶対 URL を設定します。これは現在のリクエスト URL に関係なく同じです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If `quarkus.oidc.authentication.redirect-path` is set but the original request URL has to be restored after the user has been redirected back to a callback URL such as `http://localhost:8080/service/callback` then a `quarkus.oidc.authentication.restore-path-after-redirect` property has to be set to `true` which will restore the request URL such as `http://localhost:8080/service/1`, etc."
msgstr "`quarkus.oidc.authentication.redirect-path` が設定されているが、ユーザーが `http://localhost:8080/service/callback` などのコールバック URL にリダイレクトされた後、元のリクエスト URL を復元する必要がある場合 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティーを `true` に設定する必要があります。これにより、 `http://localhost:8080/service/1` などのリクエスト URL が復元されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Dealing with Cookies"
msgstr "クッキーの取り扱い"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The OIDC adapter uses cookies to keep the session, code flow and post logout state."
msgstr "OIDCアダプターは、セッション、コードフロー、ログアウト後の状態を保持するためにクッキーを使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.cookie-path` property is used to ensure the cookies are visible especially when you access the protected resources with overlapping or different roots, for example:"
msgstr "`quarkus.oidc.authentication.cookie-path` プロパティーは、特にルートが重複または異なる保護されたリソースにアクセスするときに Cookie が表示されるようにするために使用されます。次に例を示します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.cookie-path` is set to `/` by default but can be narrowed to the more specific root path such as `/web-app`."
msgstr "`quarkus.oidc.authentication.cookie-path` は、デフォルトでは `/` に設定されていますが、 `/web-app` のように、より具体的なルートパスに絞り込むことができます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"You can also set a `quarkus.oidc.authentication.cookie-path-header` property if the cookie path needs to be set dynamically.\n"
"For example, setting `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` means that the value of HTTP `X-Forwarded-Prefix` header will be used to set a cookie path."
msgstr "クッキーパスを動的に設定する必要がある場合は、 `quarkus.oidc.authentication.cookie-path-header` プロパティを設定することもできます。例えば、 `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` を設定すると、HTTP `X-Forwarded-Prefix` ヘッダーの値がクッキーパスを設定するために使用されることを意味します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストで設定された HTTP ヘッダーが利用できない場合は、 `quarkus.oidc.authentication.cookie-path` がチェックされます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If your application is deployed across multiple domains, make sure to set a `quarkus.oidc.authentication.cookie-domain` property for the session cookie be visible to all protected Quarkus services, for example, if you have 2 services deployed at:"
msgstr "アプリケーションが複数のドメインにデプロイされている場合は、セッション Cookie の `quarkus.oidc.authentication.cookie-domain` プロパティーを設定して、保護されているすべての Quarkus サービスに表示されるようにしてください。たとえば、次の場所に 2 つのサービスがデプロイされている場合です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "then the `quarkus.oidc.authentication.cookie-domain` property must be set to `company.net`."
msgstr "次に、 `quarkus.oidc.authentication.cookie-domain` プロパティーを `company.net` に設定する必要があります。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Logout"
msgstr "ログアウト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "By default, the logout is based on the expiration time of the ID Token issued by the OpenID Connect Provider. When the ID Token expires, the current user session at the Quarkus endpoint is invalidated and the user is redirected to the OpenID Connect Provider again to authenticate. If the session at the OpenID Connect Provider is still active, users are automatically re-authenticated without having to provide their credentials again."
msgstr "デフォルトでは、ログアウトはOpenID Connect Providerが発行したID Tokenの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OpenID Connect Providerにリダイレクトされます。OpenID Connect Providerでのセッションがまだアクティブな場合は、ユーザーは再び資格情報を提供することなく自動的に再認証されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The current user session may be automatically extended by enabling a `quarkus.oidc.token.refresh-expired` property. If it is set to `true` then when the current ID Token expires a Refresh Token Grant will be used to refresh ID Token as well as Access and Refresh Tokens."
msgstr "現在のユーザーセッションは、 `quarkus.oidc.token.refresh-expired` プロパティーを有効にすることで自動的に拡張される場合があります。 `true` に設定されている場合、現在の ID トークンの有効期限が切れると、リフレッシュ・トークンの付与が使用され、ID トークンだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "User-Initiated Logout"
msgstr "ユーザー主導型ログアウト"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to \"/logout\" then the logout request has to be sent to `https://application.com/webapp/logout`."
msgstr "ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が \"/logout\" に設定されている場合、ログアウト要求は `https://application.com/webapp/logout` に送信されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This logout request will start an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be redirected to the OpenID Connect Provider to logout where a user may be asked to confirm the logout is indeed intended."
msgstr "このログアウト要求により、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] が開始され、ユーザーは OpenID Connect Provider にリダイレクトされ、そこでログアウトできます。ログアウトが実際に意図されていることを確認するように求められます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The user will be returned to the endpoint post logout page once the logout has been completed if the `quarkus.oidc.logout.post-logout-path` property is set. For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" then the user will be returned to `https://application.com/webapp/signin` (note this URI must be registered as a valid `post_logout_redirect_uri` in the OpenID Connect Provider)."
msgstr "`quarkus.oidc.logout.post-logout-path` プロパティーが設定されている場合、ログアウトが完了すると、ユーザーはエンドポイントのログアウト後ページに戻ります。たとえば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が \"/signin\" に設定されている場合、ユーザーは `https://application.com/webapp/signin` (この URI は OpenID Connect プロバイダーに有効な `post_logout_redirect_uri` として登録されている必要があることに注意してください)。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OpenID Connect Provider will return this `state` once the logout has been completed. It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie which can be done for example in a JAX-RS filter."
msgstr "`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` Cookie が作成され、一致する `state` クエリーパラメーターがログアウトリダイレクト URI に追加されます。ログアウトが完了すると、OpenID Connect プロバイダーはこの `state` を返します。Quarkus の `web-app` アプリケーションでは、 `state` クエリーパラメーターが `q_post_logout` cookie の値と一致することを確認することをお勧めします。これは、たとえば JAX-RS フィルターで実行できます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that a cookie name will vary when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy]. For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシー] を使用する場合、クッキーの名前が異なることに注意してください。例えば、 `tenant_1` という ID のテナントに対しては `q_post_logout_tenant_1` という名前になるなどです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr "RP によって開始されるログアウトフローを設定する方法の例を次に示します。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources which is `/` in this example.\n"
"See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr "また、 `quarkus.oidc.authentication.cookie-path` に、すべてのアプリケーションリソースに共通するパス値 (この例では `/` ) を設定する必要がある場合もあります。詳しくは、 <<oidc-cookies, クッキーの取り扱い>> を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that some OpenID Connect providers do not support https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification (possibly because it is still technically a draft) and do not return an OpenID Connect well-known `end_session_endpoint` metadata property. However, it should not be a problem since these providers' specific logout mechanisms may only differ in how the logout URL query parameters are named."
msgstr "OpenID Connect プロバイダーの中には、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] 仕様をサポートしておらず (おそらく技術的にまだドラフトであるため)、OpenID Connect がよく知る `end_session_endpoint` メタデータプロパティーを返さないものがあることに注意してください。しかし、これらのプロバイダー特有のログアウトメカニズムは、ログアウト URL クエリーパラメーターの命名方法が異なるだけなので、問題にはなりません。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter which will not be recognized by the providers which do not support this specification."
msgstr "https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-Initiated Logout] 仕様によると、 `quarkus.oidc.logout.post-logout-path` プロパティ－は `post_logout_redirect_uri` クエリパラメータとして表され、この仕様をサポートしていないプロバイダ－では認識されません。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue. You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`. For example, here is how you can support a logout with `Auth0`:"
msgstr "この問題を回避するには、 `quarkus.oidc.logout.post-logout-url-param` を使用できます。 `quarkus.oidc.logout.extra-params` で追加されたログアウトクエリーパラメーターをさらにリクエストすることもできます。たとえば、 `Auth0` でログアウトをサポートする方法は次のとおりです。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Back-Channel Logout"
msgstr "バックチャンネルログアウト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-Channel Logout] is used by OpenID Connect providers to log out the current user from all the applications this user is currently logged in, bypassing the user agent."
msgstr "link:https://openid.net/specs/openid-connect-backchannel-1_0.html[バックチャンネルログアウト] は、OpenID Connect プロバイダーが、このユーザーが現在ログインしているすべてのアプリケーションから、ユーザーエージェントをバイパスして、現在のユーザーをログアウトするために使用されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can configure Quarkus to support `Back-Channel Logout` as follows:"
msgstr "次のように、バックチャネルログアウトをサポートするように Quarkus を設定できます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Absolute `Back-Channel Logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`. You will need to configure this URL in the Admin Console of your OpenID Connect Provider."
msgstr "絶対的な `Back-Channel Logout` URL は、現在のエンドポイント URL に `quarkus.oidc.back-channel-logout.path` を追加することで算出されます (例: `http://localhost:8080/back-channel-logout`)。この URL は、OpenID Connect Provider の Admin Console で設定する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that you will also need to configure a token age property for the logout token verification to succeed if your OpenID Connect Provider does not set an expiry claim in the current logout token, for example, `quarkus.oidc.token.age=10S` sets a number of seconds that must not elapse since the logout token's `iat` (issued at) time to 10."
msgstr "なお、OpenID Connect Providerが現在のログアウトトークンに有効期限を設定していない場合、ログアウトトークンの検証を成功させるためには、token ageプロパティも設定する必要があります。例えば、 `quarkus.oidc.token.age=10S` では、ログアウトトークンの `iat` (issued at) 時から経過してはならない秒数を10に設定します。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Front-Channel Logout"
msgstr "フロントチャネルログアウト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-Channel Logout] can be used to logout the current user directly from the user agent."
msgstr "link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[フロントチャネルログアウト]は、ユーザーエージェントから直接、現在のユーザーをログアウトするために使用することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can configure Quarkus to support `Front-Channel Logout` as follows:"
msgstr "次のように、フロントチャネルログアウトをサポートするように Quarkus を設定できます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This path will be compared against the current request's path and the user will be logged out if these paths match."
msgstr "このパスは現在のリクエストのパスと比較され、これらのパスが一致する場合、ユーザーはログアウトされます。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Local Logout"
msgstr "ローカルログアウト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you work with a social provider such as Google and are concerned that the users can be logged out from all their Google applications with the <<user-initiated-logout,User-Initiated Logout>> which redirects the users to the provider's logout endpoint then you can support a local logout with the help of the <<oidc-session,OidcSession>> which only clears the local session cookie, for example:"
msgstr "Google などのソーシャル・プロバイダーと連携しており、プロバイダーのログアウトエンドポイントにリダイレクトされる <<user-initiated-logout,ユーザー主導型ログアウト>> で、ユーザーがすべての Google アプリケーションからログアウトされることを懸念している場合は、ローカルセッションのクッキーのみをクリアする、 <<oidc-session,OidcSession>> でローカルログアウトをサポートすることができます。以下に例を示します。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Session Management"
msgstr "セッション管理"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you have a xref:security-openid-connect.adoc#single-page-applications[Single Page Application for Service Applications] where your OpenID Connect Provider script such as `keycloak.js` is managing an authorization code flow then that script will also control the SPA authentication session lifespan."
msgstr "`keycloak.js` などの OpenID Connect Provider スクリプトが認可コードフローを管理している xref:security-openid-connect.adoc#single-page-applications[サービスアプリケーション用のシングルページアプリケーション] の場合、そのスクリプトは SPA 認証セッションの寿命も制御します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application then it is Quarkus OIDC Code Authentication mechanism which is managing the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションで作業している場合、ユーザーセッションの寿命を管理しているのはQuarkus OIDCコード認証メカニズムです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The session age is calculated by adding the lifespan value of the current IDToken and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties. Of the last two properties only `quarkus.oidc.authentication.session-age-extension` should be used to significantly extend the session lifespan if required since `quarkus.oidc.token.lifespan-grace` is only meant for taking some small clock skews into consideration."
msgstr "セッション年齢は、現在のIDTokenの寿命値と、 `quarkus.oidc.authentication.session-age-extension` と `quarkus.oidc.token.lifespan-grace` プロパティーの値を加算して計算されます。最後の2つのプロパティーのうち、 `quarkus.oidc.authentication.session-age-extension` だけは、必要に応じてセッションの寿命を大幅に延ばすために使用すべきです。 `quarkus.oidc.token.lifespan-grace` は小さなクロックスキューを考慮することだけを目的としている為です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "When the currently authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired then, by default, the user will be auto-redirected to the OIDC Authorization endpoint to re-authenticate. Most likely the OIDC provider will challenge the user again though not necessarily if the session between the user and this OIDC provider is still active which may happen if it is configured to last longer than the ID token."
msgstr "現在認証されているユーザーが保護された Quarkus エンドポイントに戻り、セッションクッキーに関連付けられた ID トークンの有効期限が切れた場合、デフォルトでは、再認証のために OIDC 認証エンドポイントに自動でリダイレクトされます。OIDC プロバイダーは、ユーザーとこの OIDC プロバイダーとのセッションがまだ有効であれば、必ずしも再チャレンジする必要はありませんが、ID トークンよりも長くセッションが持続するように設定されている場合は、そのようになる可能性があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If the `quarkus.oidc.token.refresh-expired` then the expired ID token (as well as the access token) will be refreshed using the refresh token returned with the authorization code grant response. This refresh token may also be recycled (refreshed) itself as part of this process. As a result the new session cookie will be created and the session will be extended."
msgstr "`quarkus.oidc.token.refresh-expired` を指定すると、認可コード付与応答で返されたリフレッシュトークンを使用して、期限切れの ID トークン (アクセストークンも含む) がリフレッシュされます。このリフレッシュトークンは、このプロセスの一部としてリサイクル (リフレッシュ) されることもあります。その結果、新しいセッションクッキーが作成され、セッションが延長されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note, `quarkus.oidc.authentication.session-age-extension` can be important when dealing with expired ID tokens, when the user is not very active. In such cases, if the ID token expires, then the session cookie may not be returned to the Quarkus endpoint during the next user request and Quarkus will assume it is the first authentication request. Therefore, using `quarkus.oidc.authentication.session-age-extension` is important if you need to have even the expired ID tokens refreshed."
msgstr "`quarkus.oidc.authentication.session-age-extension` は、ユーザーがあまりアクティブでないときに、期限切れの ID トークンを処理するときに重要になる可能性があることに注意してください。このような場合、ID トークンの有効期限が切れると、セッション Cookie は次のユーザーリクエスト中に Quarkus エンドポイントに戻されない可能性があり、Quarkus はそれが最初の認証リクエストであると見なします。したがって、期限切れの ID トークンを更新する必要がある場合は、 `quarkus.oidc.authentication.session-age-extension` を使用することが重要です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can also complement refreshing the expired ID tokens by proactively refreshing the valid ID tokens which are about to be expired within the `quarkus.oidc.token.refresh-token-time-skew` value. If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew` then it will be refreshed and the new session cookie will be created. This property should be set to a value which is less than the ID token lifespan; the closer it is to this lifespan value the more often the ID token will be refreshed."
msgstr "また、 `quarkus.oidc.token.refresh-token-time-skew` の値内で期限が切れそうな有効な ID トークンを積極的にリフレッシュして、期限切れの ID トークンを補完することも可能です。現在のユーザーリクエストの間に、現在の ID トークンがこの `quarkus.oidc.token.refresh-token-time-skew` 値の範囲内で期限切れとなることが計算されると、リフレッシュされて新しいセッションクッキーが作成されます。このプロパティーには、ID トークンの寿命よりも短い値を設定する必要があります。この寿命の値に近いほど、ID トークンはより頻繁にリフレッシュされます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can have this process further optimized by having a simple JavaScript function periodically emulating the user activity by pinging your Quarkus endpoint thus minimizing the window during which the user may have to be re-authenticated."
msgstr "シンプルな JavaScript 関数が、Quarkus エンドポイントへの ping 送信によってユーザーの活動を定期的にエミュレートし、ユーザーが再認証されるウィンドウを最小限に抑えることで、このプロセスをさらに最適化することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note this user session can not be extended forever - the returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr "このユーザーセッションは永久に延長されるわけではありません。リフレッシュトークンの有効期限が切れると、ID トークンを持つ復帰ユーザーは OIDC プロバイダーのエンドポイントで再認証を行う必要があります。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "OidcSession"
msgstr "OidcSession"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`. It can help to perform a <<local-logout, Local Logout>>, retrieve the current session's tenant identifier and check when the session will expire. More useful methods will be added to it over time."
msgstr "`io.quarkus.oidc.OidcSession` は、現在の `IdToken` のラッパーのようなものです。 <<local-logout, ローカルログアウト>> を実行したり、現在のセッションのテナント識別子を取得したり、セッションの有効期限を確認したりすることができます。今後、より便利なメソッドが追加される予定です。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "TokenStateManager"
msgstr "TokenStateManager"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC `CodeAuthenticationMechanism` is using the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access and refresh tokens returned in the authorization code or refresh grant responses in a session cookie. It makes Quarkus OIDC endpoints completely stateless."
msgstr "OIDC `CodeAuthenticationMechanism` は、デフォルトの `io.quarkus.oidc.TokenStateManager` インターフェイス実装を使用して、認可コードで返された ID、アクセス、更新トークンを保持するか、セッション Cookie の付与応答を更新します。これにより、Quarkus OIDC エンドポイントは完全にステートレスになります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that some endpoints do not require the access token. An access token is only required if the endpoint needs to retrieve `UserInfo` or access the downstream service with this access token or use the roles associated with the access token (the roles in the ID token are checked by default). In such cases you can set either `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (keep ID and refresh tokens only) or `quarkus.oidc.token-state-manager.strategy=id-token` (keep ID token only)."
msgstr "エンドポイントによっては、アクセストークンを必要としないものもあることに注意しましょう。アクセストークンが必要なのは、エンドポイントが `UserInfo` を取得したり、このアクセストークンを使って下流のサービスにアクセスしたり、アクセストークンに関連付けられたロール (デフォルトでは ID トークンのロールがチェックされます) を使用する必要がある場合のみです。このような場合は、 `quarkus.oidc.token-state-manager.strategy=id-refresh-token` (ID およびリフレッシュトークンのみを保持) または `quarkus.oidc.token-state-manager.strategy=id-token` (ID トークンだけを保持) を設定できます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If the ID, access and refresh tokens are JWT tokens then combining all of them (if the strategy is the default `keep-all-tokens`) or only ID and refresh tokens (if the strategy is `id-refresh-token`) may produce a session cookie value larger than 4KB and the browsers may not be able to keep this cookie.\n"
"In such cases, you can use `quarkus.oidc.token-state-manager.split-tokens=true` to have a unique session token per each of these tokens."
msgstr "ID、アクセス、リフレッシュの各トークンが JWT トークンの場合、それらすべてを組み合わせたり (ストラテジーがデフォルトの `keep-all-tokens` の場合)、ID およびリフレッシュトークンのみ (ストラテジーが `id-refresh-token` の場合)、セッションクッキーの値が 4KB 以上になり、ブラウザーがこのクッキーを保持できない可能性があります。このような場合、 `quarkus.oidc.token-state-manager.split-tokens=true` を使用して、これらのトークンごとに一意のセッショントークンを持たせることができます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"You can also configure the default `TokenStateManager` to encrypt the tokens before storing them as cookie values which may be necessary if the tokens contain sensitive claim values.\n"
"For example, here is how you configure it to split the tokens and encrypt them:"
msgstr "また、デフォルトの `TokenStateManager` を設定して、トークンを暗号化してからクッキーの値として保存することもできます。これは、トークンが機密性の高い請求値を含む場合に必要な場合があります。例えば、トークンを分割して暗号化するように設定する方法は以下のとおりです。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"The token encryption secret must be 32 characters long. Note that you only have to set `quarkus.oidc.token-state-manager.encryption-secret` if you prefer not to use\n"
"`quarkus.oidc.credentials.secret` for encrypting the tokens or if `quarkus.oidc.credentials.secret` length is less than 32 characters."
msgstr "トークン暗号化の秘密は、32 文字でなければなりません。トークンの暗号化に `quarkus.oidc.credentials.secret` を使用しない場合、または `quarkus.oidc.credentials.secret` の長さが 32 文字未満の場合のみ `quarkus.oidc.token-state-manager.encryption-secret` を設定する必要があることに留意してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Register your own `io.quarkus.oidc.TokenStateManager' implementation as an `@ApplicationScoped` CDI bean if you need to customize the way the tokens are associated with the session cookie. For example, you may want to keep the tokens in a database and have only a database pointer stored in a session cookie. Note though that it may present some challenges in making the tokens available across multiple microservices nodes."
msgstr "トークンがセッションクッキーと関連付けられる方法をカスタマイズする必要がある場合は、独自の `io.quarkus.oidc.TokenStateManager` 実装を `@ApplicationScoped` CDI Bean として登録します。例えば、トークンをデータベースに保存し、セッションクッキーにはデータベースポインターだけを保存させたいと思うかもしれません。しかし、複数のマイクロサービスノードでトークンを利用できるようにするには、いくつかの課題が生じる可能性があることに注意してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Proof Of Key for Code Exchange (PKCE)"
msgstr "コード交換 (PKCE) のキーの証明"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Of Key for Code Exchange] (PKCE) minimizes the risk of the authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Of Key for Code Exchange] (PKCE) は、認可コードの傍受のリスクを最小限に抑えます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "While `PKCE` is of primary importance to the public OpenID Connect clients (such as the SPA scripts running in a browser), it can also provide an extra level of protection to Quarkus OIDC `web-app` applications which are confidential OpenID Connect clients capable of securely storing the client secret and using it to exchange the code for the tokens."
msgstr "`PKCE` は公開 OpenID Connect クライアント (ブラウザーで動作する SPA スクリプトなど) にとって最も重要ですが、クライアントシークレットを安全に保存し、トークンのコード交換に使用できる機密 OpenID Connect クライアントである Quarkus OIDC `web-app` アプリケーションにも追加レベルの保護を提供することが可能です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can enable `PKCE` for your OIDC `web-app` endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32 characters long secret, for example:"
msgstr "OIDC の `web-app` エンドポイントで `PKCE` を有効にするには、例えば `quarkus.oidc.authentication.pkce-required` プロパティーと 32 文字の長さのシークレットを指定することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you already have a 32 characters long client secret then `quarkus.oidc.authentication.pkce-secret` does not have to be set unless you prefer to use a different secret key."
msgstr "32文字長のクライアントシークレットをすでにお持ちの場合は、別のシークレットキーを使用する場合を除き、 `quarkus.oidc.authentication.pkce-secret` を設定する必要はありません。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The secret key is required for encrypting a randomly generated `PKCE` `code_verifier` while the user is being redirected with the `code_challenge` query parameter to OpenID Connect Provider to authenticate. The `code_verifier` will be decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret and other parameters to complete the code exchange. The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` provided during the authentication request."
msgstr "秘密鍵は、ユーザーが認証のために OpenID Connect Provider に `code_challenge` クエリーパラメーターでリダイレクトされている間に、ランダムに生成される `PKCE` `code_verifier` を暗号化するために必要となります。Code_verifier` は、ユーザーが Quarkus にリダイレクトされる際に復号化され、 `code` やクライアントシークレットなどのパラメーターと一緒にトークンエンドポイントに送信され、コード交換を完了させることができます。プロバイダーは `code_verifier` の `SHA256` ダイジェストが認証リクエストで指定された `code_challenge` と一致しない場合、コード交換に失敗します。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "One can register `@ApplicationScoped` bean which will observe important OIDC authentication events. The listener will be updated when a user has logged in for the first time or re-authenticated, as well as when the session has been refreshed. More events may be reported in the future. For example:"
msgstr "重要な OIDC 認証イベントを監視する `@ApplicationScoped` Bean を登録できます。リスナーは、ユーザーが初めてログインしたとき、または再認証されたとき、およびセッションが更新されたときに更新されます。今後、さらに多くのイベントが報告される可能性があります。例えば:"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please check if implementing SPAs the way it is suggested in the xref:security-openid-connect.adoc#single-page-applications[Single Page Applications for Service Applications] section can meet your requirements."
msgstr "xref:security-openid-connect.adoc#single-page-applications[サービスアプリケーションのシングルページアプリケーション] セクションで提案されている方法で SPA を実装することが要件を満たすことができるかどうかを確認してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you prefer to use SPA and JavaScript API such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that OpenID Connect Providers may not support CORS for Authorization endpoints where the users are authenticated after a redirect from Quarkus. This will lead to authentication failures if the Quarkus application and the OpenID Connect Provider are hosted on the different HTTP domains/ports."
msgstr "Quarkus Web アプリケーションで SPA や、 `Fetch` または `XMLHttpRequest`(XHR) などの JavaScript API を使用する場合は、OpenID Connect Provider が、Quarkus からのリダイレクト後にユーザーが認証される認証エンドポイントの CORS をサポートしない場合があることに注意してください。Quarkus アプリケーションと OpenID Connect Provider が異なる HTTP ドメイン/ポートでホストされている場合、認証に失敗することになります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false` which will instruct Quarkus to return a `499` status code and `WWW-Authenticate` header with the `OIDC` value. The browser script also needs to be updated to set `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of `499`, for example:"
msgstr "この場合、 `Quarkus.oidc.authentication.java-script-auto-redirect` プロパティーを `false` に設定すると、ステータスコード `499` と `OIDC` 値を持つ `WWW-Authenticate` ヘッダーを返すように Quarkus に指示が出されます。ブラウザースクリプトも更新して、 `X-Requested-With` ヘッダーに `JavaScript` 値を設定し、 `499` の場合は最後にリクエストしたページを再読み込みするなどの処理が必要になります。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Cross Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you plan to consume this application from a Single Page Application running on a different domain, you will need to configure CORS (Cross-Origin Resource Sharing). Please read the xref:http-reference.adoc#cors-filter[HTTP CORS documentation] for more details."
msgstr "別のドメインで動作する Single Page Application からこのアプリケーションを利用する場合は、CORS (Cross-Origin Resource Sharing) を設定する必要があります。詳細については、 link:http-reference.html#cors-filter[HTTP CORSのドキュメント]を参照してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Integration with GitHub and other OAuth2 providers"
msgstr "GitHub およびその他の OAuth2 プロバイダーとの統合"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Some well known providers such as GitHub or LinkedIn are not OpenID Connect but OAuth2 providers which support the `authorization code flow`, for example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2]."
msgstr "GitHub や LinkedIn といった有名なプロバイダーのいくつかは、 OpenID Connect ではなく、OAuth2 `authorization code flow` をサポートするプロバイダーです。例えば、link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2]や link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] などです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The main difference between OpenID Connect and OAuth2 providers is that OpenID Connect providers, by building on top of OAuth2, return an `ID Token` representing a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OpenID Connect プロバイダーと OAuth2 プロバイダーの主な違いは、OAuth2 の上に構築された OpenID Connect プロバイダーは、 `OAuth2` プロバイダーが返す標準の認可コードフロー `access` と `refresh` トークンに加えて、ユーザー認証を表す `ID トークン` を返すという点です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "OAuth2 providers such as GitHub do not return `IdToken`, the fact of the user authentication is implicit and is indirectly represented by the `access` token which represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr "GitHub のような OAuth2 プロバイダーは `IdToken` を返しません。ユーザー認証の事実は暗黙の了解で、認証済みユーザーの代わりに現在の Quarkus `web-app` アプリケーションがデータにアクセスすることを許可する `access` トークンで間接的に表現されます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token which will allow it to request a GitHub profile of the current user.\n"
"In fact this is exactly how a standard OpenID Connect `UserInfo` acquisition also works - by authenticating into your OpenID Connect provider you also give a permission to Quarkus application to acquire your <<user-info,UserInfo>> on your behalf - and it also shows what is meant by OpenID Connect being built on top of OAuth2."
msgstr "例えば、GitHub で作業する場合、Quarkus のエンドポイントは `access` トークンを取得し、現在のユーザーの GitHub プロファイルを要求することができます。実際、標準的な OpenID Connect の `UserInfo` の取得も、このように動作します。OpenID Connect プロバイダーを認証することで、Quarkus アプリケーションに、ユーザーの代わりに <<user-info,ユーザー情報>> を取得する許可を与えることになります。また、これは、OpenID Connect が OAuth2 の上に構築されていることの意味も示しています。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In order to support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "このような OAuth2 サーバーとの統合をサポートするには、 `quarkus-oidc` を設定して、 `IdToken`: `quarkus.oidc.authentication.id-token-required=false` なしで認可コードのフローレスポンスを許可する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "It is required because `quarkus-oidc` expects that not only `access` and `refresh` tokens but also `IdToken` will be returned once the authorization code flow completes."
msgstr "これは `quarkus-oidc` が、認可コードフローが完了したら `access` と `refresh` トークンだけでなく `IdToken` も返すことを想定しているためです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note, even though you will configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` will be generated to support the way `quarkus-oidc` operates where an `IdToken` is used to support the authentication session and to avoid redirecting the user to the provider such as GitHub on every request. In this case the session lifespan is set to 5 minutes which can be extended further as described in the <<session-management,session management>> section."
msgstr "注意: `IdToken` なしで認可コードのフローをサポートするようにエクステンションを設定しても、 `quarkus-oidc` の動作をサポートするために内部で `IdToken` が生成され、 `IdToken` は認証セッションをサポートし、リクエストごとに GitHub などのプロバイダーにリダイレクトされるのを回避するために使用されます。この場合、セッションの有効期限は 5 分に設定されていますが、<<session-management,セッション管理>> セクションで説明するように、さらに延長することができます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful to the current Quarkus endpoint.\n"
"If the OAuth2 provider supports the introspection endpoint then you may be able to use this access token as a source of roles with `quarkus.oidc.roles.source=accesstoken`. If no introspection endpoint is available then at the very least it should be possible to request <<user-info,UserInfo>> from this provider with `quarkus.oidc.authentication.user-info-required` - this is the case with GitHub."
msgstr "次のステップは、返されたアクセストークンが現在のQuarkusエンドポイントに有用であることを確認することです。OAuth2 プロバイダーがintrospection エンドポイントをサポートしている場合、 `quarkus.oidc.roles.source=accesstoken` でロールのソースとしてこのアクセストークンを使用できる場合があります。イントロスペクションエンドポイントが利用できない場合、最低限、このプロバイダから `quarkus.oidc.authentication.user-info-required` で <<user-info,ユーザー情報>> をリクエストすることが可能であるべきです （これは、GitHub の場合です)。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Configuring the endpoint to request <<user-info,UserInfo>> is the only way `quarkus-oidc` can be integrated with the providers such as GitHub."
msgstr "<<user-info,ユーザー情報>> を要求するエンドポイントの設定 は、 `quarkus-oidc` を GitHub などのプロバイダーと統合できる唯一の方法です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Note that requiring <<user-info,UserInfo>> involves making a remote call on every request - therefore you may want to consider caching `UserInfo` data, see <<token-introspection-userinfo-cache,Token Introspection and UserInfo Cache> for more details."
msgstr "<<user-info,ユーザー情報>> を要求すると、リクエストのたびにリモートコールを行うことになるので、 `UserInfo` データのキャッシュを検討するとよいでしょう。詳しくは <<token-introspection-userinfo-cache,トークンイントロスペクションと UserInfo キャッシ"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Alternatively, you may want to request that `UserInfo` is embedded into the internal generated `IdToken` with the `quarkus.oidc.cache-user-info-in-idtoken=true` property - the advantage of this approach is that by default no cached `UserInfo` state will be kept with the endpoint - instead it will be stored in a session cookie. You may also want to consider encrypting `IdToken` in this case if `UserInfo` contains sensitive data, please see <<token-state-manager,Encrypt Tokens With TokenStateManager>> for more information."
msgstr "また、 `quarkus.oidc.cache-user-info-in-idtoken=true` プロパティーを指定して、 `UserInfo` を内部生成される `IdToken` に埋め込むように要求することもできます。この方法の利点は、デフォルトでは `UserInfo` のキャッシュ状態がエンドポイントに保持されない代わりに、セッション Cookie に保持されることです。また、 `UserInfo` に機密情報が含まれている場合は、 `IdToken` を暗号化することを検討するとよいでしょう。詳細は <<token-state-manager,TokenStateManager によるトークンの暗号化>> を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Also, OAuth2 servers may not support a well-known configuration endpoint in which case the discovery has to be disabled and the authorization, token, and introspection and/or userinfo endpoint paths have to be configured manually."
msgstr "また、OAuth2 サーバーは、よく知られた設定エンドポイントをサポートしていない場合があります。その場合は、検出を無効にして、認証、トークン、イントロスペクション、および/またはユーザー情報のエンドポイントパスを手動で設定する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application]. Configure your Quarkus endpoint like this:"
msgstr "link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuth アプリケーションを作成した] 後に、 `quarkus-oidc` を GitHub と統合する方法を説明します。Quarkus のエンドポイントをこのように設定します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "See xref:security-openid-connect-providers.adoc[Well Known OpenID Connect providers] for more details about configuring other well-known providers."
msgstr "他の既知のプロバイダーの設定の詳細については、xref:security-openid-connect-providers.adoc[よく知られた OpenID Connect プロバイダーの設定] を参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "This is all what is needed for an endpoint like this one to return the currently authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "このようなエンドポイントに必要なことは、現在認証されているユーザーのプロファイルを `GET http://localhost:8080/github/userinfo` で返し、それを個々の `UserInfo` プロパティーとしてアクセスすることです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google which is an OpenID Connect Provider returning `IdToken` and GitHub which is an OAuth2 provider returning no `IdToken` and only allowing to access `UserInfo` then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows. A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally generated `IdToken` will be replaced with the `UserInfo` based principal when the GiHub flow is active:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシー] の利用で複数のソーシャルプロバイダーをサポートしている場合、例えば OpenID Connect プロバイダーである Google が `IdToken` を返し、OAuth2 プロバイダーである GitHub が `IdToken` を返さず `UserInfo` のみアクセスを許可していれば、エンドポイントには Google と GitHub 両フロー用の `SecurityIdentity` しか入れられないようにすることができます。GiHub フローがアクティブになると、内部で生成された `IdToken` で作成されたプリンシパルが `UserInfo` ベースのプリンシパルに置き換えられるので、 `SecurityIdentity` を単純に拡張する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Now, the following code will work when the user is signing in into your application with both Google or GitHub:"
msgstr "これで、ユーザーが Google または GitHub の両方を使用してアプリケーションにサインインしているときに、次のコードが機能します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when dealing with the providers returning `IdToken` and `UserInfo` - with the providers which do not return `IdToken`."
msgstr "よりシンプルな方法としては、 `@IdToken JsonWebToken` と `UserInfo` の両方をインジェクトして、 `IdToken` と `UserInfo` を返すプロバイダーを扱うときには `JsonWebToken` を使用します。 `IdToken` を返さないプロバイダーでは、 `UserInfo` を使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "The last important point is to make sure the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you'd like the user be redirected to after a successful GitHub authentication and application authorization, in this case it has to be set to `http:localhost:8080/github/userinfo`."
msgstr "最後の重要なポイントは、GitHub OAuth アプリケーション設定に入力するコールバックパスが、GitHub 認証とアプリケーション承認が成功した後にユーザーをリダイレクトするエンドポイントパスと一致することを確認することです。この場合は、 `http:localhost:8080/github/userinfo` に設定する必要があります。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Cloud Services"
msgstr "クラウドサービス"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Google Cloud"
msgstr "Google Cloud"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OpenID Connect (Authorization Code Flow) permissions to such services in their Google Developer Consoles."
msgstr "Quarkus OIDC `web-app` アプリケーションは、Google Developer Consolesで *BigQuery* などのサービスに対するOpendId Connect(Authorization Code Flow)パーミッションを有効にしている現在認証されたユーザーに代わって、 *BigQuery* などの *Google Cloudサービスに* アクセスすることができます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services], only add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency, for example:"
msgstr "link:https://github.com/quarkiverse[Quarkiverse] のlink:https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services] で行うのは超簡単で、 link:https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新のタグ] サービスの依存関係を追加するだけです。例:"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "and configure Google OIDC properties:"
msgstr "そしてGoogle OIDCプロパティーを設定します。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Provider Endpoint configuration"
msgstr "プロバイダーエンドポイント設定"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC `web-app` application needs to know OpenID Connect provider's authorization, token, `JsonWebKey` (JWK) set and possibly `UserInfo`, introspection and end session (RP-initiated logout) endpoint addresses."
msgstr "OIDC `web-app` アプリケーションは OpenID Connect プロバイダーの認証、トークン、 `JsonWebKey` (JWK) セット、そしておそらく `UserInfo`、イントロスペクション、エンドポイント (RP が起動するログアウト) アドレスを知っている必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Alternatively, if the discovery endpoint is not available, or if you would like to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、相対パスの値で設定することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Sometimes your OpenId Connect provider supports a metadata discovery but does not return all the endpoint URLs required for the authorization code flow to complete or for the application to support the additional functions such as a user logout. In such cases you can simply configure a missing endpoint URL locally:"
msgstr "OpenId Connect プロバイダがメタデータの検出をサポートしていても、 認可コードフローを完了させたりアプリケーションがログアウトなどの追加機能をサポートしたりするのに必要なエンドポイント URL をすべて返さないことがあります。そのような場合は、不足するエンドポイントURLをローカルに設定するだけです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Exactly the same configuration can be used to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required. For example, one can imagine that in the above example, a provider which supports both global and application specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout` which will logout the user from all the applications this user is currently logged in, while the current application only wants to get this user logged out from this application, therefore, `quarkus.oidc.end-session-path=logout` is used to override the global end-session URL."
msgstr "検出されたエンドポイントURLがローカルのQuarkusエンドポイントで機能せず、より具体的な値が必要な場合、まったく同じ設定を使用して上書きすることができます。例えば、上記の例で、グローバルエンドセッションとアプリケーション固有のエンドポイントの両方をサポートするプロバイダが、グローバルエンドセッションURL（ `http://localhost:8180/oidcprovider/account/global-logout` など）を返すと、このユーザーが現在ログインしているすべてのアプリケーションからユーザーがログアウトしますが、現在のアプリケーションはこのアプリケーションからユーザーのログアウトを取得したいだけだと想像できます。したがって、グローバルエンドセッションURLをオーバーライドするには `quarkus.oidc.end-session-path=logout` が使用されます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect-client-reference.adoc#token-propagation[Token Propagation] section about the Authorization Code Flow access token propagation to the downstream services."
msgstr "下流サービスへの認可コードフローアクセストークンの伝播については、xref:security-openid-connect-client-reference.adoc#token-propagation[トークンの伝播] の項を参照してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Oidc Provider Client Authentication"
msgstr "Oidc プロバイダークライアント認証"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OpenID Connect Provider has to be done. It has to authenticate to the OpenID Connect Provider when the authorization code has to be exchanged for the ID, access and refresh tokens, when the ID and access tokens have to be refreshed or introspected."
msgstr "`quarkus.oidc.runtime.OidcProviderClient` は、OpenID Connect プロバイダーへのリモートリクエストが必要なときに使用されます。ID、アクセス、リフレッシュトークンに対して認可コードを交換するとき、ID やアクセストークンをリフレッシュしたりイントロスペクトするときに、OpenID Connect プロバイダーを認証する必要があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "すべての https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションがサポートされています。次に例を示します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "or"
msgstr "or"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または、xref:credentials-provider.adoc[CredentialsProvider]: から取得したシークレットを使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`client_secret_jwt`, signature algorithm is HS256:"
msgstr "`client_secret_jwt`、署名アルゴリズムは HS256 です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is RS256:"
msgstr "PEM キーファイルを使用した `private_key_jwt` 、署名アルゴリズムは RS256 です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`private_key_jwt` with the key store file, signature algorithm is RS256:"
msgstr "キーストアファイルを使用した `private_key_jwt` 、署名アルゴリズムは RS256 です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr "追加の JWT 認証オプション"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If `client_secret_jwt`, `private_key_jwt` authentication methods are used or an Apple `post_jwt` method is used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合、Apple `post_jwt` メソッドは JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます。以下に例を示します。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject claims."
msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティークレームを使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Mutual TLS"
msgstr "相互 TLS"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`mTLS`) authentication process."
msgstr "OpenID Connect プロバイダーによっては、クライアントが `Mutual TLS` (`mTLS`) 認証プロセスの一部として認証されることを要求する場合があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus-oidc` can be configured as follows to support `mTLS`:"
msgstr "`quarkus-oidc` は、 `mTLS` をサポートするように次のように設定できます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Introspection Endpoint Authentication"
msgstr "イントロスペクションエンドポイント認証"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Some OpenID Connect Providers may require authenticating to its introspection endpoint using Basic Authentication with the credentials different to `client_id` and `client_secret` which may have already been configured to support `client_secret_basic` or `client_secret_post` client authentication methods described in the <<oidc-provider-client-authentication, Oidc Provider Client Authentication>> section."
msgstr "OpenID Connect プロバイダーによってはイントロスペクションエンドポイントに対して、<<oidc-provider-client-authentication, Oidc プロバイダークライアント認証>> セクションで説明した `client_secret_basic` または `client_secret_post` クライアント認証方式をサポートするように設定済みの `client_id` と `client_secret` とは異なる認証情報での基本認証による認証が要求される場合があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If the tokens have to be introspected and the introspection endpoint specific authentication mechanism is required then you can configure `quarkus-oidc` like this:"
msgstr "トークンをイントロスペクトする必要があり、イントロスペクションエンドポイント固有の認証メカニズムが必要な場合は次のように `quarkus-oidc` を設定することができます:"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Prepare the REST test endpoints, set `application.properties`, for example:"
msgstr "RESTテストエンドポイントを用意し、 `application.properties` を以下のように設定します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "and finally write the test code, for example:"
msgstr "最後に、例えば次のようにテストコードを書きます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`OidcWiremockTestResource` recognizes `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr "`OidcWiremockTestResource` は `alice` と `admin` ユーザーを認識します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、 `quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、 `quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Additionally, `OidcWiremockTestResource` set token issuer and audience to `https://service.example.com` which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、 `OidcWiremockTestResource` はトークン発行者と視聴者を `https://service.example.com` に設定します。これは `quarkus.test.oidc.token.issuer` と `quarkus.test.oidc.token.audience` システムのプロパティーでカスタマイズすることができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`OidcWiremockTestResource` can be used to emulate all OpenID Connect providers."
msgstr "`OidcWiremockTestResource` は、すべての OpenID Connect プロバイダーをエミュレートするために使用することができます。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Using xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"`Dev Services for Keycloak` will launch and initialize a test container: it will create a `quarkus` realm, a `quarkus-app` client (`secret` secret) and add `alice` (`admin` and `user` roles) and `bob` (`user` role) users, where all of these properties can be customized."
msgstr "Keycloak に対する統合テストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を使用することをお勧めします。 `Dev Services for Keycloak` は、テストコンテナーを起動して初期化します。これにより、 `quarkus` レルム、 `quarkus-app` クライアント (`secret` シークレット) が作成され、 `alice` (`admin` および `user` ロール) および `bob` (`user` ロール) ユーザーが追加されます。これらのプロパティーはすべてカスタマイズできます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "First prepare `application.properties`. You can start with a completely empty `application.properties` as `Dev Services for Keycloak` will register `quarkus.oidc.auth-server-url` pointing to the running test container as well as `quarkus.oidc.client-id=quarkus-app` and `quarkus.oidc.credentials.secret=secret`."
msgstr "最初に、 `application.properties` を準備します。完全に空の `application.properties` から始めることができます。これは、 `Dev Services for Keycloak` が実行中のテストコンテナーをポイントする `quarkus.oidc.auth-server-url` ならびに `quarkus.oidc.client-id=quarkus-app` および `quarkus.oidc.credentials.secret=secret` を登録するためです。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "But if you already have all the required `quarkus-oidc` properties configured then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak`to start a container, for example:"
msgstr "ただし、必要なすべての `quarkus-oidc` プロパティーがすでに設定されている場合は、 `quarkus.oidc.auth-server-url` を `Dev Services for Keycloak` の `prod` プロファイルに関連付けるだけでコンテナーを起動できます。以下に例を示します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests then you can configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定できます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Finally, write a test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.\n"
"The only difference is that `@QuarkusTestResource` is no longer needed:"
msgstr "最後に、上記の <<integration-testing-wiremock, Wiremock>> セクションで説明したのと同じ方法で、テストコードを記述します。唯一の違いは `@QuarkusTestResource` が不要になったことです。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "KeycloakTestResourceLifecycleManager"
msgstr "KeycloakTestResourceLifecycleManager"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<integration-testing-keycloak-devservices,Dev Services For Keycloak>>.\n"
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`."
msgstr "Keycloak に対して統合テストを行う必要がある場合は、<<integration-testing-keycloak-devservices,Dev Services For Keycloak>> で行うことをお勧めします。 `Dev Services for Keycloak` を使用しない正当な理由がある場合にのみ、テストに `KeycloakTestResourceLifecycleManager` を使用してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Start with adding the following dependency:"
msgstr "以下の依存関係を追加することから始めます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "which provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを開始する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "And configure the Maven Surefire plugin as follows:"
msgstr "そして、Maven Surefire プラグインを次のように設定します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "(and similarly the Maven Failsafe plugin when testing in native image)."
msgstr "(ネイティブイメージでテストする場合は同様に Maven Failsafe プラグインを使用します)。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"And now set the configuration and write the test code the same way as it is described in the <<integration-testing-wiremock, Wiremock>> section above.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr "そして、設定を行い、上記の <<integration-testing-wiremock, Wiremock>> セクションで説明されているのと同じようにテストコードを記述します。唯一の違いkは `QuarkusTestResource` という名前です。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users. The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property. The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr "`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、 `keycloak.token.user-roles` システムプロパティーでカスタマイズできます。ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、 `keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance which can be disabled with `keycloak.use.https=false`.\n"
"Default realm name is `quarkus` and client id - `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr "デフォルトでは、 `KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化しますが、 `keycloak.use.https=false` で無効にできます。デフォルトのレルム名は `quarkus` で、クライアント ID `quarkus-web-app` は、必要に応じて値をカスタマイズするために `keycloak.realm` および `keycloak.web-app.client` システムプロパティーを設定します。"

#. type: Title ====
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please see xref:security-openid-connect.adoc#integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken] section for more information about using `@TestSecurity` and `@OidcSecurity` annotations for testing the `web-app` application endpoint code which depends on the injected ID and access `JsonWebToken` as well as `UserInfo` and `OidcConfigurationMetadata`."
msgstr "xref:security-openid-connect.adoc#integration-testing-security-annotation[注入された JsonWebToken とともに TestingSecurityを利用] セクションで、 `@TestSecurity` と `@OidcSecurity` アノテーションを使って `web-app` アプリケーションエンドポイントコードをテストする際の詳細な情報をご覧ください。このコードは注入した ID とアクセス `JsonWebToken`、さらに `UserInfo` と `OidcConfigurationMetadata` にも依存しています。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging to see more details about the token verification errors:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` `TRACE` レベルのログを有効にしてください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "Please enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging to see more details about the OidcProvider client initialization errors:"
msgstr "OidcProvider クライアント初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシーの背後での実行"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy/gateway/firewall when HTTP `Host` header may be reset to the internal IP address, HTTPS connection may be terminated, etc. For example, an authorization code flow `redirect_uri` parameter may be set to the internal host instead of the expected external one."
msgstr "Quarkusアプリケーションがリバースプロキシー/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、認可コードフロー `redirect_uri` パラメーターが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In such cases configuring Quarkus to recognize the original headers forwarded by the proxy will be required, see xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section for more information."
msgstr "このような場合、プロキシーによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、xref:http-reference.adoc#reverse-proxy[リバースプロキシーの背後での実行] Vert.xのドキュメントセクションを参照してください。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress then a redirect from the OpenID Connect Provider back to this endpoint may not work since the calculated `redirect_uri` parameter may point to the internal endpoint address. This problem can be resolved with the following configuration:"
msgstr "例えば、Quarkus のエンドポイントが Kubernetes Ingress の背後にあるクラスターで実行されている場合、計算された `redirect_uri` パラメーターが内部のエンドポイントアドレスを指している可能性があるので、OpenID Connect Provider からこのエンドポイントへのリダイレクトは機能しないかもしれません。この問題は、以下のような設定で解決することができます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address."
msgstr "ここで、 `X-ORIGINAL-HOST` は、外部エンドポイントアドレスを表すために Kubernetes Ingress によって設定されます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property may also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、QuarkusアプリケーションがSSL終端リバースプロキシーの後ろで実行されている場合にも使用できます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "External and Internal Access to OpenID Connect Provider"
msgstr "OpenID Connect プロバイダーへの外部および内部アクセス"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"Note that the OpenID Connect Provider externally accessible authorization, logout and other endpoints may have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases an issuer verification failure may be reported by the endpoint and redirects to the externally accessible Connect Provider endpoints may fail."
msgstr "OpenID Connect Provider の外部アクセス可能な認証、ログアウト、その他のエンドポイントは、自動検出された URL や内部 URL `quarkus.oidc.auth-server-url` に対して設定された URL とは異なる HTTP(S) URL を持つ場合があることに注意してください。このような場合、エンドポイントから発行者確認の失敗が報告され、外部からアクセス可能な接続プロバイダーのエンドポイントへのリダイレクトに失敗する可能性があります。"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak then please start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other Openid Connect providers then please check your provider's documentation."
msgstr "このような場合、Keycloak を使用する場合は、外部からアクセス可能なベース URL に設定された `KEYCLOAK_FRONTEND_URL` システムプロパティーで起動してください。他の Openid Connect プロバイダーと連携している場合は、プロバイダーのドキュメントを確認してください。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Customize authentication requests"
msgstr "認証要求をカスタマイズする"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "By default, only the `response_type` (set to `code`), `scope` (set to 'openid'), `client_id`, `redirect_uri` and `state` properties are passed as HTTP query parameters to the OpenID Connect provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、ユーザーが認証のために OpenID Connect プロバイダーにリダイレクトした際に、 `response_type` (`code` に設定)、 `scope` ('openid' に設定)、 `client_id`、 `redirect_uri` および `state` プロパティーのみが HTTP クエリーパメータとして渡されています。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "You can add more properties to it with `quarkus.oidc.authentication.extra-params`. For example, some OpenID Connect providers may choose to return the authorization code as part of the redirect URI's fragment which would break the authentication process - it can be fixed as follows:"
msgstr "`quarkus.oidc.authentication.extra-params` を使用すると、さらに多くのプロパティーを追加することができます。例えば、OpenID Connect プロバイダーによっては、認可コードをリダイレクト URI のフラグメントの一部として返すことを選択する場合があり、認証プロセスを壊してしまいます。これは以下のように修正することができます。"

#. type: Title ===
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Customize authentication error response"
msgstr "認証エラー応答をカスタマイズする"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "If the user authentication has failed at the OpenID Connect Authorization endpoint, for example, due to an invalid scope or other invalid parameters included in the redirect to the provider, then the provider will redirect the user back to Quarkus not with the `code` but `error` and `error_description` parameters."
msgstr "OpenID Connect Authorization のエンドポイントでユーザー認証が失敗した場合、例えば、プロバイダーへのリダイレクトに含まれる無効なスコープやその他の無効なパラメーターが原因で、プロバイダーは `code` ではなく `error` で `error_description` パラメーターでユーザーを Quarkus にリダイレクトし直します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "In such cases HTTP `401` will be returned by default. However, you can instead request that a custom public error endpoint is called in order to return a user-friendly HTML error page. Use `quarkus.oidc.authentication.error-path`, for example:"
msgstr "このような場合、デフォルトでは HTTP `401` が返されます。しかし、ユーザーにわかりやすいエラーメッセージを返すために、カスタムのパブリックエラーエンドポイントを呼び出すように要求することができます。例えば、 `quarkus.oidc.authentication.error-path` を使用します。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "It has to start from a forward slash and be relative to the current endpoint's base URI. For example, if it is set as '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope` then a final redirect will be made to `https://localhost:8080/error?error=invalid_scope`."
msgstr "これはフォワードスラッシュで始まり、現在のエンドポイントのベース URI からの相対パスでなければなりません。例えば、'/error' と設定され、現在のリクエスト URI が `https://localhost:8080/callback?error=invalid_scope` であれば、最終的に `https://localhost:8080/error?error=invalid_scope` へリダイレクトされます。"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "It is important that this error endpoint is a public resource to avoid the user redirected to this page be authenticated again."
msgstr "このエラーエンドポイントは、このページにリダイレクトされたユーザーが再び認証されることを避けるために、パブリックリソースであることが重要です。"

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Title ==
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Well Known OpenID Connect providers]."
msgstr "xref:security-openid-connect-providers.adoc[よく知られた OpenID Connect プロバイダー]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 Client and Filters Reference Guide]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-overview-concept.adoc#oidc-jwt-oauth2-comparison[Summary of Quarkus OIDC, JWT and OAuth2 features]"
msgstr "xref:security.adoc#oidc-jwt-oauth2-comparison[Quarkus OIDC、 JWT および OAuth2 機能のサマリー]"

#. type: Plain text
#: _versions/2.16/guides/security-openid-connect-web-authentication.adoc
msgid "xref:security-overview-concept.adoc[Quarkus Security overview]"
msgstr "xref:security-overview-concept.adoc[Quarkus Security 概要]"

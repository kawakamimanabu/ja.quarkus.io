msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OpenID Connect (OIDC) and OAuth2 Client and Filters Reference Guide"
msgstr "OpenID Connect（OIDC）およびOAuth2クライアントとフィルターリファレンスガイド"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "This reference guide explains how to use:"
msgstr "このリファレンスガイドは、以下の使用方法について説明しています。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]"
msgstr "OpenID Connectや link:https://www.keycloak.org[Keycloak] などのOAuth 2.0準拠の認可サーバーからアクセストークンを取得し、リフレッシュするための、`quarkus-oidc-client` や、 `quarkus-oidc-client-reactive-filter` 、 `quarkus-oidc-client-filter` エクステンション"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr "現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播する `quarkus-oidc-token-propagation-reactive` エクステンションと `quarkus-oidc-token-propagation` エクステンション"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart] も参照してください。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンエンドポイント URL (自動検出または手動設定) で初期化され、このエンドポイントを使用して `client_credentials` や `password` などのトークングラントを使用してアクセストークンを取得し、`refresh_token` グラントを使用してトークンをリフレッシュすることができます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Endpoint Configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、トークンのエンドポイントアドレスは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` パスを追加することによって検出されます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "For example, given this Keycloak URL:"
msgstr "例えば、この Keycloak の URL があるとします。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if the discovery endpoint is not available or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "あるいは、ディスカバリー・エンドポイントが利用できない場合や、ディスカバリー・エンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、例えば相対パス値でトークン・エンドポイント・アドレスを構成することもできます："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "ディスカバリーなしでトークンエンドポイント URL を設定する、よりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "この場合、 `quarkus.oidc-client.auth-server-url` と `quarkus.oidc-client.discovery-enabled` の設定は必要ありません。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Supported Token Grants"
msgstr "トークングラントをサポート"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` がトークンを取得するために使用できる主なトークングラントは、`client_credentials` (デフォルト) と `password` グラントです。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャル・グラント"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントは、 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` によって、トークン要求に追加のパラメーターを設定することが可能です。ここでは、 `audience` パラメーターを使用してトークンの受信者を設定する方法を説明します。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Password Grant"
msgstr "パスワード・グラント"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "さらに、 `quarkus.oidc-client.grant-options.password` という設定接頭辞を使用して、クライアント認証のグラントをカスタマイズする方法と同様に、カスタマイズすることが可能です。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Other Grants"
msgstr "その他のグラント"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, as well as two grants which can be used to exchange the current access token, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` また、設定に取り込むことができない追加入力パラメータを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントは、 （外部リフレッシュトークン付き）、 、および現在のアクセストークンを交換するために使用できる2つのグラント、 および です。 `refresh_token` `authorization_code` `urn:ietf:params:oauth:grant-type:token-exchange` `urn:ietf:params:oauth:grant-type:jwt-bearer`"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Using the `refresh_token` grant which uses an out-of-band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "アクセストークンを取得するために、既存のリフレッシュトークンが現在の Quarkus エンドポイントにポストされた場合、帯域外リフレッシュトークンを使用して新しいトークンセットを取得する `refresh_token` グラントを使用する必要があります。この場合、`OidcClient` を次のように設定する必要があります。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "次に、`OidcClient.refreshTokens` メソッドと提供された更新トークンを使用して、アクセストークンを取得できます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See xref:token-propagation-reactive[Token Propagation in MicroProfile RestClient Reactive filter] and xref:token-propagation[Token Propagation in MicroProfile RestClient filter] for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬されて使用されるのを避けたい場合は、 `urn:ietf:params:oauth:grant-type:token-exchange` または `urn:ietf:params:oauth:grant-type:jwt-bearer` グランツを使用する必要があるかもしれません。詳細については、 xref:token-propagation-reactive[MicroProfile RestClient Reactive フィルタのトークン伝搬] および xref:token-propagation[MicroProfile RestClient フィルタのトークン伝搬] を参照してください。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reason you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDCエクステンション] を使用して認可コードフローをサポートできない場合、 `OidcClient` を使用して `authorization code` グラントをサポートする必要があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` ："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "そして、`OidcClient.accessTokens` メソッドで追加プロパティーの Map を受け取り、現在の `code` と `redirect_uri` パラメーターを渡して認可コードとトークンを交換することが可能です。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Grant scopes"
msgstr "グラントスコープ"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You might need to request that a specific set of scopes is associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "発行されたアクセストークンに特定のスコープセットが関連付けられるよう要求する必要があるかもしれません。例えば、専用の `quarkus.oidc-client.scopes` リストプロパティを使用します： `quarkus.oidc-client.scopes=email,phone`"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject Tokens"
msgstr "トークンの注入"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "内部で `OidcClient` を使用する `Tokens` を注入することができます。 `Tokens` はアクセストークンを取得し、必要に応じてリフレッシュするために使用することができます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClients"
msgstr "OidcClientsの使用"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は ``OidcClient`` のコンテナーで、デフォルトの `OidcClient` と、このように設定できる名前付きクライアントが含まれています。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナンシー] も使用し、各 OIDC テナントに独自の関連付けられた `OidcClient` がある場合は、Vert.x `RoutingContext` `tenantId` 属性を使用できます。次に例を示します。"

#. type: delimited block =
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "名前の付いたOidcClient とトークンの注入"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の ``OidcClient`` が設定されている場合、`OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入ターゲットを指定することができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、`Tokens` 注入に使用する `OidcClient` を指定することができます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClient の Reactive ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Add the following Maven Dependency:"
msgstr "以下の Maven 依存関係を追加します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "また、 `io.quarkus:quarkus-oidc-client` も持ってくることに注意しましょう。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see xref:oidc-client-filter[Use OidcClient in MicroProfile RestClient client filter]) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "これは、 `OidcClientRequestFilter` の方法と同様に動作します ( xref:oidc-client-filter[MicroProfile RestClient クライアントフィルターで OidcClient を使用] を参照)。 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキーム値としてセットします。違いは、 xref:rest-client-reactive.adoc[Reactive RestClient] で動作し、トークンを取得または更新するときに現在のIOスレッドをブロックしないノンブロッキングクライアントフィルタを実装している点です。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "IOスレッドのブロックを避けるために、 `OidcClientRequestReactiveFilter` は実行されるまで最初のトークン取得を遅らせます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.reactive.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して、`OidcClientRequestReactiveFilter` を選択的に登録できます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "or"
msgstr "or"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` はデフォルトで を使用します。名前付き は、 設定プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。アノテーションによって設定されたクライアント名は、 設定プロパティよりも優先度が高くなります。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言] がある場合、このクライアントを次のように参照できます："

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClient の ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは、`io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter を提供し、 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、`quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "あるいは、 `quarkus.oidc-client-filter.register-filter=true` プロパティが設定されている場合、すべての MP Rest または Jakarta REST クライアントで `OidcClientRequestFilter` を自動的に登録することもできます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given xref:use-oidc-clients[this] `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` はデフォルトで を使用します。名前付き は、 設定プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。アノテーションによって設定されたクライアント名は、 設定プロパティよりも優先度が高くなります。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言] がある場合、このクライアントを次のように参照できます："

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "カスタムの RestClient ClientFilter を使用する"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can also inject named `Tokens`, see xref:named-oidc-clients[Inject named OidcClient and Tokens]"
msgstr "また、名前付きの `Tokens` の注入も可能です。 xref:named-oidc-clients[名前付きOidcClient とトークンの注入] を参照してください。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter` `OidcClientRequestFilter` および プロデューサーは、リフレッシュ・トークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 プロパティは、HTTP 401 エラーの原因となる期限切れ間近のアクセストークンの送信を回避するために、先制的にアクセストークンをリフレッシュするために使用できます。例えば、このプロパティが に設定されていて、アクセストークンの有効期限が3秒未満である場合、このトークンは自動的にリフレッシュされます。 `Tokens` `quarkus.oidc-client.refresh-token-time-skew` `3S`"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "OpenID Connectプロバイダによっては、 `client_credentials` のグラント・レスポンスにリフレッシュ・トークンを返さないものがあります。例えば、Keycloak 12 以降では、 `client_credentials` に対してデフォルトでリフレッシュ・トークンは返されません。また、プロバイダによっては、リフレッシュ・トークンの使用回数を制限している場合があります。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Revoking Access Tokens"
msgstr "アクセストークンの失効"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider such as Keycloak supports a token revocation endpoint then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Keycloak などの OpenId Connect プロバイダがトークンの失効エンドポイントをサポートしている場合、`OidcClient#revokeAccessToken` を使うことで現在のアクセストークンを失効させることができます。失効エンドポイントの URL は、トークン要求 URI と共に検出されるか、または `quarkus.oidc-client.revoke-path` で設定することができます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You might want to have the access token revoked if using this token with a REST client fails with HTTP `401` or the access token has already been used for a long time and you'd like to refresh it."
msgstr "REST クライアントでこのトークンを使うと HTTP `401` で失敗する場合、あるいはアクセストークンがすでに長い間使われていて、それをリフレッシュしたい場合は、アクセストークンを失効させるとよいでしょう。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh using a refresh token. However, if the refresh token is not available then you can refresh it by revoking it first and then request a new access token."
msgstr "リフレッシュトークンを使用してトークンのリフレッシュを要求することができます。リフレッシュトークンが利用できない場合は、まずそれを失効させてから、新しいアクセストークンをリクエストすることでリフレッシュできます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、`client_credentials` および他のグラントリクエストが成功するために OpenID Connect プロバイダーに対して認証する必要があります。 https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションはすべてサポートされています。以下に例を示します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または、xref:credentials-provider.adoc[クレデンシャルプロバイダー] から取得したシークレットを使用します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または xref:credentials-provider.adoc[CredentialsProvider] から取得した秘密鍵で、署名アルゴリズムは `HS256` です。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "PEM キーファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256` です。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "キーストアファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256`:"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr "追加の JWT 認証オプション"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "もし `client_secret_jwt` と `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることが可能です。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティーを使用します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc-client` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Mutual TLS"
msgstr "相互 TLS"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "一部の OpenID Connect プロバイダーでは、相互 TLS (`mTLS`) 認証プロセスの一部としてクライアントを認証する必要がある場合があります。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`mTLS` をサポートする為に `quarkus-oidc-client` は以下のように設定出来ます :"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "以下のように、Wiremock ベースの `QuarkusTestResourceLifecycleManager` を記述します。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "REST テストエンドポイントを用意します。注入された MP REST クライアントを登録された OidcClient フィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkus リポジトリーの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Keycloakを使用する場合は、 xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloakのセクションで説明したのと同じ方法を使用できます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "トークン取得および更新エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientImpl` の `TRACE` レベルのロギングを有効にしてください。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient の初期化エラーの詳細を確認するには、`io.quarkus.oidc.client.runtime.OidcClientRecorder` の `TRACE` レベルのログを有効にしてください。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation Reactive"
msgstr "トークンプロパゲーションリアクティブ"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides RestEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` that simplifies the propagation of authentication information by propagating the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation-reactive` 拡張は、HTTP `Authorization` ヘッダの `Bearer` スキーム値として、現在のアクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラートークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを伝播することで、認証情報の伝播を簡素化する、RESTEasy Reactive Client `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "さらに、 `AccessTokenRequestReactiveFilter` 、トークンを伝播する前に交換する必要がある複雑なアプリケーションをサポートすることができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Providers which support a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "もし、現在のアクセストークンを伝播する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] やその他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする OpenID Connect Provider で作業する場合は、`AccessTokenRequestFilter` をこのように設定することが可能です。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestReactiveFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] をlink:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[使用して] 現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要] がある `Azure` のようなプロバイダを使用する場合は、次のようにトークンを交換するために `AccessTokenRequestReactiveFilter` を設定することができます："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property."
msgstr "`AccessTokenRequestReactiveFilter` はデフォルトでデフォルトの `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-token-propagation-reactive.client-name` 設定プロパティーで選択することができます。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝播を単純化する2つの Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` クラス実装を提供します。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラー認証トークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝播します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、加えて JWT トークンのサポートを提供します。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "コードフローアクセストークンは (ID トークンとは異なり)、現在の Quarkus エンドポイントに伝播され、現在認証されているユーザーに代わってリモートサービスにアクセスすることを意図しているからです。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "しかし、エンドツーエンドで直接 Bearer トークンを伝播することは、可能な限り避けるべきです。例えば、`Client -> Service A -> Service B` では、`Client` から `Service A` に送られたトークンを `Service B` が受け取ります。このような場合、`Service B` はトークンが `Service A` から来たのか、それとも `Client` から直接来たのかを区別することができません。`Service B` は、トークンが `Service A` から来たことを確認するために、新しい発行者とオーディエンスのクレームをアサートする必要があります。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝播する前にトークンを交換または更新する必要があるかもしれません。たとえば、 `Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なるかもしれません。この場合、 `Service A` は、 `Service B` にアクセスするために、狭い、あるいはまったく異なるスコープセットを付与されるかもしれません。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下のセクションでは、`AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを説明します。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` プロパティを `true` に設定し、 `quarkus.oidc-token-propagation.json-web-token` プロパティを `false` (これはデフォルト値です) に設定すると、すべての MP Rest または Jakarta REST クライアントに `AccessTokenRequestFilter` が自動的に登録されます。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝播前のトークンを交換する"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "もし、現在のアクセストークンを伝播する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] やその他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークン付与をサポートする OpenID Connect Provider で作業する場合は、`AccessTokenRequestFilter` をこのように設定することが可能です。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] をlink:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[使用して] 現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要] がある `Azure` のようなプロバイダを使用する場合は、次のようにトークンを交換するために `AccessTokenRequestFilter` を設定することができます："

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、`quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`JsonWebTokenRequestFilter` の使用は、Bearer JWT トークンを扱う場合に推奨します。これらのトークンは `issuer` や `audience` などの claim を変更でき、更新したトークンは再度セキュリティー保護 (例えば、再署名) を受けることができます。これは注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているので、不透明なトークンでは動作しません。また、OpenID Connect プロバイダーが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することを推奨します - JWT と不透明な bearer トークンの両方を `AccessTokenRequestFilter` で安全に交換することができます。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` により、`Service A` の実装は注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` claim 値で更新し、更新したトークンを新しい署名で再度保護することが簡単にできます。唯一の難しいステップは、`Service A` が署名鍵を持っていることを確認することです。署名鍵は、安全なファイルシステムか、Vault のようなリモートセキュアストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティを `true` に設定すると、すべての MicroProfile REST または Jakarta REST クライアントで `JsonWebTokenRequestFilter` が自動的に登録されます。"

#. type: Title ====
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝播前のトークンの更新"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (issuer) や `aud` (audience) の主張を更新して、新しい署名で保護する必要がある場合は、次のように `JsonWebTokenRequestFilter` を設定できます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "As already noted above, use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "上述したように、KeycloakやOpenID Connect Providerを使用していてToken Exchangeプロトコルをサポートしている場合は、 `AccessTokenRequestFilter` 。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "xref:security-oidc-bearer-token-authentication.adoc#integration-testing[OpenID Connect ベアラートークン統合テスト] セクションの説明に従ってトークンを生成できます。REST テストエンドポイントを準備します。注入された MP REST クライアントを使用するテストフロントエンドエンドポイントに、登録済みのトークン伝搬フィルタを使用して、ダウンストリームエンドポイントを呼び出させることができます。たとえば、 `main` Quarkus リポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、`io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンション(非反応型 `quarkus-oidc-token-propagation` エクステンションとは対照的)は、現在のところ、伝播前のトークンの交換や辞任をサポートしていません。しかし、将来的にはこれらの機能が追加されるかもしれません。"

#. type: Title ==
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect Client and Token Propagation Quickstart]"
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect Clientとトークン伝搬クイックスタート]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するOIDCコードフローメカニズム]"

#. type: Plain text
#: _versions/3.2/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "CDI Integration Guide"
msgstr "CDI 統合ガイド"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"ArC, the CDI container in Quarkus, is bootstrapped at build time.\n"
"To integrate with the container, https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#spi_lite[CDI Build Compatible Extensions, window=\"_blank\"] can be used, as well as a Quarkus-specific extension API.\n"
"CDI Portable Extensions are not and cannot be supported.\n"
"This guide focuses on the Quarkus-specific extensions API."
msgstr ""
"QuarkusのCDIコンテナであるArCは、ビルド時にブートストラップされます。\n"
"コンテナと統合するには、Quarkus固有のエクステンションAPIだけでなく、 link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#spi_lite[CDIビルド互換エクステンション] も使用できます。\n"
"CDI Portable Extensionsはサポートされていません。\n"
"このガイドでは、Quarkus固有のエクステンションAPIを中心に説明します。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"The container is bootstrapped in multiple phases.\n"
"From a high level perspective these phases go as follows:"
msgstr "コンテナーは複数のフェーズでブートストラップされます。高レベルの視点から見ると、これらのフェーズは以下のようになります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Initialization"
msgstr "初期化"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Bean discovery"
msgstr "Beanディスカバリ"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Registration of synthetic components"
msgstr "合成コンポーネントの登録"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Validation"
msgstr "バリデーション"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"In the _initialization_ phase the preparatory work is being carried out and custom contexts are registered.\n"
"_Bean discovery_ is then the process where the container analyzes all application classes, identifies beans and wires them all together based on the provided metadata.\n"
"Subsequently, the extensions can register _synthetic components_.\n"
"Attributes of these components are fully controlled by the extensions, i.e. are not derived from an existing class.\n"
"Finally, the _deployment is validated_.\n"
"For example, the container validates every injection point in the application and fails the build if there is no bean that satisfies the given required type and qualifiers."
msgstr "_初期化_ フェーズでは、準備作業が行われ、カスタムコンテキストが登録されます。その後、コンテナーがすべてのアプリケーションクラスを分析し、Beanを識別し、提供されたメタデータに基づいてそれらをすべて繋ぎ合わせるプロセスがBean _ディスカバリ_ です。その後、エクステンションは _合成コンポーネント_ を登録することができます。これらのコンポーネントの属性はエクステンションによって完全に制御されます。最後に、 _デプロイメントが検証されます_ 。例えば、コンテナーはアプリケーション内のすべての注入ポイントを検証し、与えられた必要な型と修飾子を満たすBeanがない場合はビルドを失敗させます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "You can see more information about the bootstrap by enabling additional logging. Simply run the Maven build with `-X` or `--debug` and grep the lines that contain `io.quarkus.arc`. In the xref:cdi-reference.adoc#dev-mode[development mode], you can use `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` and two special endpoints are also registered automatically to provide some basic debug info in the JSON format."
msgstr "追加のロギングを有効にすることで、ブートストラップに関するより多くの情報を見ることができます。単に `-X` または `--debug` で Maven ビルドを実行し、 `io.quarkus.arc` を含む行を grep してください。 xref:cdi-reference.adoc#dev-mode[開発モード] では、 `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG` と、2つの特別なエンドポイントも自動的に登録され、JSONフォーマットでいくつかの基本的なデバッグ情報を提供することができます。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Quarkus build steps can produce and consume various build items and hook into each phase.\n"
"In the following sections we will describe all the relevant build items and common scenarios."
msgstr "Quarkusのビルドステップでは、さまざまなビルドアイテムを生成したり消費したりして、各フェーズにフックすることができます。以下のセクションでは、関連するすべてのビルド項目と一般的なシナリオについて説明します。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Metadata Sources"
msgstr "メタデータソース"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Classes and annotations are the primary source of bean-level metadata.\n"
"The initial metadata are read from the _bean archive index_, an immutable https://github.com/wildfly/jandex[Jandex index, window=\"_blank\"] which is built from various sources during xref:cdi-reference.adoc#bean_discovery[bean discovery].\n"
"However, extensions can add, remove or transform the metadata at certain stages of the bootstrap.\n"
"Moreover, extensions can also register xref:synthetic_beans[synthetic components].\n"
"This is an important aspect to realize when integrating CDI components in Quarkus."
msgstr "クラスとアノテーションは、Beanレベルのメタデータの主要なソースです。初期メタデータは、Bean xref:cdi-reference.adoc#bean_discovery[ディスカバリー] 時に様々なソースから構築される不変の link:https://github.com/wildfly/jandex[Jandex] インデックスである _Bean archive index_ から読み取られます。しかし、エクステンションは、ブートストラップの特定の段階でメタデータを追加、削除、変換することができます。さらに、エクステンションは xref:synthetic_beans[合成コンポーネント] を登録することもできます。これは、QuarkusでCDIコンポーネントを統合する際に実現すべき重要な点です。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"This way, extensions can turn classes, that would be otherwise ignored, into beans and vice versa.\n"
"For example, a class that declares a `@Scheduled` method is always registered as a bean even if it is not annotated with a bean defining annotation and would be normally ignored."
msgstr "このようにして、エクステンションは、そうでなければ無視されていたクラスをBeanに変えたり、その逆を行ったりすることができます。例えば、 `@Scheduled` メソッドを宣言するクラスは、たとえそれがBean定義アノテーションでアノテーションされておらず、通常は無視されるようなクラスであっても、常にBeanとして登録されます。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - My Class Is Not Recognized as a Bean"
msgstr "ユースケース - クラスがBeanとして認識されません"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"An `UnsatisfiedResolutionException` indicates a problem during xref:cdi.adoc#typesafe_resolution[typesafe resolution].\n"
"Sometimes an injection point cannot be satisfied even if there is a class on the classpath that appears to be eligible for injection.\n"
"There are several reasons why a class is not recognized and also several ways to fix it.\n"
"In the first step we should identify the _reason_."
msgstr "`UnsatisfiedResolutionException` は、 xref:cdi.adoc#typesafe_resolution[タイプセーフな解決] 中に問題が発生したことを示しています。クラスパス上に注入可能なクラスがあっても、注入ポイントを満たすことができないことがあります。クラスが認識されない理由はいくつかあり、またそれを解決する方法もいくつかあります。最初のステップでは、その _原因を_ 特定する必要があります。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Reason 1_: Class Is Not discovered"
msgstr "_理由1_ :クラスが発見されない"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Quarkus has a xref:cdi-reference.adoc#bean_discovery[simplified discovery].\n"
"It might happen that the class is not part of the application index.\n"
"For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr "Quarkusは xref:cdi-reference.adoc#bean_discovery[簡略化されたディスカバリー] があります。クラスがアプリケーションのインデックスの一部でないことがあります。例えば、Quarkusエクステンションの _実行時モジュール_ のクラスは、自動的にインデックスされません。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"_Solution_: Use the `AdditionalBeanBuildItem`.\n"
"This build item can be used to specify one or more additional classes to be analyzed during the discovery.\n"
"Additional bean classes are transparently added to the application index processed by the container."
msgstr "_解決策_ 。 `AdditionalBeanBuildItem` .このビルド項目は、ディスカバリー中に解析する1つ以上の追加クラスを指定するために使用することができます。追加のBean・クラスは、コンテナーによって処理されるアプリケーション・インデックスに透過的に追加されます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "It is not possible to conditionally enable/disable additional beans via the `@IfBuildProfile`, `@UnlessBuildProfile`, `@IfBuildProperty` and `@UnlessBuildProperty` annotations as described in xref:cdi-reference.adoc#enable_build_profile[Enabling Beans for Quarkus Build Profile] and xref:cdi-reference.adoc#enable_build_properties[Enabling Beans for Quarkus Build Properties]. Extensions should inspect the configuration or the current profile and only produce an `AdditionalBeanBuildItem` if really needed."
msgstr "xref:cdi-reference.adoc#enable_build_profile[Quarkus Build ProfileでのBeanの有効化] と xref:cdi-reference.adoc#enable_build_properties[Quarkus Build PropertiesでのBeanの有効化] で説明されているように、 `@IfBuildProfile` 、 `@UnlessBuildProfile` 、 `@IfBuildProperty` 、 `@UnlessBuildProperty` アノテーションによって追加のBeanを条件付きで有効/無効にすることは不可能です。エクステンションは、設定または現在のプロファイルを検査し、本当に必要な場合にのみ `AdditionalBeanBuildItem` を生成する必要があります。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`AdditionalBeanBuildItem` Example"
msgstr "`AdditionalBeanBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`AdditionalBeanBuildItem.Builder` can be used for more complex use cases."
msgstr "`AdditionalBeanBuildItem.Builder` は、より複雑なユースケースに使用することができます。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Bean classes added via `AdditionalBeanBuildItem` are _removable_ by default.\n"
"If the container considers them xref:cdi-reference.adoc#remove_unused_beans[unused], they are just ignored.\n"
"However, you can use `AdditionalBeanBuildItem.Builder.setUnremovable()` method to instruct the container to never remove bean classes registered via this build item.\n"
"See also xref:cdi-reference.adoc#remove_unused_beans[Removing Unused Beans] and xref:unremovable_builditem[_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed] for more details."
msgstr "`AdditionalBeanBuildItem` を介して追加された Bean クラスは、デフォルトで _削除可能_ です。コンテナがそれらを xref:cdi-reference.adoc#remove_unused_beans[未使用] とみなした場合、それらはただ無視されます。しかし， `AdditionalBeanBuildItem.Builder.setUnremovable()` メソッドを使用すると，このビルド項目を通じて登録された Bean クラスを決して削除しないようにコンテナに指示することができます。詳細は， xref:cdi-reference.adoc#remove_unused_beans[未使用のBeanの削除] 及び xref:unremovable_builditem[理由3：クラスが発見され，Bean定義アノテーションを有するが削除された] も参照下さい。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"It is aso possible to set the default scope via `AdditionalBeanBuildItem.Builder#setDefaultScope()`.\n"
"The default scope is only used if there is no scope declared on the bean class."
msgstr "`AdditionalBeanBuildItem.Builder#setDefaultScope()` からデフォルトのスコープを設定することも可能です。デフォルトのスコープは、Beanクラスにスコープが宣言されていない場合にのみ使用されます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "If no default scope is specified the `@Dependent` pseudo-scope is used."
msgstr "デフォルトスコープが指定されていない場合は `@Dependent` 擬似スコープが使用されます。"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "_Reason 2_: Class Is Discovered but Has No Bean Defining Annotation"
msgstr "_理由2_ : クラスは発見されたが、Beanを定義するアノテーションがない"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"In Quarkus, the application is represented by a single bean archive with the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"].\n"
"Therefore, bean classes that don't have a https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are ignored.\n"
"Bean defining annotations are declared on the class-level and include scopes, stereotypes and `@Interceptor`."
msgstr "Quarkus では、アプリケーションは、 link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#default_bean_discovery[Bean ディスカバリーモードannotated] を持つ単一の Bean アーカイブによって表されます。したがって、 link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bean_defining_annotations[Bean 定義アノテーション] がない Bean クラスは無視されます。ビーン定義アノテーションは、クラスレベルで宣言され、スコープ、ステレオタイプ、 `@Interceptor` 。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution 1_: Use the `AutoAddScopeBuildItem`. This build item can be used to add a scope to a class that meets certain conditions."
msgstr "_解決策1_ : `AutoAddScopeBuildItem` の使用。このビルドアイテムを使用すると、特定の条件を満たすクラスにスコープを追加することができます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`AutoAddScopeBuildItem` Example"
msgstr "`AutoAddScopeBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Find all classes annotated with `@Scheduled`."
msgstr "`@Scheduled` でアノテーションされたすべてのクラスを検索"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Add `@Singleton` as default scope. Classes already annotated with a scope are skipped automatically."
msgstr "デフォルトのスコープとして `@Singleton` を追加。既にスコープでアノテーションされているクラスは自動的にスキップされます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution 2_: If you need to process classes annotated with a specific annotation then it's possible to extend the set of bean defining annotations via the `BeanDefiningAnnotationBuildItem`."
msgstr "_解決策2_: 特定のアノテーションが付けられたクラスを処理する必要がある場合は、`BeanDefiningAnnotationBuildItem` を介して Bean 定義アノテーションのセットを拡張することができます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`BeanDefiningAnnotationBuildItem` Example"
msgstr "`BeanDefiningAnnotationBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Add `org.eclipse.microprofile.graphql.GraphQLApi` to the set of bean defining annotations."
msgstr "Bean 定義アノテーションのセットに `org.eclipse.microprofile.graphql.GraphQLApi` を追加します。"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"Bean classes added via `BeanDefiningAnnotationBuildItem` are _not removable_ by default, i.e. the resulting beans must not be removed even if they are considered unused.\n"
"However, you can change the default behavior.\n"
"See also xref:cdi-reference.adoc#remove_unused_beans[Removing Unused Beans] and xref:unremovable_builditem[_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed] for more details."
msgstr "`BeanDefiningAnnotationBuildItem` を使って追加された Bean クラスは、デフォルトでは _削除_ できません。しかし、デフォルトの振る舞いを変更することができます。詳細は、 xref:cdi-reference.adoc#remove_unused_beans[未使用Beanの削除] 及び xref:unremovable_builditem[理由3: クラスが発見され、Bean定義アノテーションを持つが削除さ] れたも参照してください。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"It is also possible to specify the default scope.\n"
"The default scope is only used if there is no scope declared on the bean class."
msgstr "デフォルトスコープを設定することもできます。デフォルトスコープは、Bean クラスにスコープが宣言されていない場合にのみ使用されます。"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "_Reason 3_: Class Was Discovered and Has a Bean Defining Annotation but Was Removed"
msgstr "_理由3_: クラスが検出され、Bean 定義のアノテーションがあるが削除されている"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"The container attempts to xref:cdi-reference.adoc#remove_unused_beans[remove all unused beans] during the build by default.\n"
"This optimization allows for _framework-level dead code elimination_.\n"
"In few special cases, it's not possible to correctly identify an unused bean.\n"
"In particular, Quarkus is not able to detect the usage of the `CDI.current()` static method yet.\n"
"Extensions can eliminate possible false positives by producing an `UnremovableBeanBuildItem`."
msgstr "コンテナは、デフォルトでビルド中に xref:cdi-reference.adoc#remove_unused_beans[すべての未使用Beanを削除] しようとします。この最適化によって， _フレームワークレベルのデッドコード除去が_ 可能になります。いくつかの特殊なケースでは、未使用のBeanを正しく識別することができません。特に、Quarkusでは、 `CDI.current()` 静的メソッドの使用をまだ検出できません。エクステンションは、 `UnremovableBeanBuildItem` を生成することで、誤検出の可能性を排除することができます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`UnremovableBeanBuildItem` Example"
msgstr "`UnremovableBeanBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Make all classes annotated with `@Startup` unremovable."
msgstr "`@Startup` でアノテーションされたすべてのクラスを削除できないようにする。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - My Annotation Is Not Recognized as a Qualifier or an Interceptor Binding"
msgstr "ユースケース - アノテーションが修飾子またはインターセプターバインディングとして認識されない"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"It is likely that the annotation class is not part of the application index.\n"
"For example, classes from the _runtime module_ of a Quarkus extension are not indexed automatically."
msgstr "アノテーションクラスがアプリケーションインデックスに含まれていない可能性があります。たとえば、Quarkus エクステンションの _ランタイムモジュール_ のクラスは自動的にインデックス化されません。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "_Solution_: Use the `AdditionalBeanBuildItem` as described in xref:additional_bean_build_item[_Reason 1_: Class Is Not discovered]."
msgstr "_解決方法_ xref:additional_bean_build_item[理由 1: クラスが検出さ] れない」で説明したように、 `AdditionalBeanBuildItem` を使用します。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - I Need To Transform Annotation Metadata"
msgstr "ユースケース - アノテーションのメタデータを変換する必要がある場合"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"In some cases, it's useful to be able to modify the annotation metadata.\n"
"Quarkus provides a powerful alternative to https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#process_annotated_type[`jakarta.enterprise.inject.spi.ProcessAnnotatedType`, window=\"_blank\"] and https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_enhancement[`jakarta.enterprise.inject.build.compatible.spi.Enhancement`, window=\"_blank\"].\n"
"With an `AnnotationsTransformerBuildItem` it's possible to override the annotations that exist on bean classes."
msgstr "場合によっては、アノテーションのメタデータを変更できると便利です。Quarkusは、次のような強力な代替手段を提供します。 link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#process_annotated_type[jakarta.enterprise.inject.spi.ProcessAnnotatedType] そして link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_enhancement[jakarta.enterprise.inject.build.compatible.spi.Enhancement] . `AnnotationsTransformerBuildItem` を使用すると、Bean クラスに存在するアノテーションをオーバーライドできます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Keep in mind that annotation transformers must be produced _before_ the bean discovery starts."
msgstr "アノテーショントランスフォーマーは、Beanディスカバリが始まる _前に_ 生成されなければならないことを覚えておいてください。"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"For example, you might want to add an interceptor binding to a specific bean class.\n"
"You can use a convenient builder-like API to create a transformer instance:"
msgstr "例えば、特定の Bean クラスにインターセプターバインディングを追加したいとします。便利なビルダーのような API を使って、トランスフォーマのインスタンスを作成することができます："

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Builder Example"
msgstr "ビルダーの例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The transformer is only applied to classes."
msgstr "トランスフォーマーはクラスにのみ適用されます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "Only apply the transformation if the class name equals to `org.acme.Bar`."
msgstr "クラス名が `org.acme.Bar` に等しい場合のみ、変換を適用します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Add the `@MyInterceptorBinding` annotation."
msgstr "`@MyInterceptorBinding` アノテーションを追加します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The example above can be rewritten with an anonymous class:"
msgstr "上記の例は、匿名クラスを使用して書き直すことができます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`AnnotationsTransformerBuildItem` Example"
msgstr "`AnnotationsTransformerBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "If the class name equals to `org.acme.Bar` then add `@MyInterceptorBinding`. Don't forget to invoke `Transformation#done()`."
msgstr "クラス名が `org.acme.Bar` と同じ場合は、`@MyInterceptorBinding` を追加します。`Transformation#done()` を呼び出すことを忘れないでください。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Build steps can query the transformed annotations for a given annotation target via the `TransformedAnnotationsBuildItem`."
msgstr "ビルドステップでは、`TransformedAnnotationsBuildItem` を介して、特定のアノテーションターゲットの変換済みアノテーションをクエリーできます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`TransformedAnnotationsBuildItem` Example"
msgstr "`TransformedAnnotationsBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`TransformedAnnotationsBuildItem.getAnnotations()` will return a possibly transformed set of annotations."
msgstr "`TransformedAnnotationsBuildItem.getAnnotations()` は、変換された可能性のあるアノテーションのセットを返します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "There are other build items specialized in transformation: xref:additional_interceptor_bindings[Use Case - Additional Interceptor Bindings] and xref:injection_point_transformation[Use Case - Injection Point Transformation]."
msgstr "変換に特化したビルド項目は他にもあります： xref:additional_interceptor_bindings[ユースケース - インターセプターバインディング] の追加と xref:injection_point_transformation[ユースケース - インジェクションポイントの変換] です。"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "How to Enable Trace Logging for Annotation Transformers"
msgstr "Annotation TransformerのTrace Loggingを有効にする方法"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "You can set the `TRACE` level for the category `io.quarkus.arc.processor` and try to analyze the log output afterwards."
msgstr " `io.quarkus.arc.processor` のカテゴリーに `TRACE` レベルを設定し、その後、ログ出力の解析を試みてください。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`application.properties` Example"
msgstr "`application.properties` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "You also need to adjust the minimum log level for the relevant category."
msgstr "また、関連するカテゴリーの最小ログレベルを調整する必要があります。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Inspect Beans, Observers and Injection Points"
msgstr "ユースケース - Bean、オブザーバー、インジェクションポイントの検査"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "_Solution 1_: `BeanDiscoveryFinishedBuildItem`"
msgstr "_解決策1._ `BeanDiscoveryFinishedBuildItem`"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Consumers of `BeanDiscoveryFinishedBuildItem` can easily inspect all class-based beans, observers and injection points registered in the application.\n"
"However, synthetic beans and observers are _not included_ because this build item is produced _before_ the synthetic components are registered."
msgstr "`BeanDiscoveryFinishedBuildItem` のコンシューマーは、アプリケーションに登録されているすべてのクラスベースの Bean、オブザーバー、およびインジェクションポイントを簡単に検査できます。ただし、このビルドアイテムは合成コンポーネントが登録される _前_ に作成されるため、合成 Bean とオブザーバーは _含まれません_ 。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Additionally, the bean resolver returned from `BeanDiscoveryFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`BeanDiscoveryFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要な型と修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`BeanDiscoveryFinishedBuildItem` Example"
msgstr "`BeanDiscoveryFinishedBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The resulting list will not contain `@Named` synthetic beans."
msgstr "結果のリストに `@Named` 合成 Bean は含まれません。"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "_Solution 2_: `SynthesisFinishedBuildItem`"
msgstr "_解決策2_ : `SynthesisFinishedBuildItem`"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Consumers of `SynthesisFinishedBuildItem` can easily inspect all beans, observers and injection points registered in the application. Synthetic beans and observers are included because this build item is produced _after_ the synthetic components are registered."
msgstr "`SynthesisFinishedBuildItem` のコンシューマーは、アプリケーションに登録されているすべての Bean、オブザーバー、およびインジェクションポイントを簡単に検査できます。このビルドアイテムは合成コンポーネントが登録された _後_ に作成されるため、合成 Bean とオブザーバーも _含まれます_ 。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Additionally, the bean resolver returned from `SynthesisFinishedBuildItem#getBeanResolver()` can be used to apply the type-safe resolution rules, e.g. to find out whether there is a bean that would satisfy certain combination of required type and qualifiers."
msgstr "さらに、`SynthesisFinishedBuildItem#getBeanResolver()` から返された Bean リゾルバーを使用して、タイプセーフな解決ルールを適用できます。たとえば、必要な型と修飾子の特定の組み合わせを満たす Bean があるかどうかを確認できます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`SynthesisFinishedBuildItem` Example"
msgstr "`SynthesisFinishedBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The resulting list will contain `@Named` synthetic beans."
msgstr "結果のリストには、`@Named` 合成 Bean が含まれます。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - The Need for Synthetic Beans"
msgstr "ユースケース - 合成 Bean の必要性"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"Sometimes it is practical to be able to register a _synthetic bean_.\n"
"Bean attributes of a synthetic bean are not derived from a Java class, method or field.\n"
"Instead, all the attributes are defined by an extension.\n"
"In regular CDI, this could be achieved using the https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#after_bean_discovery[`AfterBeanDiscovery.addBean()`, window=\"_blank\"] and https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_synthesis[`SyntheticComponents.addBean()`] methods."
msgstr "_合成Beanを_ 登録できることが実用的な場合もあります。合成BeanのBean属性は，Javaクラス，メソッド又はフィールドから派生しません。代わりに，すべての属性はエクステンションによって定義されます。通常のCDIでは、これは link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#after_bean_discovery[AfterBeanDiscovery.addBean()] メソッドと link:https://jakarta.ee/specifications/cdi/4.0/jakarta-cdi-spec-4.0.html#bce_synthesis[SyntheticComponents.addBean()] メソッドを使って実現できます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution_: If you need to register a synthetic bean then use the `SyntheticBeanBuildItem`."
msgstr "_解決策_: 合成 Bean を登録する必要がある場合は、`SyntheticBeanBuildItem` を使用します。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 1"
msgstr "`SyntheticBeanBuildItem` の例 1"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Generate the bytecode of the `jakarta.enterprise.context.spi.Contextual#create(CreationalContext<T>)` implementation."
msgstr "`jakarta.enterprise.context.spi.Contextual#create(CreationalContext<T>)` 実装のバイトコードを生成します。"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"The output of a bean configurator is recorded as bytecode.\n"
"Therefore, there are some limitations in how a synthetic bean instance is created at runtime.\n"
"You can:"
msgstr "Bean Configurator の出力は、バイトコードとして記録されます。したがって、実行時に合成 Bean インスタンスを作成する方法にはいくつかの制限があります。以下が可能です。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Generate the bytecode of the `Contextual#create(CreationalContext<T>)` method directly via `ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)`."
msgstr "`Contextual#create(CreationalContext<T>)` メソッドのバイトコードを、`ExtendedBeanConfigurator.creator(Consumer<MethodCreator>)` を介して直接生成します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Pass a subclass of `io.quarkus.arc.BeanCreator` via `ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)`, and possibly specify some build-time parameters via `ExtendedBeanConfigurator#param()` and synthetic injection points via `ExtendedBeanConfigurator#addInjectionPoint()`."
msgstr "`ExtendedBeanConfigurator#creator(Class<? extends BeanCreator<U>>)` で `io.quarkus.arc.BeanCreator` のサブクラスを渡し、場合によっては `ExtendedBeanConfigurator#param()` でビルド時のパラメーターを、`ExtendedBeanConfigurator#addInjectionPoint()` で合成注入ポイントを指定します。"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "Produce the runtime instance through a proxy returned from a xref:writing-extensions.adoc#bytecode-recording[`@Recorder` method] and set it via `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)`, `ExtendedBeanConfigurator#runtimeProxy(Object)`,  `ExtendedBeanConfigurator#supplier(Supplier<?>)` or `ExtendedBeanConfigurator#createWith(Function<SyntheticCreationalContext<?>, <?>)`."
msgstr "xref:writing-extensions.adoc#bytecode-recording[@Recorder メソッドから] 返されたプロキシを通じてランタイムインスタンスを生成し、 `ExtendedBeanConfigurator#runtimeValue(RuntimeValue<?>)` 、 `ExtendedBeanConfigurator#runtimeProxy(Object)` 、 `ExtendedBeanConfigurator#supplier(Supplier<?>)` 、 `ExtendedBeanConfigurator#createWith(Function<SyntheticCreationalContext<?>, <?>)` のいずれかを介して設定します。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`SyntheticBeanBuildItem` Example 2"
msgstr "`SyntheticBeanBuildItem` の例 2"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "By default, a synthetic bean is initialized during `STATIC_INIT`."
msgstr "デフォルトでは、合成 Bean は `STATIC_INIT` の間に初期化されます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The bean instance is supplied by a value returned from a recorder method."
msgstr "Bean インスタンスは、レコーダーメソッドから返される値によって提供されます。"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"It is possible to mark a synthetic bean to be initialized during `RUNTIME_INIT`.\n"
"See the xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more information about the difference between `STATIC_INIT` and `RUNTIME_INIT`."
msgstr "`RUNTIME_INIT` の間に初期化される合成 Bean をマークすることが可能です。 `STATIC_INIT` と `RUNTIME_INIT` の違いについての詳細は、 xref:writing-extensions.adoc#bootstrap-three-phases[ブートストラップと Quarkus の哲学の3つのフェーズ] を参照してください。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`RUNTIME_INIT` `SyntheticBeanBuildItem` Example"
msgstr "`RUNTIME_INIT` `SyntheticBeanBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase."
msgstr "レコーダーは、`ExecutionTime.RUNTIME_INIT` フェーズで実行する必要があります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The bean instance is initialized during `RUNTIME_INIT`."
msgstr "Bean インスタンスは、`RUNTIME_INIT` の間に初期化されます。"

#. type: delimited block =
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Synthetic beans initialized during `RUNTIME_INIT` must not be accessed during `STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:"
msgstr "`RUNTIME_INIT` の間に初期化された合成 Bean は、`STATIC_INIT` の間にアクセスしてはいけません。runtime-init 合成 Bean にアクセスする `RUNTIME_INIT` ビルドステップは、`SyntheticBeansRuntimeInitBuildItem` を消費します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "This build step must be executed after `syntheticBean()` completes."
msgstr "このビルドステップは、`syntheticBean()` の完了後に実行する必要があります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "This recorder method results in an invocation upon the `Foo` bean instance and thus we need to make sure that the build step is executed after all synthetic beans are initialized."
msgstr "このレコーダーメソッドでは `Foo` Bean インスタンスが呼び出されるため、必ずすべての合成 Bean が初期化された後にビルドステップが実行されることを確認する必要があります。"

#. type: delimited block =
#: _versions/3.2/guides/cdi-integration.adoc
msgid "It is also possible to use the `BeanRegistrationPhaseBuildItem` to register a synthetic bean. However, we recommend extension authors to stick with `SyntheticBeanBuildItem` which is more idiomatic for Quarkus."
msgstr "`BeanRegistrationPhaseBuildItem` を使用して合成 Bean を登録することもできます。ただし、エクステンション作成者においては、Quarkus にとってより慣用的な `SyntheticBeanBuildItem` を使用することをお勧めします。"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Synthetic Injection Points"
msgstr "合成注入ポイント"

#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid ""
"A synthetic bean may register a synthetic injection point via the `ExtendedBeanConfigurator#addInjectionPoint()` method.\n"
"This injection point is validated at build time and considered when xref:cdi-reference.adoc#remove_unused_beans[detecting unused beans].\n"
"The injected reference is accessible through the `SyntheticCreationalContext#getInjectedReference()` methods at runtime."
msgstr "合成Beanは、 `ExtendedBeanConfigurator#addInjectionPoint()` メソッドによって合成注入点を登録することができます。この注入点は，構築時に検証され， xref:cdi-reference.adoc#remove_unused_beans[未使用Beanを検出する] ときに考慮されます。注入された参照は，実行時に `SyntheticCreationalContext#getInjectedReference()` メソッドを通してアクセス可能。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Synthetic Injection Point - Build Step Example"
msgstr "合成注入ポイント - ビルドステップの例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "A synthetic injection point with required type `Bar` was added; this is an equivalent of `@Inject Bar`."
msgstr "必須の `Bar` 型の合成注入ポイントが追加されました。これは `@Inject Bar` と同じです。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The bean instance is created with a function returned from a recorder method."
msgstr "Bean インスタンスは、レコーダーメソッドから返される関数を使用して作成されます。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Synthetic Injection Point - Recorder Example"
msgstr "合成注入ポイント - レコーダーの例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Pass a contextual reference of `Bar` to the constructor of `Foo`."
msgstr "`Bar` のコンテキスト参照を `Foo` のコンストラクターに渡します。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Synthetic Observers"
msgstr "ユースケース - 合成オブザーバー"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "Similar to xref:synthetic_beans[synthetic beans], the attributes of a synthetic observer method are not derived from a Java method. Instead, all the attributes are defined by an extension."
msgstr "xref:synthetic_beans[合成Beanと] 同様に，合成オブザーバメソッドの属性は，Javaメソッドから派生したものではありません。代わりに、すべての属性はエクステンションによって定義されます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution_: If you need to register a synthetic observer, use the `ObserverRegistrationPhaseBuildItem`."
msgstr "_解決策_: 合成オブザーバーを登録する必要がある場合は、`ObserverRegistrationPhaseBuildItem` を使用します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "A build step that consumes the `ObserverRegistrationPhaseBuildItem` should always produce an `ObserverConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ObserverRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ObserverConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`ObserverRegistrationPhaseBuildItem` Example"
msgstr "`ObserverRegistrationPhaseBuildItem` の例"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"The output of a `ObserverConfigurator` is recorded as bytecode.\n"
"Therefore, there are some limitations in how a synthetic observer is invoked at runtime.\n"
"Currently, you must generate the bytecode of the method body directly."
msgstr "`ObserverConfigurator` の出力はバイトコードとして記録されます。したがって、実行時に合成オブザーバーを呼び出す方法にはいくつかの制限があります。現時点では、メソッド本体のバイトコードを直接生成する必要があります。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - I Have a Generated Bean Class"
msgstr "ユースケース - 生成された Bean クラスがある"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"No problem.\n"
"You can generate the bytecode of a bean class manually and then all you need to do is to produce a `GeneratedBeanBuildItem` instead of `GeneratedClassBuildItem`."
msgstr "問題ありません。Bean クラスのバイトコードを手動で生成し、その後に `GeneratedClassBuildItem` ではなく `GeneratedBeanBuildItem` を生成してください。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`GeneratedBeanBuildItem` Example"
msgstr "`GeneratedBeanBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` makes it easy to produce ``GeneratedBeanBuildItem``s from Gizmo constructs."
msgstr "`io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor` を使用すると、Gizmo コンストラクトから ``GeneratedBeanBuildItem`` を簡単に作成できます。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "The resulting bean class is something like `public class @Singleton MyBean { }`."
msgstr "結果の Bean クラスは、次のようになります: `public class @Singleton MyBean { }`。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - I Need to Validate the Deployment"
msgstr "ユースケース - デプロイメントを検証する必要がある"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Sometimes extensions need to inspect the beans, observers and injection points, then perform additional validations and fail the build if something is wrong."
msgstr "エクステンションは、Bean、オブザーバー、およびインジェクションポイントを検査し、さらに追加の検証を実行して、何か問題がある場合はビルドを失敗にする必要があります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution_: If an extension needs to validate the deployment it should use the `ValidationPhaseBuildItem`."
msgstr "_解決策_: エクステンションがデプロイメントを検証する必要がある場合、`ValidationPhaseBuildItem` を使用します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "A build step that consumes the `ValidationPhaseBuildItem` should always produce a `ValidationErrorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ValidationPhaseBuildItem` を消費するビルドステップでは、常に `ValidationErrorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer` を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "You can easily filter all registered beans via the convenient `BeanStream` returned from the `ValidationPhaseBuildItem.getContext().beans()` method."
msgstr "`ValidationPhaseBuildItem.getContext().beans()` メソッドから返される便利な `BeanStream` を使用して、登録されているすべての Bean を簡単にフィルタリングできます。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Register a Custom CDI Context"
msgstr "ユースケース - カスタム CDI コンテキストの登録"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Sometimes extensions need to extend the set of built-in CDI contexts."
msgstr "時々、エクステンションは組み込みCDI コンテキストのセットを拡張する必要があります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution_: If you need to register a custom context, use the `ContextRegistrationPhaseBuildItem`."
msgstr "_解決策_: カスタムコンテキストを登録する必要がある場合は、`ContextRegistrationPhaseBuildItem` を使用します。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "A build step that consumes the `ContextRegistrationPhaseBuildItem` should always produce a `ContextConfiguratorBuildItem` or at least inject a `BuildProducer` for this build item, otherwise it could be ignored or processed at the wrong time (e.g. after the correct CDI bootstrap phase)."
msgstr "`ContextRegistrationPhaseBuildItem` を消費するビルドステップでは、常に `ContextConfiguratorBuildItem` を生成するか、少なくともこのビルドアイテムに `BuildProducer`を 挿入する必要があります。でなければ、無視されるか、間違ったタイミングで処理される可能性があります (例: 正しい CDI ブートストラップフェーズの後)。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`ContextRegistrationPhaseBuildItem` Example"
msgstr "`ContextRegistrationPhaseBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Additionally, each extension that registers a custom CDI context via `ContextRegistrationPhaseBuildItem` should also produce the `CustomScopeBuildItem` in order to contribute the custom scope annotation name to the set of bean defining annotations."
msgstr "さらに、`ContextRegistrationPhaseBuildItem` を介してカスタム CDI コンテキストを登録する各エクステンションは、Bean 定義アノテーションのセットにカスタムスコープアノテーション名を提供するために、`CustomScopeBuildItem` も生成する必要があります。"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`CustomScopeBuildItem` Example"
msgstr "`CustomScopeBuildItem` の例"

#. type: Title ===
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "What if I Need to Know All the Scopes Used in the Application?"
msgstr "アプリケーションで使用されているすべてのスコープを知る必要がある場合はどうなりますか?"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "_Solution_: You can inject the `CustomScopeAnnotationsBuildItem` in a build step and use the convenient methods such as `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()`."
msgstr "_ソリューション_: ビルドステップで `CustomScopeAnnotationsBuildItem` を挿入し、 `CustomScopeAnnotationsBuildItem.isScopeDeclaredOn()` などの便利なメソッドを使用できます。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Additional Interceptor Bindings"
msgstr "ユースケース - 追加のインターセプターバインディング"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"In rare cases it might be handy to programmatically register an existing annotation that is not annotated with `@jakarta.interceptor.InterceptorBinding` as an interceptor binding.\n"
"This is similar to what CDI achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.\n"
"We are going to use `InterceptorBindingRegistrarBuildItem` to get it done."
msgstr "まれに、インターセプターバインディングとし て `@jakarta.interceptor.InterceptorBinding` でアノテーションが付けられていない既存のアノテーションをプログラムで登録すると便利な場合があります。これは、CDI が `BeforeBeanDiscovery#addInterceptorBinding()` で達成するものと似ています。これを行うには、`InterceptorBindingRegistrarBuildItem` を使用します。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`InterceptorBindingRegistrarBuildItem` Example"
msgstr "`InterceptorBindingRegistrarBuildItem` の例"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Additional Qualifiers"
msgstr "使用例 - 追加の修飾子"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Sometimes it might be useful to register an existing annotation that is not annotated with `@jakarta.inject.Qualifier` as a CDI qualifier.\n"
"This is similar to what CDI achieves through `BeforeBeanDiscovery#addQualifier()`.\n"
"We are going to use `QualifierRegistrarBuildItem` to get it done."
msgstr ""
"場合によっては、`@jakarta.inject.Qualifier` でアノテーションされていない既存のアノテーションを CDI 修飾子として登録しておくと便利です。\n"
"これは CDI が `BeforeBeanDiscovery#addQualifier()` を通して実現していることに似ています。\n"
"ここでは `QualifierRegistrarBuildItem` を使ってそれを実現しようとしています。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`QualifierRegistrarBuildItem` Example"
msgstr "`QualifierRegistrarBuildItem` の例"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Additional Stereotypes"
msgstr "使用例 - 追加のステレオタイプ"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"It is sometimes useful to register an existing annotation that is not annotated with `@jakarta.enterprise.inject.Stereotype` as a CDI stereotype.\n"
"This is similar to what CDI achieves through `BeforeBeanDiscovery#addStereotype()`.\n"
"We are going to use `StereotypeRegistrarBuildItem` to get it done."
msgstr ""
"場合によっては、`@jakarta.enterprise.inject.Stereotype` でアノテーションされていない既存のアノテーションを CDI ステレオタイプとして登録しておきます。\n"
"これは CDI が `BeforeBeanDiscovery#addQualifier()` を通して実現していることに似ています。ここでは `QualifierRegistrarBuildItem` を使ってそれを実現しようとしています。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`StereotypeRegistrarBuildItem` Example"
msgstr "`StereotypeRegistrarBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "If the newly registered stereotype annotation doesn't have the appropriate meta-annotations, such as scope or interceptor bindings, use an xref:annotations_transformer_build_item[annotation transformation] to add them."
msgstr "新しく登録したステレオタイプ注釈に、スコープやインターセプターのバインディングなどの適切なメタ注釈がない場合は、 xref:annotations_transformer_build_item[注釈変換] を使用してそれらを追加します。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Injection Point Transformation"
msgstr "ユースケース - インジェクションポイントの変換"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Every now and then it is handy to be able to change the qualifiers of an injection point programmatically.\n"
"You can do just that with `InjectionPointTransformerBuildItem`.\n"
"The following sample shows how to apply transformation to injection points with type `Foo` that contain qualifier `MyQualifier`:"
msgstr "プログラムでインジェクションポイントの修飾子を変更できると便利な場合があります。それは、`InjectionPointTransformerBuildItem` で実行できます。次のサンプルは、修飾子 `MyQualifier` を含むタイプ `Foo` のインジェクションポイント変換を適用する方法を示しています。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`InjectionPointTransformerBuildItem` Example"
msgstr "`InjectionPointTransformerBuildItem` の例"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "In theory, you can use xref:annotations_transformer_build_item[an `AnnotationsTransformer`] to achieve the same goal. However, there are few differences that make `InjectionPointsTransformer` more suitable for this particular task: (1) annotation transformers are applied to all classes during bean discovery, whereas `InjectionPointsTransformer` is only applied to discovered injection points after bean discovery; (2) with `InjectionPointsTransformer` you don't need to handle various types of injection points (field, parameters of initializer methods, etc.)."
msgstr "理論的には、 xref:annotations_transformer_build_item[AnnotationsTransformer ] を使用して同じ目標を達成することができます。 `InjectionPointsTransformer` `InjectionPointsTransformer` (1)アノテーション変換はBean発見時にすべてのクラスに適用されますが、 `InjectionPointsTransformer` はBean発見後に発見された注入ポイントにのみ適用されます。"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Use Case - Resource Annotations and Injection"
msgstr "ユースケース - リソースアノテーションとインジェクション"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"The `ResourceAnnotationBuildItem` can be used to specify resource annotations that make it possible to resolve non-CDI injection points, such as Jakarta EE resources.\n"
"An integrator must also provide a corresponding `io.quarkus.arc.ResourceReferenceProvider` service provider implementation."
msgstr "`ResourceAnnotationBuildItem` を使用して、Jakarta EE リソースなどの非 CDI インジェクションポイントを解決できるリソースアノテーションを指定できます。インテグレーターは、対応する `io.quarkus.arc.ResourceReferenceProvider` サービスプロバイダー実装も提供する必要があります。"

#. type: Block title
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "`ResourceAnnotationBuildItem` Example"
msgstr "`ResourceAnnotationBuildItem` の例"

#. type: Title ==
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "Available Build Time Metadata"
msgstr "利用可能なビルドタイムメタデータ"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"Any of the above extensions that operates with `BuildExtension.BuildContext` can leverage certain build time metadata that are generated during build.\n"
"The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` are:"
msgstr "`BuildExtension.BuildContext` で動作する上記のエクステンションはいずれも、ビルドタイムに生成される特定のビルドタイムメタデータを利用することができます。 `io.quarkus.arc.processor.BuildExtension.Key` にある組込キーは以下の通りです。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "ANNOTATION_STORE"
msgstr "ANNOTATION_STORE"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Contains an `AnnotationStore` that keeps information about all `AnnotationTarget` annotations after application of annotation transformers"
msgstr "アノテーショントランスフォーマーを適用した後は、すべての `AnnotationTarget`アノテーションに関する情報を保持する `AnnotationStore` が含まれます"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "INJECTION_POINTS"
msgstr "INJECTION_POINTS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Collection<InjectionPointInfo>` containing all injection points"
msgstr "すべてのインジェクションポイントを含む `Collection<InjectionPointInfo>`"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "BEANS"
msgstr "BEANS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Collection<BeanInfo>` containing all beans"
msgstr "すべての Bean を含む `Collection<BeanInfo>`"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "REMOVED_BEANS"
msgstr "REMOVED_BEANS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
#, fuzzy
msgid "`Collection<BeanInfo>` containing all the removed beans; see xref:cdi-reference.adoc#remove_unused_beans[Removing unused beans] for more information"
msgstr "`Collection<BeanInfo>` 削除された Bean をすべて含みます。詳細は xref:cdi-reference.adoc#remove_unused_beans[未使用 Bean の削除] を参照してください。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "OBSERVERS"
msgstr "OBSERVERS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Collection<ObserverInfo>` containing all observers"
msgstr "すべてのオブザーバーを含む `Collection<ObserverInfo>`"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "SCOPES"
msgstr "SCOPES"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Collection<ScopeInfo>` containing all scopes, including custom ones"
msgstr "カスタムスコープも含め、すべてのスコープを含む `Collection<ScopeInfo>`"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "QUALIFIERS"
msgstr "QUALIFIERS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Map<DotName, ClassInfo>` containing all qualifiers"
msgstr "`Map<DotName, ClassInfo>` すべての修飾子を含む"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "INTERCEPTOR_BINDINGS"
msgstr "INTERCEPTOR_BINDINGS"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Map<DotName, ClassInfo>` containing all interceptor bindings"
msgstr "すべてのインターセプターバインディングを含む `Map<DotName, ClassInfo>`"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "STEREOTYPES"
msgstr "STEREOTYPES"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "`Map<DotName, StereotypeInfo>` containing all stereotypes"
msgstr "すべてのステレオタイプを含む `Map<DotName, StereotypeInfo>`"

#: _versions/3.2/guides/cdi-integration.adoc
msgid ""
"To get hold of these, simply query the extension context object for given key.\n"
"Note that these metadata are made available as build proceeds which means that extensions can only leverage metadata that were built before the extensions are invoked.\n"
"If your extension attempts to retrieve metadata that wasn't yet produced, `null` will be returned.\n"
"Here is a summary of which extensions can access which metadata:"
msgstr "これらのメタデータを取得するには、そのキーのエクステンションコンテキストオブジェクトをクエリするだけ可能です。これらのメタデータはビルドが進むにつれて利用可能になることに注意してください。エクステンションがまだ生成されていないメタデータを取得しようとすると、 `null` が返されます。どのエクステンションがどのメタデータにアクセスできるかをまとめてみました。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "AnnotationsTransformer"
msgstr "AnnotationsTransformer"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Shouldn't rely on any metadata as it could be used at any time in any phase of the bootstrap"
msgstr "ブートストラップのどのフェーズでもいつでも使えるので、メタデータに頼るべきではありません。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "ContextRegistrar"
msgstr "ContextRegistrar"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` . `STEREOTYPES` にアクセスできます。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "InjectionPointsTransformer"
msgstr "InjectionPointsTransformer"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "ObserverTransformer"
msgstr "ObserverTransformer"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "BeanRegistrar"
msgstr "BeanRegistrar"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS` (クラスベースBeanのみ), `OBSERVERS` (クラスベースobserverのみ), `INJECTION_POINTS` にアクセスできます。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "ObserverRegistrar"
msgstr "ObserverRegistrar"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), `INJECTION_POINTS`"
msgstr "`ANNOTATION_STORE` , `QUALIFIERS` , `INTERCEPTOR_BINDINGS` , `STEREOTYPES` , `BEANS` , `OBSERVERS` (クラスベースのオブザーバーのみ), `INJECTION_POINTS` にアクセス可能です。"

#. type: Labeled list
#: _versions/3.2/guides/cdi-integration.adoc
#, no-wrap
msgid "BeanDeploymentValidator"
msgstr "BeanDeploymentValidator"

#. type: Plain text
#: _versions/3.2/guides/cdi-integration.adoc
msgid "Has access to all build metadata"
msgstr "すべてのビルドメタデータにアクセスできます"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Centralized log management (Graylog, Logstash, Fluentd)"
msgstr "ログの一元管理（Graylog、Logstash、Fluentd）"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"This guide explains how you can send your logs to a centralized log management system like Graylog, Logstash (inside the Elastic Stack or ELK - Elasticsearch, Logstash, Kibana) or\n"
"Fluentd (inside EFK - Elasticsearch, Fluentd, Kibana)."
msgstr "このガイドでは、Graylog、Logstash(Elastic StackやELK - Elasticsearch、Logstash、Kibanaの内部)、Fluentd(EFK - Elasticsearch、Fluentd、Kibanaの内部)のような集中型ログ管理システムにログを送信する方法を説明します。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"There are a lot of different ways to centralize your logs (if you are using Kubernetes, the simplest way is to log to the console and ask you cluster administrator to integrate a central log manager inside your cluster).\n"
"In this guide, we will expose how to send them to an external tool using the `quarkus-logging-gelf` extension that can use TCP or UDP to send logs in the Graylog Extended Log Format (GELF)."
msgstr "ログを一元化する方法はたくさんあります(Kubernetesを使用している場合、最も簡単な方法はコンソールにログインして、クラスター管理者にクラスター内に一元化されたログマネージャーを統合するように依頼することです)。このガイドでは、TCPまたはUDPを使用してGraylog Extended Log Format (GELF)でログを送信できる `quarkus-logging-gelf` エクステンションを使用して外部ツールに送信する方法を公開します。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"The `quarkus-logging-gelf` extension will add a GELF log handler to the underlying logging backend that Quarkus uses (jboss-logmanager).\n"
"By default, it is disabled, if you enable it but still use another handler (by default the console handler is enabled), your logs will be sent to both handlers."
msgstr "`quarkus-logging-gelf` エクステンションは、Quarkusが使用する基礎となるロギングバックエンド(jboss-logmanager)にGELFログハンドラーを追加します。デフォルトでは無効になっており、有効にした場合も別のハンドラーも使用している場合(デフォルトではコンソールハンドラーが有効になっています)、ログは両方のハンドラーに送信されます。"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Example application"
msgstr "アプリケーション例"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "The following examples will all be based on the same example application that you can create with the following steps."
msgstr "以下の例はすべて、以下の手順で作成できる同じアプリケーションの例を基にしています。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Create an application with the `quarkus-logging-gelf` extension. You can use the following command to create it:"
msgstr "`quarkus-logging-gelf` のエクステンションを持つアプリケーションを作成します。以下のコマンドで作成することができます:"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `logging-gelf` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `logging-gelf` エクステンションを追加することができます。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "This will add the following dependency to your build file:"
msgstr "これにより、ビルドファイルに以下の依存関係が追加されます:"

#. type: Block title
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "For demonstration purposes, we create an endpoint that does nothing but log a sentence. You don't need to do this inside your application."
msgstr "デモのために、文をログに記録するだけのエンドポイントを作成します。これをアプリケーション内で行う必要はありません。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Configure the GELF log handler to send logs to an external UDP endpoint on the port 12201:"
msgstr "GELF ログハンドラーを構成して、ポート 12201 の外部 UDP エンドポイントにログを送信します:"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Send logs to Graylog"
msgstr "ログをGraylogに送信"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "To send logs to Graylog, you first need to launch the components that compose the Graylog stack:"
msgstr "ログをGraylogに送信するには、まずGraylogスタックを構成するコンポーネントを起動する必要があります。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "MongoDB"
msgstr "MongoDB"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Elasticsearch"
msgstr "Elasticsearch"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Graylog"
msgstr "Graylog"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "You can do this via the following `docker-compose.yml` file that you can launch via `docker-compose up -d`:"
msgstr "これは、以下の `docker-compose.yml` ファイルから、 `docker-compose up -d` で起動できます:"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"Then, you need to create a UDP input in Graylog.\n"
"You can do it from the Graylog web console (System -> Input -> Select GELF UDP) available at http://localhost:9000 or via the API."
msgstr "次に、GraylogでUDP入力を作成する必要があります。これは、 http://localhost:9000 の GraylogのWebコンソール(System → Input → Select GELF UDP)から、 またはAPI経由で行うことができます。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "This curl example will create a new Input of type GELF UDP, it uses the default login from Graylog (admin/admin)."
msgstr "この curl の例では、Graylog (admin/admin) からのデフォルトのログインを使用し、GELF UDP タイプの新しい入力を作成します。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside Graylog."
msgstr "アプリケーションを起動すると、Graylog内にログが届くのがわかるはずです。"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Send logs to Logstash / the Elastic Stack (ELK)"
msgstr "Logstash / Elastic Stack (ELK)にログを送信"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Logstash comes by default with an Input plugin that can understand the GELF format, we will first create a pipeline that enables this plugin."
msgstr "LogstashにはGELF形式を理解できるInputプラグインがデフォルトで入ってるので、まずこのプラグインを有効にするパイプラインを作成します。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Create the following file  in `$HOME/pipelines/gelf.conf`:"
msgstr "`$HOME/pipelines/gelf.conf` に以下のファイルを作成します。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Finally, launch the components that compose the Elastic Stack:"
msgstr "最後に、Elastic Stackを構成するコンポーネントを起動します:"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Logstash"
msgstr "Logstash"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Kibana"
msgstr "Kibana"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside the Elastic Stack; you can use Kibana available at http://localhost:5601/ to access them."
msgstr "アプリケーションを起動すると、Elastic Stack内にログが届いているのが確認できるはずです。 http://localhost:5601/ で利用できるKibanaを使って、ログにアクセスすることができます。"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Send logs to Fluentd (EFK)"
msgstr "Fluentd(EFK)へのログ送信"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"First, you need to create a Fluentd image with the needed plugins: elasticsearch and input-gelf.\n"
"You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr "まず、必要なプラグインである elasticsearch と input-elf を使って Fluentd イメージを作成します。 以下の Dockerfile を使用することができます。このファイルは `fluentd` ディレクトリー内に作成する必要があります。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "You can build the image or let docker-compose build it for you."
msgstr "イメージをビルドするか、docker-composeにビルドを任せることができます。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Then you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr "次に、`$HOME/fluentd/fluent.conf` の中にfluentd 設定ファイルを作成する必要があります"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Finally, launch the components that compose the EFK Stack:"
msgstr "最後に、EFKスタックを構成するコンポーネントを起動します:"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Fluentd"
msgstr "Fluentd"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Launch your application, you should see your logs arriving inside EFK: you can use Kibana available at http://localhost:5601/ to access them."
msgstr "アプリケーションを起動すると、EFK内にログが到着しているのが確認できるはずです: それらにアクセスするには、 http://localhost:5601/ で利用可能な Kibana を使用することができます。"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "GELF alternative: use Syslog"
msgstr "GELFの代替:Syslogの使用"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"You can also send your logs to Fluentd using a Syslog input.\n"
"As opposed to the GELF input, the Syslog input will not render multiline logs in one event, that's why we advise to use the GELF input that we implement in Quarkus."
msgstr "Syslog入力を使ってFluentdにログを送ることもできます。GELF入力とは対照的に、Syslog入力は1つのイベントで複数行のログをレンダリングすることができないため、Quarkusで実装されているGELF入力を使用することをお勧めします。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"First, you need to create a Fluentd image with the elasticsearch plugin.\n"
"You can use the following Dockerfile that should be created inside a `fluentd` directory."
msgstr "まず、elasticsearchプラグインでFluentdイメージを作成する必要があります。 以下の Dockerfile を使用することができます。このファイルは `fluentd` ディレクトリー内に作成する必要があります。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Then, you need to create a fluentd configuration file inside `$HOME/fluentd/fluent.conf`"
msgstr "次に、fluentd設定ファイルを `$HOME/fluentd/fluent.conf` 内に作成する必要があります"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Then, launch the components that compose the EFK Stack:"
msgstr "次に、EFKスタックを構成するコンポーネントを起動します:"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Finally, configure your application to send logs to EFK using Syslog:"
msgstr "最後に、Syslogを使用してEFKにログを送信するようにアプリケーションを設定します:"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Elasticsearch indexing consideration"
msgstr "Elasticsearch インデックスの検討"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"Be careful that, by default, Elasticsearch will automatically map unknown fields (if not disabled in the index settings) by detecting their type.\n"
"This can become tricky if you use log parameters (which are included by default), or if you enable MDC inclusion (disabled by default),\n"
"as the first log will define the type of the message parameter (or MDC parameter) field inside the index."
msgstr "デフォルトでは、Elasticsearch は未知のフィールド（インデックス設定で無効になっていない場合）を、そのタイプを検出して自動的にマッピングすることに注意してください。これは、ログパラメータ（デフォルトで含まれている）を使用する場合や、MDC インクルード（デフォルトでは無効）を有効にする場合、最初のログがインデックス内のメッセージパラメータ（または MDC パラメータ）フィールドのタイプを定義するため、厄介なことになる可能性があります。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Imagine the following case:"
msgstr "次のようなケースを想像してみてください:"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"With log message parameters enabled, the first log message sent to Elasticsearch will have a `MessageParam0` parameter with an `int` type;\n"
"this will configure the index with a field of type `integer`.\n"
"When the second message will arrive to Elasticsearch, it will have a `MessageParam0` parameter with the boolean value `true`, and this will generate an indexing error."
msgstr "ログメッセージのパラメータを有効にすると、Elasticsearch に送信される最初のログメッセージは `int` 型の `MessageParam0` パラメータが設定され、これにより `integer` 型のフィールドでインデックスが構成されます。2 番目のメッセージが Elasticsearch に届くと、ブーリアン値 `true` を持つ `MessageParam0` パラメータが設定され、これによりインデックス作成エラーが発生します。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"To work around this limitation, you can disable sending log message parameters via `logging-gelf` by configuring `quarkus.log.handler.gelf.include-log-message-parameters=false`,\n"
"or you can configure your Elasticsearch index to store those fields as text or keyword, Elasticsearch will then automatically make the translation from int/boolean to a String."
msgstr "この制限を回避するには、 `quarkus.log.handler.gelf.include-log-message-parameters=false` を設定して `logging-gelf` を介したログメッセージパラメータの送信を無効にするか、Elasticsearch インデックスにテキストまたはキーワードとしてこれらのフィールドを保存するように設定して、Elasticsearch は int/boolean から String への変換を自動的に行います。"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "See the following documentation for Graylog (but the same issue exists for the other central logging stacks): link:https://docs.graylog.org/en/3.2/pages/configuration/elasticsearch.html#custom-index-mappings[Custom Index Mappings]."
msgstr "Graylogについては以下のドキュメントを参照してください（ただし、他のセントラルロギングスタックにも同じ問題があります）。 link:https://docs.graylog.org/en/3.2/pages/configuration/elasticsearch.html#custom-index-mappings[カスタム インデックス マッピング] 。"

#. type: Title ==
#: _versions/2.13/guides/centralized-log-management.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Plain text
#: _versions/2.13/guides/centralized-log-management.adoc
msgid "Configuration is done through the usual `application.properties` file."
msgstr "設定は通常の `application.properties` ファイルから行います。"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/2.13/guides/centralized-log-management.adoc
msgid ""
"This extension uses the `logstash-gelf` library that allow more configuration options via system properties,\n"
"you can access its documentation here: https://logging.paluch.biz/ ."
msgstr "このエクステンションは、システムプロパティーを介してより多くの設定オプションを提供する `logstash-gelf` ライブラリを使用しています。ドキュメントにはこちら: https://logging.paluch.biz/ からアクセスできます。"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Native Reference Guide"
msgstr "ネイティブリファレンスガイド"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This guide is a companion to the\n"
"xref:building-native-image.adoc[Building a Native Executable],\n"
"xref:native-and-ssl.adoc[Using SSL With Native Images],\n"
"and xref:writing-native-applications-tips.adoc[Writing Native Applications],\n"
"guides.\n"
"It provides further details to debugging issues in Quarkus native executables that might arise during development or production."
msgstr "このガイドは、 link:building-native-image.html[ネイティブ実行可能ファイルのビルド]、 link:native-and-ssl.html[Using SSL With Native Images[ネイティブイメージでのSSLの使用]、 link:writing-native-applications-tips.html[ネイティブアプリケーションの作成]の各ガイドに付随するものです。このガイドでは、開発時や本番時に発生する可能性のあるQuarkusのネイティブ実行可能ファイルの問題をデバッグするための詳細を説明しています。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This reference guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].\n"
"You can find instructions on how to quickly set up this application in this guide."
msgstr "このリファレンスガイドは、xref:getting-started.adoc[スタートガイド] で開発されたアプリケーションを入力としています。このガイドでは、このアプリケーションをすばやくセットアップする方法について説明しています。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Requirements and Assumptions"
msgstr "要件と前提条件"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "This guide has the following requirements:"
msgstr "このガイドには、次の要件があります。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "JDK 11 installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 11 がインストールされ、 `JAVA_HOME`  が適切に設定されていること"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "A working container runtime (Docker, podman)"
msgstr "動作するコンテナーランタイム(Docker, podman)"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This guide builds and executes Quarkus native executables within a Linux environment.\n"
"To offer a homogeneous experience across all environments,\n"
"the guide relies on a container runtime environment to build and run the native executables.\n"
"The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr "このガイドでは、Linux 環境内で Quarkus ネイティブ実行可能ファイルをビルドして実行します。すべての環境で同種のエクスペリエンスを提供するために、ガイドはコンテナーランタイム環境に依存して、ネイティブ実行可能ファイルをビルドおよび実行します。以下の手順では例として Docker を使用していますが、podman などの他のコンテナーランタイムでも、よく似たコマンドを実行できます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Building native executables is an expensive process,\n"
"so make sure the container runtime has enough CPU and memory to do this.\n"
"A minimum of 4 CPUs and 4GB of memory is required."
msgstr "ネイティブ実行可能ファイルのビルドはコストのかかるプロセスであるため、コンテナーランタイムに十分な CPU とメモリーがあることを確認してください。最低でも 4 つの CPU と 4GB のメモリーが必要です。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables,\n"
"and these are built within a container so there is no need for installing Mandrel on the host."
msgstr "最後に、このガイドでは、ネイティブ実行可能ファイルのビルド用に GraalVM の link:https://github.com/graalvm/mandrel[Mandrel distribution] の使用を想定しています。これらはコンテナー内にビルドされるため、ホスト上に Mandrel をインストールする必要はありません。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Start by creating a new Quarkus project.\n"
"Open a terminal and run the following command:"
msgstr "新しい Quarkus プロジェクトを作成することから始めます。ターミナルを開き、以下のコマンドを実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "For Linux & MacOS users"
msgstr "Linux および MacOS ユーザー向け"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "For Windows users"
msgstr "Windows ユーザー向け"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "cmd を使用する場合は、バックスラッシュ `\\` は使わず、一行で実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr "Powershell を使用する場合は、 `-D` パラメーターを二重引用符で囲みます。例: `\"-DprojectArtifactId=debugging-native\"`"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Configure Quarkus properties"
msgstr "Quarkus のプロパティーを設定する"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Some Quarkus configuration options will be used constantly throughout this guide,\n"
"so to help declutter command line invocations,\n"
"it's recommended to add these options to the `application.properties` file.\n"
"So, go ahead and add the following options to that file:"
msgstr "一部の Quarkus 設定オプションは、このガイド全体で常に使用されるため、コマンドラインの呼び出しを整理しやすくするために、これらのオプションを `application.properties` ファイルに追加することをお勧めします。では、さっそく以下のオプションをこのファイルに追加してください。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Starting with 22.3, Mandrel does not provide a `-java11` version anymore.\n"
"Note, however,  that this doesn't mean that you may no longer produce native executables with Mandrel for Java 11 projects.\n"
"You can still compile your Java 11 projects using OpenJDK 11 and produce native executables from the resulting Java 11 bytecode using the `-java17` Mandrel builder images."
msgstr "22.3 以降、Mandrel は `-java11` バージョンを提供しなくなりました。しかし、これは Java 11 プロジェクトで Mandrel を使用してネイティブ実行可能ファイルを作成することができなくなったことを意味するものではありません。OpenJDK 11 を使用して Java 11 プロジェクトをコンパイルし、 `-java17` Mandrel ビルダーイメージを使用して、結果の Java 11 バイトコードからネイティブ実行可能ファイルを生成することは可能です。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "First Debugging Steps"
msgstr "最初のデバッグ手順"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr "最初のステップとして、プロジェクトディレクトリーに移動し、アプリケーションのネイティブ実行可能ファイルをビルドします。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr "アプリケーションを実行して、期待通りに動作することを確認します。一つの端末で以下を実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "In another:"
msgstr "別のターミナルで以下を実行します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The rest of this section explores ways to build the native executable with extra information,\n"
"but first, stop the running application.\n"
"We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr "このセクションの残りの部分では、追加情報を使用してネイティブ実行可能ファイルをビルドする方法について説明しますが、最初に、実行中のアプリケーションを停止します。 `-Dquarkus.native.additional-build-args` を使用してネイティブイメージビルドオプションを追加することで、ネイティブ実行可能ファイルのビルド中にこの情報を取得できます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Executing that will produce additional output lines like this:"
msgstr "これを実行すると、次のような追加の出力行が得られます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Note that `/project` is a folder within the container that is building the native executable.\n"
"So, this is not a folder that you will find in the host environment.\n"
"`/project` folder is mapped to `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar`,\n"
"so you will find the files under the `reports` folder in that directory."
msgstr "`/project` は、ネイティブ実行可能ファイルをビルドしているコンテナー内のフォルダーであることに注意してください。したがって、これはホスト環境にあるフォルダーではありません。 `/project` フォルダーは `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar` にマップされているため、そのディレクトリーの `reports` フォルダーの下にファイルがあります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The target info file contains information such as the target platform,\n"
"the toolchain used to compile the executable,\n"
"and the C library in use:"
msgstr "ターゲット情報ファイルには、ターゲットプラットフォーム、実行ファイルのコンパイルに使用されたツールチェーン、使用されているCライブラリなどの情報が含まれています。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr "ネイティブライブラリ情報ファイルには、バイナリに追加されるスタティックライブラリと、実行ファイルに動的にリンクされるその他のライブラリの情報が含まれています。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.\n"
"This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production,\n"
"or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr "ネイティブイメージビルドの追加引数として `--verbose` を渡すことで、さらに詳細な情報を得ることができます。このオプションは、Quarkusを介して高いレベルで渡されたオプションがネイティブ実行可能ファイルの生成に渡されているのか、あるいはサードパーティのjarにネイティブイメージの設定が埋め込まれていて、それがネイティブイメージの呼び出しに届いているのかを検出するのに非常に役立ちます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr "`--verbose` で実行すると、ネイティブイメージのビルドプロセスが2つの連続したJavaプロセスであることが分かります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The first is a very short Java process that does some basic validation and builds the arguments for the second process\n"
"(in a stock GraalVM distribution, this is executed as native code)."
msgstr "1番目は非常に短いJavaプロセスで、基本的な検証を行い、2つ目のプロセスのための引数を組み立てます（GraalVMの純正ディストリビューションでは、これはネイティブコードとして実行されます）。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The second Java process is where the main part of the native executable production happens.\n"
"The `--verbose` option shows the actual Java process executed.\n"
"You could take the output and run it yourself."
msgstr "2番目のJavaプロセスでは、ネイティブ実行可能ファイル作成の主要部分が行われます。 `--verbose` オプションは、実際に実行されたJavaプロセスを表示します。出力を受けて、自分で実行することもできます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr "また、複数のネイティブ・ビルド・オプションをコンマで区切って組み合わせることもできます。例:"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol,\n"
"it needs to be escaped to be processed correctly, e.g. `\\\\,`."
msgstr "`-Dquarkus.native.additional-build-args` の引数に `,` シンボルが含まれている場合、正しく処理するためには、 `\\\\,` のようにエスケープする必要があることを覚えておいてください。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Inspecting Native Executables"
msgstr "ネイティブ実行可能ファイルの検査"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Given a native executable, various Linux tools can be used to inspect it.\n"
"To allow supporting a variety of environments,\n"
"inspections will be done from within a Linux container.\n"
"Let's create a Linux container image with all the tools required for this guide:"
msgstr "ネイティブ実行可能ファイルを指定すると、さまざまな Linux ツールを使用して実行可能ファイルを検査できます。さまざまな環境をサポートできるように、検査は Linux コンテナー内から実行されます。このガイドに必要なすべてのツールを使用して、Linux コンテナーイメージを作成しましょう。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr "Linux 以外の環境で docker を使用する場合は、以下を実行し、この Dockerfile を使用してイメージを作成できます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr "次に、プロジェクトの root に移動し、先ほど作成した Docker コンテナーを以下のように実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr "`ldd` は、実行可能ファイルの共有ライブラリの依存関係を表示します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr "`strings` は、バイナリ内のテキストメッセージを探すのに使用できます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr "`strings` を使えば、指定されたバイナリのMandrel情報を得ることもできます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Finally, using `readelf` we can inspect different sections of the binary.\n"
"For example, we can see how the heap and text sections take most of the binary:"
msgstr "最後に、 `readelf` を使って、バイナリーのさまざまなセクションを調べることができます。例えば、ヒープセクションとテキストセクションがバイナリの大半を占めていることがわかります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Runtime containers produced by Quarkus to run native executables will not include the tools mentioned above.\n"
"To explore a native executable within a runtime container,\n"
"it's best to run the container itself and then `docker cp` the executable locally, e.g.:"
msgstr "ネイティブ実行可能ファイルを実行するために Quarkus によって生成されたランタイムコンテナーには、上記のツールは含まれません。ランタイムコンテナー内のネイティブ実行可能ファイルを調べるには、コンテナー自体を実行してから、実行可能ファイルをローカルで `docker cp` するのが最適です。次に例を示します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "From there, you can either inspect the executable directly or use a tools container like above."
msgstr "そこから、実行ファイルを直接検査するか、上記のようなツールコンテナーを使用することができます。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Native Reports"
msgstr "ネイティブレポート"

#. type: delimited block =
#: _versions/2.13/guides/native-reference.adoc
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr "オプションとして、ネイティブビルドプロセスでは、バイナリに何が入っているかを示すレポートを生成することができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.\n"
"These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr "レポートは、 `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/` の下に作成されます。これらのレポートは、メソッド/クラスが見つからない問題が発生した場合、または Mandrel によって禁止されたメソッドが発生した場合に、最も役立つリソースの一部になります。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Call Tree Reports"
msgstr "コールツリーレポート"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"`call_tree` csv file reports are some of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.\n"
"These csv files can be imported into a graph database, such as Neo4j,\n"
"to inspect them more easily and run queries against the call tree.\n"
"This is useful for getting an approximation on why a method/class is included in the binary."
msgstr "`call_tree` csv ファイルレポートは、 `-Dquarkus.native.enable-reports` オプションが渡されたときに生成されるデフォルトレポートの一部です。これらの csv ファイルは、Neo4j などのグラフデータベースにインポートして、より簡単に検査できます。呼び出しツリーに対してクエリーを実行します。これは、メソッド/クラスがバイナリーに含まれている理由の概算を取得するのに役立ちます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Let’s see this in action."
msgstr "実際に見てみましょう。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "First, start a Neo4j instance:"
msgstr "まず、Neo4jのインスタンスを起動します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Once the container is running,\n"
"you can access the link:http://localhost:7474[Neo4j browser].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "コンテナーが実行されると、 link:http://localhost:7474[Neo4j ブラウザー] にアクセスできます。ログインする際は、ユーザー名として `neo4j` を使用し、パスワードとして `NEO_PASS` の値を使用します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To import the CSV files,\n"
"we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "CSVファイルをインポートするためには、CSVファイル内のデータをインポートし、グラフデータベースのノードとエッジを作成する以下のcypherスクリプトが必要です。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr "スクリプトの内容を `import.cypher` というファイルにコピー＆ペーストします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container\n"
"(for more details see link:https://github.com/oracle/graal/issues/4355[here]).\n"
"This can be worked around by copying the following script into a file and executing it:"
msgstr "Mandrel 22.0.0 には、コンテナー内でレポートを生成する際に、インポートサイファーファイルで使用されるシンボリックリンクが正しく設定されないというバグが含まれています (詳細は link:https://github.com/oracle/graal/issues/4355[こちら] を参照)。これは、以下のスクリプトをファイルにコピーして実行することで回避できます。"

#. type: delimited block =
#: _versions/2.13/guides/native-reference.adoc
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "次に、インポートサイファースクリプトとCSVファイルをNeo4jのインポートフォルダにコピーします。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "After copying all the files, invoke the import script:"
msgstr "すべてのファイルをコピーしたら、インポートスクリプトを起動します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser],\n"
"and you'll be able to observe a small summary of the data in the graph:"
msgstr "インポートの完了 (ほんの数分で完了) 後に、link:http://localhost:7474[Neo4j ブラウザー] にアクセスすると、簡単なデータのサマリーをグラフで見ることができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The data above shows that there are ~60000 methods, and just over ~200000 edges between them.\n"
"The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.\n"
"Typically, you’d start by looking for a given method:"
msgstr "上のデータでは、~60000のメソッドがあり、それらの間には~200000のエッジがあることがわかります。ここでデモされているQuarkusアプリケーションは非常に基本的なものなので、調べられることは多くありませんが、グラフをより詳細に調べるために実行できるクエリの例をいくつか紹介します。典型的な例としては、あるメソッドを探すことから始めます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr "そこから、特定の型の特定のメソッドに絞ることができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is:\n"
"why does this method get included in the call tree?\n"
"To do that, start from the method and look for incoming connections at a given depth,\n"
"starting from the end method.\n"
"For example, methods that directly call a method can be located via:"
msgstr "探している特定のメソッドのノードを見つけたら、答えを得たい典型的な質問は、「なぜこのメソッドはコールツリーに含まれるのか」です。そのためには、終点のメソッドから始まる所定の深さの到着接続を探します。たとえば、あるメソッドを直接呼び出すメソッドは、以下のようにして見つけることができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Then you can look for direct calls at depth of 2,\n"
"so you’d search for methods that call methods that call into the target method:"
msgstr "そうすれば、深さ2の直接呼び出しを探すことができます。つまり、対象のメソッドを呼び出すメソッドを呼び出すメソッドを探すことになります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr "階層を上がっていくことはできますが、残念ながらノードの数が多すぎる深度に到達すると、Neo4jブラウザはそれらすべてを可視化することができません。そのような場合は、代わりにcypher shellに対して直接クエリを実行することができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"For further information, check out this\n"
"link:https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog post]\n"
"that explores the Quarkus Hibernate ORM quickstart using the techniques explained above."
msgstr "詳細については、上記で説明した手法を使用して、Quarkus Hibernate ORM クイックスタートについて検討している https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog 記事] を参照してください。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Used Packages/Classes/Methods Reports"
msgstr "使用されているパッケージ/クラス/メソッドのレポート"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application,\n"
"e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr "`used_packages`, `used_classes`, `used_methods` テキストファイルレポートは、アプリケーションの異なるバージョンを比較する際に便利です。例えば、イメージ作成に時間がかかるのはなぜか？また、なぜイメージが大きくなったのか？"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Further Reports"
msgstr "更なるレポート"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.\n"
"These are called expert options and you can learn more about them by running:"
msgstr "Mandrelは、 `-Dquarkus.native.enable-reports` オプションで有効になっているレポート以外にも、様々なレポートを作成することができます。これらはエキスパートオプションと呼ばれ、以下を実行することで詳細を知ることができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"These expert options are not considered part of the GraalVM native image API,\n"
"so they might change anytime."
msgstr "これらのエキスパートオプションは、GraalVM ネイティブ Image API の一部とは見なされないため、いつでも変更される可能性があります。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr "これらのエキスパートオプションを使用するには、 `-Dquarkus.native.additional-build-args` パラメータにコンマで区切って追加します。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Build-time vs Run-time Initialization"
msgstr "ビルド時と実行時の初期化"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Quarkus instructs Mandrel to initialize as much as possible at build time,\n"
"so that runtime startup can be as fast as possible.\n"
"This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.\n"
"Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization,\n"
"thus making Quarkus more reliable."
msgstr "QuarkusはMandrelに対し、ビルド時に可能な限り初期化するよう指示し、実行時の起動を可能な限り高速化しています。これは、起動速度がアプリケーションの動作準備の早さに大きな影響を与えるコンテナ環境では重要です。また、ビルド時の初期化は、サポートされていない機能が実行時の初期化によって到達可能になることによる実行時の失敗のリスクを最小限にし、Quarkusの信頼性を高めています。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The most common examples of build-time initialized code are static variables and blocks.\n"
"Although Mandrel executes those at run-time by default,\n"
"Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr "ビルド時に初期化されるコードの最も一般的な例は、静的変数とブロックです。Mandrelはこれらをデフォルトでは実行時に実行しますが、Quarkusでは先程の理由でビルド時に実行するように指示しています。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This means that any static variables initialized inline, or initialized in a static block,\n"
"will keep the same value even if the application is restarted.\n"
"This is a different behaviour compared to what would happen if executed as Java."
msgstr "つまり、インラインで初期化されたスタティック変数や、スタティックブロックで初期化されたスタティック変数は、アプリケーションを再起動しても同じ値を維持します。これは、Javaとして実行した場合とは異なる動作です。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To see this in action with a very basic example,\n"
"add a new `TimestampResource` to the application that looks like this:"
msgstr "これの実際の動作を非常に基本的な例で確認するには、以下のような新しい `TimestampResource` をアプリケーションに追加します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Rebuild the binary using:"
msgstr "次のようにバイナリを再ビルドします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Run the application in one terminal\n"
"(make sure you stop any other native executable container runs before executing this):"
msgstr "1 つのターミナルでアプリケーションを実行します (これを実行する前に、他のネイティブ実行可能コンテナーの実行を必ず停止してください)。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Send a `GET` request multiple times from another terminal:"
msgstr "別のターミナルから `GET` リクエストを複数回送信してみましょう。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"to see how the current time has been baked into the binary.\n"
"This time was calculated when the binary was being built,\n"
"hence application restarts have no effect."
msgstr "現在の時刻がどのようにバイナリに焼き付けられているかを確認できます。この時刻は、バイナリのビルド時に計算されたものなので、アプリケーションの再起動が影響しません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"In some situations, built time initializations can lead to errors when building native executables.\n"
"One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.\n"
"To see this in action, add this REST resource:"
msgstr "状況によっては、ビルド時の初期化により、ネイティブ実行可能ファイルをビルドするときにエラーが発生する可能性があります。1 つの例は、バイナリーにベイクされる JVM のヒープに存在することが禁じられている値が、ビルド時に計算される場合です。これが実際に動作することを確認するには、この REST リソースを追加してください。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr "アプリケーションを再ビルドしようとすると、エラーが発生します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.\n"
"This is not desirable because something that's supposed to be random is no longer so,\n"
"because the seed is baked in the image.\n"
"The message above makes it quite clear what is causing this,\n"
"but in other situations the cause might be more obfuscated.\n"
"As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr "したがって、上記のメッセージが示しているのは、アプリケーションが定数としてランダムであると想定される値をキャッシュしているということです。シードがイメージでベイク処理されているため、ランダムであるはずの何かがもはやランダムではないため、これは望ましくありません。上記のメッセージは、何が原因かを非常に明確に示していますが、他の状況では、原因はさらにわかりにくいかもしれません。次のステップとして、ネイティブ実行可能ファイルの生成にいくつかのフラグを追加して、より多くの情報を取得することにします。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr "メッセージにあるように、まずはオブジェクトのインスタンス化を追跡するためのオプションを追加してみましょう。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The error messages point to the code in the example,\n"
"but it can be surprising that a reference to `DnsClient` appears.\n"
"Why is that?\n"
"The key is in what happens inside `KeyPairGenerator.initialize()` method call.\n"
"It uses `JCAUtil.getSecureRandom()` which is why this is problematic,\n"
"but sometimes the tracing options can show some stack traces that do not represent what happens in reality.\n"
"The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr "エラーメッセージは例にあるコードを指していますが、 `DnsClient` への参照が表示されるのは意外なことかもしれません。なぜでしょうか? 重要なのは、 `KeyPairGenerator.initialize()` メソッド呼び出し内で起こっていることです。これは `JCAUtil.getSecureRandom()` を使用し、これが原因で問題となっていますが、トレースオプションは、実際に起きていることを表さないスタックトレースの一部を表示することがあります。最良のオプションは、ソースコードを調べ、トレース出力を完全な事実としてではなく、ガイダンスとして使用することです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue.\n"
"Rebuild the application and verify that encrypt/decrypt endpoint works as expected by sending any message and check if the reply is the same as the incoming message:"
msgstr "この特定の問題を解決するには、 `KEY_PAIR_GEN.initialize(1024);` 呼び出しを実行時に実行されるメソッド encryptDecrypt に移動するだけで十分です。アプリケーションを再構築し、メッセージを送信して暗号化/復号化エンドポイントが期待どおりに機能することを確認し、応答が受信メッセージと同じかどうかを確認します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr "どのクラスがどのように初期化されるかについての追加情報は、 `-Dquarkus.native.additional-build-args` を通じて `-H:+PrintClassInitialization` フラグを渡すことで得ることができます。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Profile Runtime Behaviour"
msgstr "実行時動作のプロファイリング"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Single Thread"
msgstr "シングルスレッド"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.\n"
"Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr "この演習では、ネイティブ実行可能ファイルにコンパイルされたQuarkusアプリケーションの実行時動作をプロファイリングし、ボトルネックがどこにあるかを判断します。問題がアプリケーションのネイティブバージョンでのみ発生するために、純粋なJavaバージョンのプロファイリングができないシナリオを想定しています。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Add a REST resource with the following code\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "次のコードを使用して REST リソースを追加します (この例は link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation] からご提供いただいています):"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr "アプリケーションを再コンパイルし、バイナリを再ビルドして実行します。単純なcurlを試みても、期待通り完了しません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"However, the question we’re trying to answer here is:\n"
"what would be the bottleneck of such code?\n"
"Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr "しかし、ここで私たちが答えようとしているのは、そのようなコードのボトルネックは何か？文字を追加することか？削除していることか？スレッドが生きているかどうかをチェックしていることか？です。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Since we're dealing with a linux native executable,\n"
"we can use tools like `perf` directly.\n"
"To use `perf`,\n"
"go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr "Linux のネイティブ実行可能ファイルを扱っているので、 `perf` のようなツールを直接使用できます。 `perf` を使用するには、プロジェクトの root に移動し、特権ユーザーとして以前に作成したツールコンテナーを起動します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Note that in order to use `perf` to profile the native executables in the guide,\n"
"the container needs to run as privileged, or with `--cap-add sys_admin`.\n"
"Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr "なお、 `perf` を使用してガイドのネイティブ実行可能ファイルをプロファイルするには、コンテナを特権的に実行するか、 `--cap-add sys_admin` を使用する必要があります。本番環境では特権コンテナは推奨され *ません* ので、このフラグの使用には注意が必要です。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr "コンテナが稼働したら、カーネルがプロファイリングの演習に対応できるようにしておく必要があります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The kernel modifications above also apply to Linux virtual machines.\n"
"If running on a bare metal Linux machine,\n"
"tweaking only `perf_event_paranoid` is enough."
msgstr "上記のカーネルの変更は、Linux 仮想マシンにも適用されます。ベアメタル Linux マシンで実行している場合は、 `perf_event_paranoid` を微調整するだけで十分です。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Then, from inside the tools container we execute:"
msgstr "次に、ツールコンテナー内から以下を実行します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The `perf record` command above takes `1009` samples per second.\n"
"Increasing this value means more samples are gathered,\n"
"which can end up affecting the runtime performance.\n"
"This also increases the amount of data generated.\n"
"The more data generated, the longer it takes to process it,\n"
"but the more precision you get on what the application is doing.\n"
"So, finding the right value is a balancing act."
msgstr "上記の `perf record` コマンドは、1 秒あたり 1009 サンプルを取得します。この値を大きくすると、より多くのサンプルが収集されることを意味し、実行時のパフォーマンスに影響を与える可能性があります。これにより、生成されるデータの量も増加します。生成されるデータが多いほど、処理に時間がかかりますが、アプリケーションが行っていることをより正確に把握できます。したがって、適切な値を見つけることは、バランスをとる作業です。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr "`perf record` の実行中に、別のウィンドウを開き、エンドポイントにアクセスします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"After a few seconds, halt the `perf record` process.\n"
"This will generate a `perf.data` file.\n"
"We could use `perf report` to inspect the perf data,\n"
"but you can often get a better picture showing that data as a flame graph.\n"
"To generate flame graphs, we will use\n"
"https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository],\n"
"which has already been installed inside the tools container."
msgstr "数秒後、 `perf record` プロセスを停止します。これにより、 `perf.data` ファイルが生成されます。 `perf report` を使用して perf データを検査することができますが、多くの場合、データをフレームグラフとして表示した方が、より良い結果を得ることができます。フレームグラフを生成するには、ツールコンテナー内にすでにインストールされている https://github.com/brendangregg/FlameGraph[FlameGraph GitHub リポジトリー] を使用します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr "次に、 `perf record` を介してキャプチャされたデータを使用してフレームグラフを生成します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The flame graph is a svg file that a web browser, such as Firefox, can easily display.\n"
"After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr "フレームグラフは、Firefox などの Web ブラウザーで簡単に表示できる svg ファイルです。上記の2つのコマンドが完了すると、ブラウザーで `flamegraph.svg` を開くことができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"We see a big majority of time spent in what is supposed to be our main,\n"
"but we see no trace of the `StringBuilderResource` class,\n"
"nor the `StringBuilder` class we're calling.\n"
"We should look at the symbol table of the binary:\n"
"can we find symbols for our class and `StringBuilder`?\n"
"We need those in order to get meaningful data.\n"
"From within the tools container, query the symbol table:"
msgstr "メインとなるはずのものに大半の時間が費やされていることがわかりますが、呼び出している `StringBuilderResource` クラスや `StringBuilder` クラスの痕跡は見られません。バイナリーのシンボルテーブルを確認する必要があります。クラスと `StringBuilder` のシンボルを見つけることができますか? 意味のあるデータを取得するためにそれらが必要です。ツールコンテナー内から、シンボルテーブルをクエリーします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"No output appears when querying the symbol table.\n"
"This is why we don't see any call graphs in the flame graphs.\n"
"This is a deliberate decision that native-image makes.\n"
"By default, it removes symbols from the binary."
msgstr "シンボルテーブルをクエリーすると、出力は表示されません。これが、フレームグラフにコールグラフが表示されない理由です。これは、ネイティブイメージが行う意図的な決定です。デフォルトでは、バイナリーからシンボルを削除します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.\n"
"On top of that, enable DWARF debug info so that the stack traces can be populated with that information.\n"
"From outside the tools container, execute:"
msgstr "シンボルを取り戻すには、シンボルを削除しないように GraalVM に指示するバイナリーを再ビルドする必要があります。さらに、DWARF デバッグ情報を有効にして、スタックトレースにその情報を入力できるようにします。ツールコンテナーの外部から、以下を実行します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Next, re-enter the tools container if you exited,\n"
"and inspect the native executable with `objdump`,\n"
"and see how the symbols are now present:"
msgstr "次に、終了した場合はツールコンテナーに再度入り、 `objdump` を使用してネイティブ実行可能ファイルを検査し、シンボルがどのように存在するようになったかを確認します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "You should see a long list of symbols that match that pattern."
msgstr "そのパターンに一致するシンボルの長いリストが表示されるはずです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Then, run the executable through perf,\n"
"*indicating that the call graph is dwarf*:"
msgstr "次に、実行ファイルを perf で実行すると、 *コールグラフが dwarf であることがわかります*。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr "もう一度curlコマンドを実行し、バイナリを停止し、フレームグラフを生成して開きます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The flamegraph now shows where the bottleneck is.\n"
"It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.\n"
"The issue is that 1 million characters need to be shifted in very small increments:"
msgstr "フレームグラフを見ると、どこがボトルネックになっているかがわかります。それは、 `StringBuilder.delete()` が呼び出され、 `System.arraycopy()` を呼び出すときです。問題は、100万文字を非常に小さな単位でシフトさせる必要があることです。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Multi-Thread"
msgstr "マルチスレッド"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Multithreaded programs might require special attention when trying to understand their runtime behaviour.\n"
"To demonstrate this, add this `MulticastResource` code to your project\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "マルチスレッドプログラムは、ランタイムの動作を理解しようとするときに特別な注意が必要になる場合があります。これを実証するために、この `MulticastResource` コードをプロジェクトに追加します (この例は link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation] からご提供いただいています):"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Build the native executable with debug info:"
msgstr "デバッグ情報付きでネイティブ実行可能ファイルをビルドします。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr "ツールコンテナー内から (特権ユーザーとして)、 `perf` を介してネイティブ実行可能ファイルを実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Invoke the endpoint to send the multicast packets:"
msgstr "エンドポイントを呼び出して、マルチキャストパケットを送信します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Make and open a flamegraph:"
msgstr "フレームグラフを作成して開いてください。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.\n"
"This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr "作成されたフレームグラフは奇妙に見えます。すべてのスレッドが同じ作業をしているにもかかわらず、各スレッドが独立して扱われています。これでは、プログラムのボトルネックを明確に把握することができません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This is happening because from a `perf` perspective, each thread is a different command.\n"
"We can see that if we inspect `perf report`:"
msgstr "これは、 `perf` の観点から見ると、各スレッドが異なるコマンドであるために起こっています。 `perf report` を確認するとわかります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This can be worked around by applying some modifications to the perf output,\n"
"in order to make all threads have the same name. E.g."
msgstr "これは、すべてのスレッドが同じ名前になるように、perfの出力にいくつかの変更を加えることで回避できます。例えば、以下のようになります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"When you open the flamegraph, you will see all threads' work collapsed into a single area.\n"
"Then, you can clearly see that there's some locking that could affect performance."
msgstr "フレームグラフを開くと、すべてのスレッドの作業が1つの領域に折りたたまれているのがわかります。そして、パフォーマンスに影響を与える可能性のあるロックがあることがはっきりとわかります。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Debugging Native Crashes"
msgstr "ネイティブ・クラッシュのデバッグ"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers,\n"
"instead we need to debug them using `gdb`, the GNU Project debugger.\n"
"To demonstrate how to do this,\n"
"we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.\n"
"To achieve this, add the following REST resource to the project:"
msgstr "ネイティブ実行可能ファイルを使用することの欠点の 1 つは、標準の Java デバッガーを使用してデバッグできないことです。代わりに、GNU プロジェクトのデバッガーである `gdb` を使用してデバッグする必要があります。その方法を示すために、 http://localhost:8080/crash にアクセスするときにセグメンテーション違反が原因でクラッシュするネイティブ Quarkus アプリケーションを生成します。これを実現するには、以下の REST リソースをプロジェクトに追加します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.\n"
"To verify this, compile and run the example application:"
msgstr "このコードは、アドレス `0x0` から `0x80` へ 256 バイトをコピーしようとするため、セグメンテーションフォールトが発生します。これを確認するには、サンプルアプリケーションをコンパイルして実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "This will result in the following output:"
msgstr "これにより、次のような出力が得られます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The omitted output above contains clues to what caused the issue,\n"
"but in this exercise we are going to assume that no information was provided.\n"
"Let’s try to debug the segmentation fault using `gdb`.\n"
"To do that, go to the root of the project and enter the tools container:"
msgstr "上記の省略された出力には、問題の原因の手がかりが含まれていますが、この演習では情報が提供されなかったと仮定しています。 `gdb` を使用してセグメンテーション違反をデバッグしてみましょう。これを行うには、プロジェクトの root に移動し、ツールコンテナーに入ります。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Then start the application in `gdb` and execute `run`."
msgstr "続いて、 `gdb` でアプリケーションを起動し、 `run` を実行します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Next, try to access http://localhost:8080/crash:"
msgstr "次に、 http://localhost:8080/crash へのアクセスを試みます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "This will result in the following message in `gdb`:"
msgstr "これにより、 `gdb` に次のようなメッセージが表示されます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr "このクラッシュの原因となったバックトレースの情報を得ようとすると、十分な情報が得られないことがわかります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`,\n"
"so `gdb` cannot find debugging symbols for our native executable,\n"
"as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr "これは、Quarkus アプリケーションを `-Dquarkus.native.debug.enabled` でコンパイルしなかったことが原因で、これにより、 `gdb` の最初にある \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" メッセージで示されているように、 `gdb` はネイティブ実行可能ファイルのデバッグシンボルを見つけることができません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.\n"
"On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr "`-Dquarkus.native.debug.enabled` でQuarkusアプリケーションを再コンパイルし、 `gdb` で再実行すると、クラッシュの原因を明らかにするバックトレースを得ることができます。さらに、 `-H:-OmitInlinedMethodDebugLineInfo` オプションを追加すると、インライン化されたメソッドがバックトレースから省略されるのを防ぐことができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.\n"
"We can also get a backtrace of the call graph that led us to this state:"
msgstr "`gdb` は、どのメソッドがクラッシュの原因となったのか、それがソースコードのどこにあるのかを教えてくれることがすでにわかりました。また、この状態に至ったコールグラフのバックトレースも得ることができます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr "同様に、他のスレッドのコールグラフのバックトレースを取得できます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "First, we can list the available threads with:"
msgstr "まず、利用可能なスレッドを以下のように一覧表示できます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr "検査するスレッドを選択します (例: スレッド 1)。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "and, finally, print the stack trace:"
msgstr "そして最後に、スタックトレースを出力します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr "または、1 つのコマンドですべてのスレッドのバックトレースを一覧表示することもできます。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr "ただし、バックトレースを取得できるにもかかわらず、 `list` コマンドを使用してソースコードをある点で引き続き一覧表示できないことに注意してください。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"This is because `gdb` is not aware of the location of the source files.\n"
"We are running the executable outside the target directory.\n"
"To fix this we can either rerun `gdb` from the target directory or,\n"
"run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr "これは、 `gdb` がソースファイルの場所を認識していないことが原因です。実行可能ファイルは、ターゲットディレクトリーの外で実行しています。これを修正するには、ターゲットディレクトリーから `gdb` を再実行するか、 `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` を実行します。以下に例を示します。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"We can now examine line `169` and get a first hint of what might be wrong\n"
"(in this case we see that it fails at the first read from src which contains the address `0x0000`),\n"
"or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.\n"
"To learn more about using gdb to debug native executables see\n"
"https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[here]."
msgstr "`169` 行を調べて、何が問題なのか最初のヒントを得ることができます（この場合、アドレス `0x0000` を含む src からの最初の読み取りに失敗していることがわかります）。あるいは、 `gdb` の `up` コマンドを使ってスタックをさかのぼり、コードのどの部分がこのような状況を引き起こしたかを確認することができます。ネイティブ実行可能ファイルをデバッグするためのgdbの使い方については、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[こちら]をご覧ください。"

#. type: Title ==
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Frequently Asked Questions"
msgstr "よくある質問"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Why is the process of generating a native executable slow?"
msgstr "ネイティブ実行可能ファイルを生成するプロセスが遅いのはなぜですか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Native executable generation is a multi-step process.\n"
"The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr "ネイティブ実行可能ファイルの生成は、複数のステップで構成されています。その中でも解析とコンパイルのステップは最もコストがかかるため、ネイティブ実行可能ファイルの生成にかかる時間の大半を占めます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.\n"
"As new classes are discovered, some of them will be initialized during this process depending on the configuration.\n"
"In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.\n"
"The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.\n"
"The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr "解析フェーズでは、プログラムのメインメソッドから静的なPoint-to 解析を開始し、到達可能なものを見つけ出します。新しいクラスが発見されると、設定に応じてこのプロセス中にその一部が初期化されます。次のステップでは、ヒープがスナップショットされ、どのタイプが実行時に利用可能である必要があるかのチェックが行われます。初期化とヒープのスナップショットにより、新しい型が発見されることがありますが、その場合はこのプロセスが繰り返されます。このプロセスは、到達可能なプログラムがこれ以上成長しないという固定点に達したときに停止します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr "コンパイルのステップは非常に簡単で、到達可能なすべてのコードを単純にコンパイルします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The time spent in analysis and compilation phases depends on how big the application is.\n"
"The bigger the application, the longer it takes to compile it.\n"
"However, there are certain features that can have an exponential effect.\n"
"For example, when registering types and methods for reflection access,\n"
"the analysis can’t easily see what’s behind those types or methods,\n"
"so it has to do more work to complete the analysis step."
msgstr "解析とコンパイルの段階でかかる時間は、アプリケーションの大きさによって異なります。アプリケーションが大きければ大きいほど、コンパイルにかかる時間は長くなります。ただし、指数関数的な効果をもたらす機能もあります。例えば、リフレクションアクセスのために型やメソッドを登録する場合、解析はその型やメソッドの背後にあるものを簡単に見ることができないため、解析ステップを完了するためにはより多くの仕事をしなければなりません。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "I get an `OutOfMemoryError` (OOME) building native executables, what can I do?"
msgstr "ネイティブ実行可能ファイルをビルドする際に OutOfMemoryError (OOME) が発生しました。どうすればよいですか?"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Building native executables is not only time consuming, but it also takes a fair amount of memory.\n"
"For example, building a sample native Quarkus JPA application such as the Hibernate quickstart,\n"
"may use 6GB to 8GB resident set size in memory.\n"
"A big chunk of this memory is Java heap,\n"
"but extra memory is required for other aspects of the JVM that runs the native building process.\n"
"It is still possible to build such applications in environments that have total memory close to the limits,\n"
"but to do that it is necessary to shrink the maximum heap size of the GraalVM native image process.\n"
"To do that, set a maximum heap size using the `quarkus.native.native-image-xmx` property.\n"
"For example, we can instruct GraalVM to use 5GB of maximum heap size by passing in\n"
"`-Dquarkus.native.native-image-xmx=5g` in the command line."
msgstr "ネイティブ実行可能ファイルのビルドは時間がかかるだけでなく、かなりの量のメモリーも必要とします。たとえば、Hibernate クイックスタートなどのサンプルのネイティブ Quarkus JPA アプリケーションをビルドすると、メモリー内に 6GB から 8GB の常駐セットサイズが使用される場合があります。このメモリーの大部分は Java ヒープですが、ネイティブビルドプロセスを実行する JVM の他の側面には追加のメモリーが必要です。合計メモリーが限界に近い環境でこのようなアプリケーションを構築することは可能ですが、そのためには GraalVM ネイティブイメージプロセスの最大ヒープサイズを縮小する必要があります。これを行うには、 `quarkus.native.native-image-xmx` プロパティーを使用して最大ヒープサイズを設定します。たとえば、コマンドラインで `-Dquarkus.native.native-image-xmx=5g` を渡すことで、GraalVM に 5GB の最大ヒープサイズを使用するように指示できます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Building native executables this way might have the side effect of requiring more time to complete.\n"
"This is due to garbage collection having to work harder for native image generation to have free space to do its job."
msgstr "この方法でネイティブ実行可能ファイルをビルドすると、完了するまでに時間がかかるという副作用が生じる可能性があります。これは、ガベージコレクションが、ネイティブイメージの生成に必要な空き領域を確保するために、より多くの作業を行う必要があるためです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Note that typical applications are likely bigger than quickstarts,\n"
"so the memory requirements will also likely be higher."
msgstr "一般的なアプリケーションはクイックスタートよりも大きい可能性が高いため、メモリー要件も高くなる可能性があることに注意してください。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr "JVMモードと比較して、ネイティブ実行可能ファイルのランタイムパフォーマンスが劣るのはなぜですか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"As with most things in life there are some trade-offs involved when choosing native compilation over JVM mode.\n"
"So depending on the application the runtime performance of a native application might be slower compared to JVM mode,\n"
"though that’s not always the case."
msgstr "多くの場合、JVM モードではなくネイティブコンパイルを選択すると、いくつかのトレードオフが発生します。そのため、アプリケーションによっては、ネイティブアプリケーションの実行時パフォーマンスが JVM モードに比べて遅くなることがありますが、絶対にそうであるとは限りません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.\n"
"That includes the opportunities to inline a lot more of the code,\n"
"locate hot code on direct paths (i.e. ensure better instruction cache locality)\n"
"and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).\n"
"Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr "JVMによるアプリケーションの実行には、実行中に蓄積されるプロファイル情報を利用したコードの実行時最適化が含まれます。これには、より多くのコードをインライン化したり、ホットコードをダイレクトパスに配置したり（つまり、より良い命令キャッシュのローカリティを確保する）、コールドパスにある多くのコードをカットしたりする機会が含まれます（JVMでは、多くのコードが何かが実行しようとするまでコンパイルされず、最適化解除や再コンパイルを引き起こすトラップに置き換えられます）。コールドパスを取り除くことで、コンパイルされる少量のホットコードの分岐の複雑さや組み合わせロジックが大幅に削減されるため、先行してコンパイルする場合よりも多くの最適化の機会が得られます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.\n"
"Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr "一方、ネイティブ実行可能ファイルのコンパイルでは、オフラインでコードをコンパイルする際に、すべての可能な実行経路に対応しなければなりません。なぜならば、ホットパスやコールドパスがわからないため、罠を仕掛けて、それに当たったら再コンパイルするというようなトリックが使えないからです。同じ理由で、ホットパスを隣接して配置することでコードキャッシュの衝突を最小限に抑えるようなサイコロを積むこともできません。ネイティブ実行可能ファイルの生成は、閉じた世界の仮説により、いくつかのコードを削除することができますが、それだけでは、プロファイリングや実行時最適化解除＆再コンパイルがJVM JITコンパイラに提供するすべての利点を補うことはできません。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr "ただし、JVMの速度が向上する可能性があるため、その代償として、リソース（CPUとメモリの両方）の使用量と起動時間が増加することに注意してください。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr "JITが作動してコードを完全に最適化するまでに時間がかかります。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr "JIT コンパイラは、アプリケーションが利用できるリソースを消費します。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr "JVMは、より良い最適化をサポートするために、より多くのメタデータやコンパイラ/プロファイラのデータを保持しなければなりません。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr "1)の理由は、コードはしばらくの間、インタプリタ実行する必要があり、場合によっては、以下を担保する全ての潜在的な最適化が実現される前に、何度もコンパイルする必要があるからです。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr "そのコードパスをコンパイルする価値があります。つまり、十分な回数実行されています。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr "意味のある最適化を行うための十分なプロファイリングデータがあります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.\n"
"Although the compiled code is not as well optimized it is available straight away."
msgstr "1)の意味するところは、小規模で短命なアプリケーションには、ネイティブ実行可能ファイルの方が適しているということです。コンパイルされたコードは最適化されていませんが、すぐに利用できます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.\n"
"In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr "2)の理由は、JVMは基本的に実行時にアプリケーションと並行してコンパイラを実行しているからです。ネイティブ実行可能ファイルの場合、コンパイラは事前に実行されるため、アプリケーションと並行してコンパイラを実行する必要がありません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"There are several reasons for 3). The JVM does not have a closed world assumption.\n"
"So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.\n"
"For example, if an interface has only one implementation it can make a call jump directly to that code.\n"
"However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.\n"
"Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable,\n"
"including recording the full class and interface hierarchy,\n"
"details of which methods override other methods, all method bytecode etc.\n"
"In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr "3)にはいくつかの理由があります。JVMは閉じた世界を想定していません。そのため、新しいクラスのロードにより、コンパイル時の楽観的な仮定を修正する必要がある場合には、コードを再コンパイルできなければなりません。例えば、あるインターフェイスの実装が1つだけの場合、そのコードに直接コールジャンプすることができます。しかし、2つ目の実装クラスがロードされた場合には、レシーバのインスタンスのタイプをテストして、そのクラスに属するコードにジャンプするようにコールサイトを修正する必要があります。このような最適化をサポートするには、ネイティブ実行可能ファイルよりもクラスベースの詳細を記録しておく必要があります。これには、完全なクラスとインターフェイスの階層、どのメソッドが他のメソッドをオーバーライドするかの詳細、すべてのメソッドのバイトコードなどが含まれます。ネイティブ実行可能ファイルでは、クラス構造やバイトコードの詳細のほとんどは実行時には無視できます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.\n"
"At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.\n"
"That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.\n"
"It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr "また、JVMはクラスベースや実行プロファイルの変更にも対応しなければならず、その結果、スレッドが以前のコールドパスを通ることになります。その時点で、JVMはコンパイルされたコードからインタープリタにジャンプし、以前のコールドパスを含む新しい実行プロファイルに対応するためにコードを再コンパイルしなければなりません。そのためには、コンパイルされたスタックフレームを1つまたは複数のインタープリタフレームに置き換えることができる実行時情報を保持する必要があります。また、実行されたもの、されなかったものを追跡するために、ランタイムの拡張可能なプロファイルカウンタを割り当て、更新する必要があります。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Why are native executables “big”?"
msgstr "なぜネイティブ実行可能ファイルは大きいのですか？"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "This can be attributed to a number of different reasons:"
msgstr "これには様々な理由があります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Native executables include not only the application code but also, library code, and JDK code.\n"
"As a result a more fair comparison would be to compare the native executable’s size with the size of the application,\n"
"plus the size of the libraries it uses, plus the size of the JDK.\n"
"Especially the JDK part is not negligible even in simple applications like HelloWorld.\n"
"To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr "ネイティブ実行可能ファイルには、アプリケーションのコードだけでなく、ライブラリのコードやJDKのコードも含まれています。そのため、ネイティブ実行可能ファイルのサイズは、アプリケーションのサイズに加えて、使用するライブラリのサイズとJDKのサイズを加えたものと比較するのが、より公平な比較となります。特にJDKの部分は、HelloWorldのようなシンプルなアプリケーションでも無視できません。イメージの中で何が引き出されているかを把握するために、ネイティブ実行可能ファイルをビルドする際に `-H:+PrintUniverse` を使用することができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Some features are always included in a native executable even though they might never be actually used at run time.\n"
"An example of such a feature is garbage collection.\n"
"At compile time we can’t be sure whether an application will need to run garbage collection at run time,\n"
"so garbage collection is always included in native executables increasing their size even if not necessary.\n"
"Native executable generation relies on static code analysis to identify which code paths are reachable,\n"
"and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr "ネイティブ実行可能ファイルには、実行時に実際には使われないかもしれないのに、必ず含まれている機能があります。そのような機能の例として、ガベージコレクションがあります。コンパイル時には、アプリケーションが実行時にガベージコレクションを実行する必要があるかどうかはわかりません。そのため、ガベージコレクションは、必要がないにもかかわらず、常にネイティブ実行可能ファイルに含まれ、サイズが大きくなります。ネイティブ実行可能ファイルの生成は、どのコードパスが到達可能かを特定するために、静的なコード解析に依存していますが、静的なコード解析は不正確な場合があり、実際に必要なコードよりも多くのコードがイメージに入ってしまうことがあります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue]\n"
"with some interesting discussions about that topic."
msgstr "この話題については、 link:https://github.com/oracle/graal/issues/287[GraalVMアップストリーム課題]で興味深い議論が行われています。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "What version of Mandrel was used to generate a binary?"
msgstr "バイナリの生成に使用したMandrelのバージョンは？"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr "どのバージョンのMandrelを使ってバイナリを生成したかは、バイナリを以下のように検査すればわかります。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "How do I enable GC logging in native executables?"
msgstr "ネイティブ実行可能ファイルでGCロギングを有効にするにはどうすればいいですか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Executing the native executable with `-XX:PrintFlags=` prints a list of flags that can be passed to native executables.\n"
"For various levels of GC logging one may use:"
msgstr ""
"`-XX:PrintFlags=` でネイティブ実行可能ファイルを実行すると、ネイティブ実行可能ファイルに渡すことができるフラグのリストが表示されます。\n"
"GCロギングのさまざまなレベルに対して、以下のフラグを使用できます:"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr "ネイティブ実行可能ファイルのヒープダンプを取得することはできますか？ 例えば、メモリ不足になった場合などです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Starting with GraalVM 22.2.0 it will be possible to heap dumps upon request,\n"
"e.g. `kill -SIGUSR1 <pid>`.\n"
"Support for dumping the heap dump upon an out of memory error will follow up."
msgstr "GraalVM 22.2.0 からは、要求に応じてダンプをヒープすることが可能になります (例: `kill -SIGUSR1 <pid>`)。メモリー不足エラーの際のヒープダンプのダンプのサポートは、今後追加される予定です。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Can I build and run this examples outside a container in Linux?"
msgstr "このサンプルをコンテナーの外で Linux でビルドして実行することは可能ですか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Yes you can.\n"
"In fact, debugging native executables on a Linux bare metal box offers the best possible experience.\n"
"In this kind of environments, root access is not needed except to install packages required to run some debug steps,\n"
"or to enable `perf` to gather events at the kernel."
msgstr "Quarkusのネイティブ実行可能ファイルのデバッグは、Linux環境で行うのが最適です。一部のデバッグ手順を実行するために必要なパッケージをインストールする場合や、 `perf` でカーネルのイベントを収集できるようにする場合を除き、ルートアクセスは必要ありません。macOSやWindows環境でのデバッグは、コンテナ環境でも機能します（ link:#macwindows[FAQエントリ]を参照）。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr "これらのパッケージは、異なるデバッグセクションを実行するために、Linux環境で必要となるものです。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr "フレームグラフの生成に時間がかかったり、エラーが発生したりするのですが、どうすればいいですか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"There are multiple ways in which a native executable produced by Mandrel can be profiled.\n"
"All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr "Mandrelが作成したネイティブ実行可能ファイルをプロファイリングする方法は複数あります。すべての方法で、 `-H:-DeleteLocalSymbols` オプションを渡す必要があります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The method shown in this reference guide generates a binary with DWARF debug information,\n"
"runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.\n"
"However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr "このリファレンス・ガイドで紹介する方法は、DWARFのデバッグ情報を含むバイナリを生成し、 `perf record` を通して実行し、 `perf script` とフレーム・グラフ・ツールを使用してフレーム・グラフを生成します。しかし、このバイナリで行われる `perf script` の後処理ステップは、時間がかかったり、DWARF のエラーが表示されたりすることがあります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.\n"
"It instructs the binary to use an extra register for the frame pointer.\n"
"This enables `perf` to do stack walking to profile the runtime behaviour.\n"
"To generate the native executable using these flags, do the following:"
msgstr "フレームグラフを生成する別の方法として、ネイティブ実行可能ファイルを生成する際に、DWARFのデバッグ情報を生成する代わりに、 `-H:+PreserveFramePointer` を渡す方法があります。これは、フレームポインタに追加のレジスタを使用するようにバイナリに指示します。これにより、 `perf` は、実行時の動作をプロファイリングするためにスタックウォーキングを行うことができます。これらのフラグを使用してネイティブ実行可能ファイルを生成するには、以下のようにします。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr "実行時プロファイリング情報をネイティブ実行可能ファイルから取得するには、単純に次のようにします。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.\n"
"This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr "実行時プロファイリング情報を生成する方法としては、フレームポインタを保持したバイナリを生成するよりも、デバッグ情報を使用することを推奨します。これは、ネイティブ実行可能ファイルのビルドプロセスにデバッグ情報を追加しても、実行時のパフォーマンスには何の影響もないのに対し、フレームポインタの保持は影響があるためです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand,\n"
"for profiling or debugging purposes.\n"
"Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well,\n"
"hence it does not bloat the native executable itself.\n"
"To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr "DWARFのデバッグ情報は、別のファイルに生成され、デフォルトのデプロイメントでは省略することもでき、プロファイリングやデバッグの目的で必要なときだけ転送して使用することができます。さらに、デバッグ情報があることで、 `perf` は関連するソースコード行も表示することができ、ネイティブ実行可能ファイル自体を肥大化させることはありません。そのためには、 `perf report` にソースコード行を表示するパラメータを追加して呼び出すだけです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The performance penalty of preserving the frame pointer is due to using the extra register for stack walking,\n"
"particularly in `x86_64` compared to `aarch64` where there are fewer registers available.\n"
"Using this extra register reduces the number of registers that are available for other work,\n"
"which can lead to performance penalties."
msgstr "フレームポインターを保持することによる性能上のペナルティーは、スタックウォーキングのために余分なレジスタを使用することによるもので、特に `aarch64` と比較して `x86_64` では使用できるレジスターの数が少なくなります。この余分なレジスターを使用すると、他の作業に使用できるレジスターの数が減るため、性能上のペナルティーが発生します。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr "native-imageのバグを見つけたようなのですが、IDEでどのようにデバッグすればいいのでしょうか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Although it is possible to remote debug processes within containers,\n"
"it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr "コンテナ内のプロセスをリモートデバッグすることは可能ですが、Mandrelをローカルにインストールしてシェルプロセスのパスに追加することで、native-imageをステップバイステップでデバッグする方が簡単かもしれません。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Native executable generation is the result of two Java processes that are executed sequentially.\n"
"The first process is very short and its main job is to set things up for the second process.\n"
"The second process is the one that takes care of most of the work.\n"
"The steps to debug one process or the other vary slightly."
msgstr "ネイティブ実行可能ファイルの生成は、2つのJavaプロセスが順次実行された結果です。最初のプロセスは非常に短く、主な仕事は2番目のプロセスのために物事を準備することです。2つ目のプロセスは、ほとんどの作業を行うものです。一方のプロセスをデバッグするための手順は、若干異なります。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"Let’s discuss first how to debug the second process,\n"
"which is the one you most likely to want to debug.\n"
"The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.\n"
"To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr "まず、最もデバッグしたいと思われる2番目のプロセスのデバッグ方法について説明します。2番目のプロセスのスタートポイントは、 `com.oracle.svm.hosted.NativeImageGeneratorRunner` クラスです。このプロセスをデバッグするには、ビルド時の引数として `--debug-attach=*:8000` を追加するだけです。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.\n"
"In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.\n"
"However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process,\n"
"so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr "1番目のプロセスのスタートポイントとなるのは、 `com.oracle.svm.driver.NativeImages` クラスです。GraalVM CEのディストリビューションでは、この最初のプロセスはバイナリなので、従来のようにJava IDEを使ってデバッグすることはできません。しかし、Mandrelのディストリビューション（またはローカルにビルドされたGraalVM CEインスタンス）では、これを通常のJavaプロセスとして保持しているため、 `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` を追加のビルド引数として追加することで、このプロセスをリモートデバッグすることができます。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr "JFR/JMCを使って、ネイティブバイナリのデバッグやプロファイリングはできますか？"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and\n"
"https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)]\n"
"can be used to profile native binaries since GraalVM CE 21.2.0.\n"
"However, JFR in GraalVM is currently significantly limited in capabilities compared to HotSpot.\n"
"The custom event API is fully supported, but many VM level features are unavailable.\n"
"They will be added in future releases. Current limitations are:"
msgstr "link:https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder(JFR)]と link:https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control(JMC)]は、GraalVM CE 21.2.0以降、プロファイル・ネイティブ・バイナリのデバッグに使用することができます。 しかし、GraalVMのJFRは現在、HotSpotと比較して機能が大幅に制限されています。カスタムイベントAPIは完全にサポートされていますが、多くのVMレベルの機能は利用できません。これらは将来のリリースで追加される予定です。現在の制限事項は以下の通りです。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Minimal VM level events"
msgstr "最小限の VM レベルのイベント"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "No old object sampling"
msgstr "oldオブジェクトのサンプリングはありません"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "No stacktrace tracing"
msgstr "スタックトレースのトレースがありません"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "No Streaming API for JDK 17"
msgstr "JDK 17 のストリーミング API なし"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To use JFR add the application property: `-Dquarkus.native.enable-vm-inspection=true`.\n"
"E.g."
msgstr "JFRを使用するには、アプリケーションのプロパティ `-Dquarkus.native.enable-vm-inspection=true` を追加します。例:"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr "イメージのコンパイルが完了したら、ランタイムフラグ `-XX:+FlightRecorder` と `-XX:StartFlightRecording` を使ってJFRを有効にし、起動します。例えば、以下のようになります。"

#. type: Plain text
#: _versions/2.13/guides/native-reference.adoc
msgid "For more details on using JFR, see https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/debugging-and-diagnostics/JFR/[here]."
msgstr "JFR の使い方の詳細は、 https://www.graalvm.org/{graalvm-version}/reference-manual/native-image/debugging-and-diagnostics/JFR/[こちら] をご覧ください。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "How can we troubleshoot performance problems only reproducible in production?"
msgstr "本番環境でのみ再現可能なパフォーマンスの問題をどのようにトラブルシューティングできますか?"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"In this situation, switching to JVM mode would be the best thing to try first.\n"
"If the performance issues continue after switching to JVM mode,\n"
"you can use more established and mature tooling to figure out the root cause.\n"
"If the performance issue is limited to native mode only,\n"
"you might not be able to use `perf`,\n"
"so JFR is the only way to gather any information in this situation.\n"
"As JFR support for native expands,\n"
"the ability to detect root causes of performance issues directly in production will improve."
msgstr "この状況では、JVM モードに切り替えることが最初に試す最善の方法です。JVM モードに切り替えた後もパフォーマンスの問題が続く場合は、より確立された成熟したツールを使用して根本原因を突き止めることができます。パフォーマンスの問題がネイティブモードのみに限定されている場合、 `perf` を使用できない可能性があるため、この状況で情報を収集するには JFR が唯一の方法です。ネイティブの JFR サポートが拡大するにつれて、パフォーマンスの問題の根本原因を本番環境で直接検出する機能が向上します。"

#. type: Title ===
#: _versions/2.13/guides/native-reference.adoc
#, no-wrap
msgid "What information helps most debug issues that happen either at build-time or run-time?"
msgstr "ビルド時または実行時に発生するほとんどの問題のデバッグに役立つ情報は何ですか?"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To fix classpath, class initialization or forbidden API errors at build time it's best to use <<native-reports,build time reports>> to understand the closed world universe.\n"
"A complete picture of the universe, along with the relationships between the different classes and methods will help uncover and fix most of the issues."
msgstr "ビルド時にクラスパス、クラスの初期化、または禁止された API エラーを修正するには、<<native-reports,build time reports>> を使用して、閉ざされた世界を理解するのが最善です。さまざまなクラスとメソッド間の関係とともに、世界全体像を把握することで、ほぼすべての問題を発見して修正することができます。"

#: _versions/2.13/guides/native-reference.adoc
msgid ""
"To fix runtime native specific errors,\n"
"it's best to have <<debug-info,debug info builds>> of the native executables around,\n"
"so that `gdb` can be hooked up quickly to debug the issue.\n"
"If you also add local symbols to the debug info builds,\n"
"you will obtain precise <<profiling,profiling information>> as well."
msgstr "ランタイムのネイティブ特有のエラーを修正するには、ネイティブ実行可能ファイルの <<debug-info,debug info builds>> を用意しておくと、 `gdb` を素早くフックして問題をデバッグすることができます。デバッグ情報ビルドにローカルシンボルも追加すると、正確な <<profiling,profiling information>> が得られます。"

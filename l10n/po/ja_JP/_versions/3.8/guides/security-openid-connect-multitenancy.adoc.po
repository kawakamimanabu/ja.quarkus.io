msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) multitenancy"
msgstr "OpenID Connect (OIDC)のマルチテナンシーの使用"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This guide demonstrates how your OpenID Connect (OIDC) application can support multitenancy to serve multiple tenants from a single application.\n"
"These tenants can be distinct realms or security domains within the same OIDC provider or even distinct OIDC providers."
msgstr ""
"このガイドでは、OpenID Connect (OIDC) アプリケーションがマルチテナントをサポートして、単一のアプリケーションから複数のテナントにサービスを提供する方法を説明します。\n"
"これらのテナントは、同じ OIDC プロバイダー内の異なるレルムまたはセキュリティードメイン、あるいは異なる OIDC プロバイダーである場合もあります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Each customer functions as a distinct tenant when serving multiple customers from the same application, such as in a SaaS environment.\n"
"By enabling multitenancy support to your applications, you can support distinct authentication policies for each tenant, even authenticating against different OIDC providers, such as Keycloak and Google."
msgstr ""
"SaaS 環境など、同じアプリケーションから複数の顧客にサービスを提供する場合、各顧客は個別のテナントとして機能します。\n"
"アプリケーションに対してマルチテナンシーサポートを有効にすると、Keycloak や Google などの異なる OIDC プロバイダーに対して認証する場合でも、テナントごとに異なる認証ポリシーをサポートできます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authorize a tenant by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "Bearer Token Authorization を使用してテナントを認可するには、xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) ベアラートークン認証] ガイドを参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate and authorize a tenant by using the OIDC authorization code flow, read the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr "OIDC 認可コードフローを使用してテナントを認証および認可するには、xref:security-oidc-code-flow-authentication.adoc[Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム] ガイドを参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Also, see the xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] reference guide."
msgstr "また、xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) 設定プロパティー] のリファレンスガイドも参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application that supports two resource methods:"
msgstr "この例では、次の 2 つのリソースメソッドをサポートする非常にシンプルなアプリケーションをビルドします。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the ID token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "このリソースは、認証されたユーザーと現在のテナントについて、OIDC プロバイダーによって発行された ID トークンから取得した情報を返します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}/bearer`"
msgstr "`/{tenant}/bearer`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the Access Token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "このリソースは、認証されたユーザーと現在のテナントについて、OIDC プロバイダーによって発行された Access Token から取得した情報を返します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For a thorough understanding, we recommend you build the application by following the upcoming step-by-step instructions."
msgstr "完全に理解するために、次の手順に従ってアプリケーションをビルドすることを推奨します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, if you prefer to start with the completed example, clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "あるいは、完成した例から始める場合は、Git リポジトリーをクローン (`git clone {quickstarts-clone-url}`) するか、{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは、 `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[ディレクトリー]にあります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you already have your Quarkus project configured, add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "Quarkus プロジェクトがすでに設定されている場合は、プロジェクトベースディレクトリーで次のコマンドを実行して、 `oidc` エクステンションをプロジェクトに追加します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This adds the following to your build file:"
msgstr "これにより、 `pom.xml` ファイルに以下が追加されます:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Start by implementing the `/{tenant}` endpoint.\n"
"As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr ""
"まず、 `/{tenant}` エンドポイントを実装することから始めます。\n"
"以下のソースコードからわかるように、これは単なる通常の Jakarta REST リソースです。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in `application.properties`, create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface, which can dynamically resolve tenant configurations:"
msgstr "受信リクエストからテナントを解決し、 `application.properties` 内の特定の `quarkus-oidc` テナント設定にマップするには、テナント設定を動的に解決できる `io.quarkus.oidc.TenantConfigResolver` インターフェイスの実装を作成します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the preceding implementation, tenants are resolved from the request path.\n"
"If no tenant can be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""
"前述の実装では、テナントはリクエストパスから解決されます。\n"
"テナントを推測できない場合は、デフォルトのテナント設定を使用する必要があることを示すために `null` が返されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `tenant-a` application type is `hybrid`; it can accept HTTP bearer tokens if provided.\n"
"Otherwise, it initiates an authorization code flow when authentication is required."
msgstr ""
"`tenant-a` アプリケーションタイプは `hybrid` です。提供されている場合、HTTP ベアラートークンを受け入れることができます。\n"
"それ以外の場合は、認証が必要なときに認可コードフローを開始します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The first configuration is the default tenant configuration that should be used when the tenant cannot be inferred from the request.\n"
"Be aware that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` to support testing a multitenant application with Dev Services For Keycloak.\n"
"This configuration uses a Keycloak instance to authenticate users."
msgstr ""
"最初の設定は、リクエストからテナントを推測できない場合に使用するデフォルトのテナント設定です。\n"
"%prod` プロファイル接頭辞は、Dev Services For Keycloak を使用したマルチテナントアプリケーションのテストをサポートするために、 `quarkus.oidc.auth-server-url` とともに使用される点に注意してください。\n"
"この設定では、Keycloak インスタンスを使用してユーザーを認証します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration, provided by `TenantConfigResolver`, is used when an incoming request is mapped to the `tenant-a` tenant."
msgstr "`TenantConfigResolver` によって提供される 2 番目の設定は、受信リクエストが `tenant-a` テナントにマップされるときに使用されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "両方の設定は、異なる `realms` を使用しながら、同じ Keycloak サーバーインスタンスにマップされます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "または、 `application.properties` で直接テナント `tenant-a` を設定することもできます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In that case, also use a custom `TenantConfigResolver` to resolve it:"
msgstr "その場合は、カスタム `TenantConfigResolver` も使用して解決します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can define multiple tenants in your configuration file.\n"
"To map them correctly when resolving a tenant from your `TenantResolver` implementation, ensure each has a unique alias."
msgstr ""
"設定ファイルで複数のテナントを定義できます。\n"
"`TenantResolver` 実装からテナントを解決するときにそれらを正しくマップするには、それぞれに一意のエイリアスがあることを確認します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "However, using a static tenant resolution, which involves configuring tenants in `application.properties` and resolving them with `TenantResolver`, does not work for testing endpoints with Dev Services for Keycloak because it does not know how the requests are be mapped to individual tenants, and cannot dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values. Therefore, using `%prod` prefixes with tenant-specific URLs within `application.properties` does not work in both test and development modes."
msgstr "ただし、 `application.properties` でテナントを設定し、 `TenantResolver` を使用してこれらを解決する静的テナント解決を使用することは、Dev Services for Keycloak を使用したエンドポイントのテストには機能しません。これは、リクエストが個々のテナントにどのようにマッピングされるかがわからず、テナント固有の `quarkus.oidc.<tenant-id>.auth-server-url` の値を動的に提供できないためです。したがって、 `application.properties` 内のテナント固有の URL に `%prod` 接頭辞を付けると、テストモードと開発モードの両方で機能しません。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` contains a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant-specific state or session cookie already exists.\n"
"Therefore, when working with multiple OIDC providers, you only need a path-specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""
"現在のテナントが OIDC の `web-app` アプリケーションを表す場合、カスタムテナントリゾルバーがすべてのリクエストに対して呼び出されるまでに、現在の `io.vertx.ext.web.RoutingContext` には `tenant-id` 属性が含まれ、テナント固有の状態またはセッション Cookie のいずれかがすでに存在する場合に、コード認証フローとすでに認証されたリクエストを完了します。\n"
"したがって、複数の OIDC プロバイダーを使用する場合、 `RoutingContext` に `tenant-id` 属性が設定されていない場合にのみ、パス固有のチェックを行ってテナント ID を解決する必要があります。以下はその例です。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This is how Quarkus OIDC resolves static custom tenants if no custom `TenantResolver` is registered."
msgstr "これは、カスタム `TenantResolver` が登録されていない場合に、Quarkus OIDC が静的カスタムテナントを解決する方法です。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "A similar technique can be used with `TenantConfigResolver`, where a `tenant-id` provided in the context can return `OidcTenantConfig` already prepared with the previous request."
msgstr "同様の手法を `TenantConfigResolver` でも使用できます。コンテキストで提供される `tenant-id` は、以前のリクエストですでに準備されている `OidcTenantConfig` を返すことができます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you also use xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy] or xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy] and both tenant ids are the same\n"
"and must be extracted from the Vert.x `RoutingContext`, you can pass the tenant id from the OIDC Tenant Resolver to the Hibernate ORM Tenant Resolver or MongoDB with Panache Mongo Database Resolver\n"
"as a `RoutingContext` attribute, for example:"
msgstr ""
"xref:hibernate-orm.adoc#multitenancy[Hibernate ORM マルチテナンシー] または xref:mongodb-panache.adoc#multitenancy[MongoDB と Panache マルチテナンシー] も使用していて、両方のテナント ID が同じで、\n"
"Vert.x `RoutingContext` から抽出する必要がある場合は、テナント ID を OIDC テナントリゾルバーから、Hibernate ORM テナントリゾルバーまたは MongoDB と Panache Mongo データベースリゾルバーへ\n"
"`RoutingContext` 属性として渡すことができます。以下に例を示します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Starting and configuring the Keycloak server"
msgstr "Keycloak サーバーの起動と設定"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak server, you can use Docker and run the following command:"
msgstr "Keycloak サーバーを起動するには、Docker を使用して次のコマンドを実行します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "where `keycloak.version` is set to `24.0.0` or higher."
msgstr "ここで、 `keycloak.version` は `24.0.0` 以上に設定されています。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Access your Keycloak server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスします。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Log in as the `admin` user to access the Keycloak administration console.\n"
"The username and password are both `admin`."
msgstr ""
"Keycloak 管理コンソールにアクセスするには、 `admin` ユーザーとしてログインします。\n"
"ユーザー名とパスワードは両方とも `admin` です。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Now, import the realms for the two tenants:"
msgstr "次に、2 つのテナントのレルムをインポートします。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] をインポートして、デフォルトのレルムを作成します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] をインポートし、テナント `tenant-a` のレルムを作成します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For more information, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "詳細は、 https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新規レルムの作成] 方法に関する Keycloak ドキュメントを参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running and using the application"
msgstr "アプリケーションの実行と使用"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in developer mode"
msgstr "開発者モードで実行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスをdevモードで実行する場合、次を実行して下さい:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in JVM mode"
msgstr "JVM モードでの実行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "開発モードでアプリケーションを試した後、標準の Java アプリケーションとして実行できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "First, compile it:"
msgstr "まず、コンパイルします:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "次に、以下を実行してください:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Running in native mode"
msgstr "ネイティブモードでの実行"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code; no modifications are required."
msgstr "この同じデモはネイティブコードにコンパイルできます。変更は必要ありません。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resources."
msgstr ""
"これは、生成されたバイナリーにランタイムテクノロジーが含まれ、\n"
"最小限のリソースで実行するように最適化されているため、\n"
"実稼働環境に JVM をインストールする必要がなくなることを意味します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation takes a bit longer, so this step is turned off by default;\n"
"let's build again by enabling the native build:"
msgstr ""
"コンパイルには少し時間がかかるため、この手順はデフォルトでオフになっています。\n"
"ネイティブビルドを有効にして再度ビルドしてみましょう。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After a little while, you can run this binary directly:"
msgstr "しばらくすると、このバイナリーを直接実行できるようになります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Test the application"
msgstr "アプリケーションのテスト"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Use Dev Services for Keycloak"
msgstr "Dev Services for Keycloakの使用"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"Dev Services for Keycloak launches and initializes a test container: it imports configured realms and sets a base Keycloak URL for the `CustomTenantResolver` to calculate a realm-specific URL."
msgstr ""
"Keycloak に対するインテグレーションテストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] が推奨されます。\n"
"Dev Services for Keycloak は、テストコンテナーを起動して初期化します。設定されたレルムをインポートし、 `CustomTenantResolver` のベース Keycloak URL を設定して、レルム固有の URL を計算します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "First, add the following dependencies:"
msgstr "まず、次の依存関係を追加します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` tests the `/{tenant}` endpoint and the authorization code flow."
msgstr ""
"`quarkus-test-keycloak-server` は、レルム固有のアクセストークンを取得するためのユーティリティクラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します。これは、ベアラアクセストークンを想定する `/{tenant}/bearer` エンドポイントのテストに `RestAssured` と共に使用できます。\n"
"`HtmlUnit` は、 `/{tenant}` エンドポイントと認可コードフローをテストします。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Next, configure the required realms:"
msgstr "次に、必要なレルムを設定します:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test, which runs in JVM mode:"
msgstr "最後に、JVM モードで実行されるテストを記述します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In native mode:"
msgstr "ネイティブモードの場合: "

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "For more information about how it is initialized and configured, see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]."
msgstr "初期化および設定方法の詳細は、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Use the browser"
msgstr "ブラウザーの使用"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, open your browser and access the following URL:"
msgstr "アプリケーションの動作確認は、ブラウザを起動して以下のURLにアクセスしてください:"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default[http://localhost:8080/default]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything works as expected, you are redirected to the Keycloak server to authenticate.\n"
"Be aware that the requested path defines a `default` tenant, which we don't have mapped in the configuration file.\n"
"In this case, the default configuration is used."
msgstr ""
"すべてが期待どおりに動作する場合、認証のために Keycloak サーバーにリダイレクトされます。\n"
"要求されたパスは、設定ファイルでマッピングされていない `default` テナントを定義していることに注意してください。\n"
"この場合、デフォルトの設定が使用されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate to the application, enter the following credentials in the Keycloak login page:"
msgstr "アプリケーションを認証するには、Keycloak ログインページで次の認証情報を入力します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Username: `alice`"
msgstr "ユーザー名: `alice`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Password: `alice`"
msgstr "パスわ=ド: `alice`"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the *Login* button, you are redirected back to the application."
msgstr "*Login* ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr "次の URL でアプリケーションにアクセスを試みます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You are redirected again to the Keycloak login page.\n"
"However, this time, you are going to authenticate by using a different realm."
msgstr ""
"Keycloak ログインページに再度リダイレクトされます。\n"
"ただし、今回は別のレルムを使用して認証します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, the landing page shows the user's name and email if the user is successfully authenticated.\n"
"Although `alice` exists in both tenants, the application treats them as distinct users in separate realms."
msgstr ""
"どちらの場合も、ユーザーが正常に認証されると、ランディングページにユーザーの名前とメールアドレスが表示されます。\n"
"`alice` は両方のテナントに存在しますが、アプリケーションはそれらを別々のレルム内の別個のユーザーとして扱います。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant configuration resolution"
msgstr "静的テナント設定の解決"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""
"`application.properties` ファイルで複数のテナント設定を行う場合は、テナント識別子の解決方法を指定するだけで済みます。\n"
"テナント識別子の解決を設定するには、次のいずれかのオプションを使用します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-resolver>>"
msgstr "<<tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<default-tenant-resolver>>"
msgstr "<<default-tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "<<annotations-tenant-resolver>>"
msgstr "<<annotations-tenant-resolver>>"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"These tenant resolution options are tried in the order they are listed until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`), the default (unnamed) tenant configuration is selected."
msgstr ""
"これらのテナント解決オプションは、テナント ID が解決されるまで、リストされている順序で試行されます。\n"
"テナント ID が未解決のまま (`null`) の場合、デフォルト (名前なし) のテナント設定が選択されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with `TenantResolver`"
msgstr "`TenantResolver` で解決する"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "次の `application.properties` の例は、 `TenantResolver` メソッドを使用して、 `a` および `b` という名前の 2 つのテナントのテナント ID を解決する方法を示しています。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You can return the tenant id of either `a` or `b` from `quarkus.oidc.TenantResolver`:"
msgstr "`quarkus.oidc.TenantResolver` から `a` または `b` のいずれかのテナント ID を返すことができます："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, the value of the last request path segment is a tenant id, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "この例では、最後のリクエストパスセグメントの値はテナント ID ですが、必要に応じて、より複雑なテナント ID 解決ロジックを実装できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Default resolution"
msgstr "デフォルト解像度"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in the last segment of the request path."
msgstr "テナント識別子のデフォルトの解決は規則に基づいており、認証要求には要求パスの最後のセグメントにテナント識別子が含まれている必要があります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "次の `application.properties` の例は、 `google` と `github` という名前の 2 つのテナントを設定する方法を示しています。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the provided example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and require session cookies to be generated after authentication.\n"
"After Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, such as a secured resource path on the JAX-RS endpoint."
msgstr ""
"提供された例では、両方のテナントが OIDC `web-app` アプリケーションを設定して、認可コードフローを使用してユーザーを認証し、認証後にセッション Cookie を生成することを要求します。\n"
"Google または GitHub が現在のユーザーを認証すると、ユーザーは、JAX-RS エンドポイント上のセキュアなリソースパスなど、認証されたユーザーの `/signed-in` 領域に戻されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "最後に、デフォルトのテナント解決を完了するには、次の設定プロパティーを設定します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths.\n"
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr ""
"エンドポイントが `http://localhost:8080` で実行されている場合は、特定の `/google` または `/github` JAX-RS リソースパスを追加せずに、ユーザーが `http://localhost:8080/google` または `http://localhost:8080/github` のいずれかにログインするための UI オプションを提供することもできます。\n"
"認証が完了すると、テナント識別子もセッション Cookie 名に記録されます。\n"
"したがって、認証されたユーザーは、セキュアな URL に `google` または `github` パス値を含める必要なく、セキュアなアプリケーション領域にアクセスできます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Default resolution can also work for Bearer token authentication.\n"
"Still, it might be less practical because a tenant identifier must always be set as the last path segment value."
msgstr ""
"デフォルトの解決は、ベアラートークン認証にも機能します。\n"
"ただし、テナント識別子は常に最後のパスセグメント値として設定する必要があるため、あまり実用的ではない可能性があります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with annotations"
msgstr "アノテーションで解決する"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "`io.quarkus.oidc.TenantResolver` を使用する代わりに、 `io.quarkus.oidc.Tenant` アノテーションを使用してテナント識別子を解決できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work.\n"
"For more information, see the xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""
"これを機能させるには、プロアクティブ HTTP 認証を無効にする必要があります (`quarkus.http.auth.proactive=false`)。\n"
"詳細は、xref:security-proactive-authentication.adoc[プロアクティブ認証] ガイドを参照してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants, the `hr` and default tenants, all resource methods and classes carrying `@Tenant(\"hr\")` are authenticated by using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`.\n"
"In contrast, all other classes and methods are still authenticated by using the default OIDC provider."
msgstr ""
"アプリケーションが 2 つの OIDC テナント (`hr` テナントとデフォルトテナント) をサポートしていると仮定すると、 `@Tenant(\"hr\")` を持つすべてのリソースメソッドとクラスは、 `quarkus.oidc.hr.auth-server-url` によって設定された OIDC プロバイダーを使用して認証されます。\n"
"対照的に、他のすべてのクラスとメソッドは、引き続きデフォルトの OIDC プロバイダーを使用して認証されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed on either the resource class or resource method."
msgstr "`io.quarkus.oidc.Tenant` アノテーションは、リソースクラスまたはリソースメソッドのいずれかに配置する必要があります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant configuration resolution"
msgstr "動的なテナント設定の解決"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr "サポートしたいさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、 `io.quarkus.oidc.TenantConfigResolver` が利用出来ます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `OidcTenantConfig` returned by this method is the same one used to parse the `oidc` namespace configuration from the `application.properties`.\n"
"You can populate it by using any settings supported by the `quarkus-oidc` extension."
msgstr ""
"このメソッドから返される `OidcTenantConfig` は、 `application.properties` から `oidc` namespace 設定を解析するために使用されるものと同じです。\n"
"`quarkus-oidc` エクステンションでサポートされている任意の設定を使用してデータを入力できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next."
msgstr "動的テナントリゾルバーが `null` を返す場合、次に <<static-tenant-resolution>> が試行されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for OIDC web-app applications"
msgstr "OIDC web-app アプリケーションのテナント解決"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The simplest option for resolving the OIDC `web-app` application configuration is to follow the steps described in the <<default-tenant-resolver>> section."
msgstr "OIDC `web-app` アプリケーション構成を解決するための最も簡単なオプションは、 <<default-tenant-resolver>> セクションで説明されている手順に従うことです。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Try one of the options below if the default resolution strategy does not work for your application setup."
msgstr "アプリケーションのセットアップでデフォルトの解像度ストラテジーが機能しない場合は、以下のオプションのいずれかを試してください。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Several options are available for selecting the tenant configuration that should be used to secure the current HTTP request for both `service` and `web-app` OIDC applications, such as:"
msgstr "`service` および `web-app` OIDC アプリケーションの両方で、現在の HTTP リクエストをセキュアにするために使用するテナント構成を選択するために、次のようないくつかのオプションが利用可能です："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the URL paths.\n"
"For example, a `tenant-service` configuration must be used for the `/service` paths, while a `tenant-manage` configuration must be used for the `/management` paths."
msgstr "URLパスを確認してください。例えば、 `/service` のパスには `tenant-service` の設定を、 `/management` のパスには `tenant-manage` の設定を使用する必要があります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the HTTP headers.\n"
"For example, with a URL path always being `/service`, a header such as `Realm: service` or `Realm: management` can help to select between the `tenant-service` and `tenant-manage` configurations."
msgstr "HTTPヘッダーをチェックしてください。例えば、URLパスが常に `/service` の場合、 `Realm: service` や `Realm: management` のようなヘッダは、 `tenant-service` と `tenant-manage` の設定を選択するのに役立ちます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Check the URL query parameters.\n"
"It can work similarly to the way the headers are used to select the tenant configuration."
msgstr "URLクエリパラメータを確認します。これは、ヘッダーを使用してテナント構成を選択する方法と同様に機能します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "All these options can be easily implemented with the custom `TenantResolver` and `TenantConfigResolver` implementations for the OIDC `service` applications."
msgstr "これらのオプションはすべて、OIDC `service` アプリケーションのカスタムの `TenantResolver` 実装や `TenantConfigResolver` 実装を使用して簡単に実装できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "However, due to an HTTP redirect required to complete the code authentication flow for the OIDC `web-app` applications, a custom HTTP cookie might be needed to select the same tenant configuration before and after this redirect request because:"
msgstr "しかし、OIDC `web-app` アプリケーションのコード認証フローを完了するために HTTP リダイレクトが必要なため、このリダイレクトリクエストの前後で同じテナント構成を選択するためにカスタム HTTP クッキーが必要になる場合があります："

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"The URL path might not be the same after the redirect request if a single redirect URL has been registered in the OIDC provider.\n"
"The original request path can be restored after the tenant configuration has been resolved."
msgstr "OIDC プロバイダーに単一のリダイレクト URL が登録されている場合、リダイレクト要求後の URL パスが同じにならないことがあります。元のリクエストパスは、テナント構成が解決された後に復元できます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The HTTP headers used during the original request are unavailable after the redirect."
msgstr "元のリクエストで使用された HTTP ヘッダーは、リダイレクト後には使用できません。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The custom URL query parameters are restored after the redirect but only after the tenant configuration is resolved."
msgstr "カスタムURLクエリパラメータはリダイレクト後に復元されますが、テナント構成が解決された後にのみ復元されます。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "One option to ensure the information for resolving the tenant configurations for `web-app` applications is available before and after the redirect is to use a cookie, for example:"
msgstr "リダイレクトの前後に `web-app` アプリケーションのテナント設定を解決するための情報を確実に利用できるようにするための 1 つのオプションは、Cookie を使用することです。以下はその例です。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Disabling tenant configurations"
msgstr "テナント設定を無効にする"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations might return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合、カスタム `TenantResolver` および `TenantConfigResolver` 実装は、 `null` を返すことがあります。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "If you expect the custom resolvers always to resolve a tenant, you do not need to configure the default tenant resolution."
msgstr "カスタムリゾルバーが常にテナントを解決することを期待する場合は、デフォルトのテナント解決を設定する必要はありません。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "To turn off the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr "デフォルトのテナント設定をオフにするには、 `quarkus.oidc.tenant-enabled=false` を設定します。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured, but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "`quarkus.oidc.auth-server-url` が設定されていない場合、デフォルトのテナント設定は自動的に無効になりますが、カスタムテナント設定が使用可能であるか、 `TenantConfigResolver` が登録されています。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "Be aware that tenant-specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定も無効にできる点に注意してください (例: `quarkus.oidc.tenant-a.tenant-enabled=false`)。"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr "参照"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#: _versions/3.8/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

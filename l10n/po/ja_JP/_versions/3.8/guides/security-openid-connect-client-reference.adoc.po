msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr "OpenID Connect (OIDC) と OAuth2 クライアントおよびフィルター"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can use Quarkus extensions for OpenID Connect and OAuth 2.0 access token management, focusing on acquiring, refreshing, and propagating tokens."
msgstr "Quarkus エクステンションは、トークンの取得、更新、伝播を対象に、OpenID Connect および OAuth 2.0 アクセストークンの管理に使用できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "This includes the following:"
msgstr "これには、以下が含まれます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]."
msgstr "`quarkus-oidc-client` , `quarkus-oidc-client-reactive-filter` , `quarkus-oidc-client-filter` エクステンションを使用して、OpenID Connect や link:https://www.keycloak.org[Keycloak] などの OAuth 2.0 準拠認可サーバーからアクセストークンを取得し、リフレッシュします。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Using `quarkus-oidc-token-propagation-reactive` and `quarkus-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` および `quarkus-oidc-token-propagation` エクステンションを使用して、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization ベアラートークンとして使用して、リモートサービスにアクセスすることができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect Clientとトークン伝搬クイックスタート] も参照してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "OidcClient"
msgstr "OidcClient"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr "以下の依存関係を追加します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr "`OidcClient` はビルド時に IDP トークンエンドポイント URL (自動検出または手動設定) で初期化され、このエンドポイントを使用して `client_credentials` や `password` などのトークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Token endpoint configuration"
msgstr "トークンのエンドポイント設定"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、トークンのエンドポイントアドレスは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` パスを追加することによって検出されます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "For example, given this Keycloak URL:"
msgstr "例えば、この Keycloak の URL があるとします。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "`OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを回避する場合は、ディスカバリーを無効にして、相対パス値でトークンエンドポイントアドレスを設定することもできます。例:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "ディスカバリーなしでトークンエンドポイント URL を設定する、よりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr "この場合、 `quarkus.oidc-client.auth-server-url` と `quarkus.oidc-client.discovery-enabled` の設定は必要ありません。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Supported token grants"
msgstr "サポートされるトークングラント"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` がトークンを取得するために使用できる主なトークングラントは、 `client_credentials` (デフォルト) と `password` グラントです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Client credentials grant"
msgstr "クライアントクレデンシャル・グラント"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr "`client_credentials` グラントでは、 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` を使用してトークンリクエストの追加パラメーターを設定できます。ここでは、 `audience` パラメーターを使用して、トークンの受信者を設定する方法を説明します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Password grant"
msgstr "パスワード・グラント"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr "さらに、 `quarkus.oidc-client.grant-options.password` という設定プレフィックスを使用して、クライアント認証のグラントをカスタマイズする方法と同様に、カスタマイズすることが可能です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Other grants"
msgstr "その他のグラント"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr "`OidcClient` は設定にはない特別な入力パラメーターを必要とするグラントを使用して、トークンの取得を支援することもできます。これらのグラントとは、 `refresh_token` （外部リフレッシュトークン付き）、 `authorization_code` 、および現在のアクセストークンを交換するために使用できる 2 つのグラント `urn:ietf:params:oauth:grant-type:token-exchange` および `urn:ietf:params:oauth:grant-type:jwt-bearer`です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr ""
"アクセストークンを取得する必要があり、既存のリフレッシュトークンを現在の Quarkus エンドポイントに POST している場合は、 `refresh_token` グラントを使用する必要があります。このグラントでは、帯域外のリフレッシュトークンを使用して新しいトークンセットを取得します。\n"
"この場合、 `OidcClient` を次のように設定します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "次に、 `OidcClient.refreshTokens` メソッドと提供されたリフレッシュトークンを使用して、アクセストークンを取得できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See <<token-propagation-reactive,Token Propagation in MicroProfile RestClient Reactive filter>> and <<token-propagation,Token Propagation in MicroProfile RestClient filter>> for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝播されて使用されるのを避ける場合は、 `urn:ietf:params:oauth:grant-type:token-exchange` または `urn:ietf:params:oauth:grant-type:jwt-bearer` グラントの使用が必要になる場合があります。詳細は、<<token-propagation-reactive,MicroProfile RestClient Reactive filterにおけるトークン伝搬>> と<<token-propagation,in MicroProfile RestClient filterにおけるトークン伝播>> を参照してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC エクステンション] を使用して認可コードフローをサポートできない場合、 `OidcClient` を使用して `authorization code` グラントをサポートすることが必要になる場合があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` を次のように設定します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "次に、 `OidcClient.accessTokens` メソッドで追加プロパティーの Map を受け取り、現在の `code` と `redirect_uri` パラメーターを渡して認可コードとトークンを交換することが可能です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr "`OidcClient` は `urn:openid:params:grant-type:ciba` グラントもサポートします。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr "さらに、 `OidcClient.accessTokens` メソッドを使用して追加プロパティーの Map を受け入れ、 `auth_req_id` パラメーターを渡してトークン認可コードを交換できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Grant scopes"
msgstr "グラントスコープ"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "スコープの特定のセットが発行されたアクセストークンに関連付けられるように要求する必要がある場合があります。専用の  `quarkus.oidc-client.scopes` リストプロパティーを使用してください (例: `quarkus.oidc-client.scopes=email,phone`)。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Inject tokens"
msgstr "トークンの注入"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "内部で `OidcClient` を使用する `Tokens` を注入できます。 `Tokens` はアクセストークンを取得し、必要に応じて更新するために使用できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClients"
msgstr "OidcClientsの使用"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は ``OidcClient`` のコンテナーで、デフォルトの `OidcClient` と、このように設定できる名前付きクライアントが含まれています。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっています。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenantId` attribute. For example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDCマルチテナントも] 使用し、各OIDCテナントがそれぞれ関連する `OidcClient` 、Vert.x `RoutingContext` `tenantId` 属性を使用できます。たとえば、次のようになります："

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you need, you can also create a new `OidcClient` programmatically like this:"
msgstr "必要であれば、次のようにプログラムで新しい `OidcClient` を作成することもできます："

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Inject named OidcClient and tokens"
msgstr "名前の付いた OidcClient とトークンの注入"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の `OidcClient` オブジェクトが設定されている場合、 `OidcClients` を使用する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` の注入ターゲットを指定できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、 `Tokens` 注入に使用する `OidcClient` を指定することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClient の Reactive ClientFilter で OidcClient を使用する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Add the following Maven Dependency:"
msgstr "以下の Maven 依存関係を追加します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "また、 `io.quarkus:quarkus-oidc-client` も持ってくることに注意しましょう。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter,Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "これは、 `OidcClientRequestFilter` ( xref:oidc-client-filter[MicroProfile RestClient クライアントフィルタで OidcClient を使用] する を参照) と同様に動作します。 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。違いは、 xref:rest-client-reactive.adoc[Reactive RestClient] で動作し、トークンを取得または更新するときに現在の IO スレッドをブロックしないノンブロッキングクライアントフィルタを実装していることです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr "IOスレッドのブロックを避けるために、 `OidcClientRequestReactiveFilter` は実行されるまで最初のトークン取得を遅らせます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.reactive.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して、 `OidcClientRequestReactiveFilter` を選択的に登録できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "or"
msgstr "or"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-reactive-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestReactiveFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。注釈によって設定されたクライアント名は、 構成プロパティよりも優先されます。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-reactive-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言] がある場合、このクライアントを次のように参照できます："

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClient の ClientFilter で OidcClient を使用する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは、 `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter を提供し、 `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュし、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、 `quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "あるいは、 `quarkus.oidc-client-filter.register-filter=true` プロパティが設定されていれば、すべての MP Rest または Jakarta REST クライアントに `OidcClientRequestFilter` を自動的に登録することもできます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.oidc-client-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr "`OidcClientRequestFilter` はデフォルトで を使用します。名前付き は、 構成プロパティで選択できます。また、 アノテーションの 属性を設定することでも、 を選択できます。注釈によって設定されたクライアント名は、 構成プロパティよりも優先されます。例えば、 という OIDC クライアント `OidcClient` `OidcClient` `quarkus.oidc-client-filter.client-name` `@OidcClientFilter` `value` `OidcClient` `quarkus.oidc-client-filter.client-name` `jwt-secret` xref:use-oidc-clients[宣言] がある場合、このクライアントを次のように参照できます："

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Use a custom RestClient ClientFilter"
msgstr "カスタムの RestClient ClientFilter を使用する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "名前付きの `Tokens` を挿入することもできます。<<named-oidc-clients,Inject named OidcClient and Tokens>> を参照してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Refreshing access tokens"
msgstr "アクセストークンを更新する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr ""
"`OidcClientRequestReactiveFilter`、 `OidcClientRequestFilter`、および `Tokens` プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れのアクセストークンを更新します。\n"
"さらに、HTTP 401 エラーの原因となる可能性のある期限切れに近いアクセストークンの送信を回避するために、 `quarkus.oidc-client.refresh-token-time-skew` プロパティーを使用して事前にアクセストークンを更新できます。たとえば、このプロパティーが `3S` に設定されている場合、アクセストークンが 3 秒未満に失効し、このトークンは自動的に更新されます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr "OpenID Connect プロバイダーによっては、 `client_credentials` グラントレスポンスでリフレッシュトークンを返さないものがあることに注意してください。たとえば、Keycloak 12 以降では、 `client_credentials` に対してデフォルトでリフレッシュトークンが返されません。また、プロバイダーはリフレッシュトークンの使用回数を制限している場合があります。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Revoking access tokens"
msgstr "アクセストークンを失効する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr "Keycloak などの OpenId Connect プロバイダーがトークンの失効エンドポイントをサポートしている場合、 `OidcClient#revokeAccessToken` を使うことで現在のアクセストークンを失効させることができます。失効エンドポイントの URL は、トークン要求 URI と共に検出されるか、または `quarkus.oidc-client.revoke-path` で設定することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr "このトークンを REST クライアントで使用すると HTTP `401` ステータスコードで失敗するか、アクセストークンがすでに長期間使用されていて更新する場合は、アクセストークンを取り消してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr "リフレッシュトークンを使用してトークンのリフレッシュを要求することができます。リフレッシュトークンが利用できない場合は、まずそれを失効させてから、新しいアクセストークンをリクエストすることで更新できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "OidcClient authentication"
msgstr "OidcClient 認証"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` および他のグラントリクエストが成功するために OpenID Connect プロバイダーに対して認証する必要があります。 https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションはすべてサポートされています。以下に例を示します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または、xref:credentials-provider.adoc[クレデンシャルプロバイダー] から取得したシークレットを使用:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または xref:credentials-provider.adoc[CredentialsProvider] から取得した秘密鍵で、署名アルゴリズムは `HS256`:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "PEM キーファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256` です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr "キーストアファイルを使用した `private_key_jwt` 、署名アルゴリズムは `RS256`:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Additional JWT authentication options"
msgstr "JWT認証の追加オプション"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr "`client_secret_jwt` と `private_key_jwt` のいずれかの認証方法を使用する場合、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、発行者などをカスタマイズすることが可能です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、シークレットは `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティーを使用します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr "`quarkus-oidc-client` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Mutual TLS"
msgstr "相互 TLS"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr "一部の OpenID Connect プロバイダーでは、相互 TLS (`mTLS`) 認証プロセスの一部としてクライアントを認証する必要がある場合があります。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr "`mTLS` をサポートする為に `quarkus-oidc-client` は以下のように設定出来ます :"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Testing"
msgstr "テスト"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Wiremock"
msgstr "Wiremock"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "以下のように、Wiremock ベースの `QuarkusTestResourceLifecycleManager` を記述します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "REST テストエンドポイントを用意します。注入された MP REST クライアントを登録された OidcClient フィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkus リポジトリーの `integration-tests/oidc-client-wiremock` を参照してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンが更新されたことが確認できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Keycloak"
msgstr "Keycloak"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr "Keycloak を使用する場合は、xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-keycloak[OpenID Connect ベアラートークンインテグレーションのテスト] の Keycloak セクションで説明されているのと同じアプローチを使用できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "トークン取得および更新エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientImpl` の `TRACE` レベルのロギングを有効にしてください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient の初期化エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientRecorder` の `TRACE` レベルのログを有効にしてください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "OIDC request filters"
msgstr "OIDCリクエストフィルター"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers. For example, a filter can analyze the request body and add its digest as a new header value:"
msgstr "1 つ以上の `OidcRequestFilter` 実装を登録することで、Quarkus が OIDC プロバイダーに対して行った OIDC リクエストをフィルタリングできます。これにより、新しいリクエストヘッダーを更新または追加できます。たとえば、フィルターはリクエスト本文を分析し、そのダイジェストを新しいヘッダー値として追加できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Token Propagation Reactive"
msgstr "Token Propagation Reactive"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides a RestEasy Reactive Client, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、認証情報の伝搬を簡略化するRESTEasy Reactiveクライアント `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。このクライアントは、現在アクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラートークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダの `Bearer` スキーム値として伝播します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr "さらに、 `AccessTokenRequestReactiveFilter` 、トークンを伝播する前に交換する必要がある複雑なアプリケーションをサポートすることができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] または link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする別の OIDC プロバイダーを使用する場合は、次のように `AccessTokenRequestReactiveFilter` を設定してトークンを交換できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Please note that the `exchange-token` configuration property is ignored when the OidcClient name is set with the `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` annotation attribute."
msgstr "OidcClient 名が `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` アノテーション属性で設定されている場合、 `exchange-token` 設定プロパティーは無視されることに注意してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestReactiveFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、 `quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr "`Azure` のように、link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] を使用して現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要がある] プロバイダーを使用する場合、 `AccessTokenRequestReactiveFilter` をトークンを交換するように設定できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation-reactive.client-name` configuration property or with the `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` annotation attribute."
msgstr "`AccessTokenRequestReactiveFilter` は、デフォルトの `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-token-propagation-reactive.client-name` 設定プロパティーまたは `io.quarkus.oidc.token.propagation.AccessToken#exchangeTokenClient` アノテーション属性を使用して選択できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Token Propagation"
msgstr "トークンの伝播"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝播を単純化する2つの Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` クラス実装を提供します。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-oidc-bearer-token-authentication.adoc[ベアラー認証トークン] 、または xref:security-oidc-code-flow-authentication.adoc[認可コードフローメカニズムから] 取得したトークンを、HTTP `Authorization` ヘッダーの `Bearer` スキーム値として伝播します。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、加えて JWT トークンのサポートを提供します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "現在の認可コードフローアクセストークンを伝播する必要がある場合、即時トークン伝播が適切に機能します。これは、 (ID トークンではなく) コードフローアクセストークンが、現在認証されているユーザーに代わってリモートサービスにアクセスするために現在の Quarkus エンドポイントに伝播されるように想定されているためです。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr "ただし、エンドツーエンドのベアラートークンの直接的な伝播は避ける必要があります。たとえば、 `Client -> Service A -> Service B` の場合、 `Service B` は `Client` から `Service A` に送信されたトークンを受信します。このような場合、 `Service B` はトークンが `Service A` から送信されたのか、直接 `Client` から送信されたのかを区別できません。 `Service B` で、トークンの送信元が `Service A` であることを確認するには、新しい発行者とオーディエンスのクレームをアサートできる必要があります。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝搬する前に交換または更新する必要がある場合があります。たとえば、 `Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なる場合があります。この例では、 `Service B` にアクセスするために `Service A` に付与されるスコープは、範囲が狭いか、完全に異なる場合があります。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "以下のセクションでは、 `AccessTokenRequestFilter` と `JsonWebTokenRequestFilter` がどのように役立つかを説明します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または Jakarta REST クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Exchange token before propagation"
msgstr "伝播前にトークンを交換する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestFilter` like this:"
msgstr "現在のアクセストークンを伝播する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] やその他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする OpenID Connect Provider で作業する場合は、 `AccessTokenRequestFilter` をこのように設定することが可能です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr "`Azure` のように、 link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWTベアラートークングラント] を使用して現在のトークンを交換する link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[必要がある] プロバイダーを使用する場合、 `AccessTokenRequestFilter` のようにトークンを交換するように設定することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換することに注意してください。また、 `quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`JsonWebTokenRequestFilter` の使用は、Bearer JWT トークンを扱う場合に推奨します。これらのトークンは `issuer` や `audience` などのクレームを変更でき、更新したトークンを再度セキュア (例: 再署名) に保つことができます。これは注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは動作しません。また、OpenID Connect プロバイダーが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することを推奨します。JWT と不透明な bearer トークンの両方を `AccessTokenRequestFilter` で安全に交換できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key; it should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` により、 `Service A` の実装は注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` のクレーム値で更新し、更新したトークンのセキュリティーは、新しい署名で簡単に確保できます。唯一困難な手順としては、 `Service A` に署名鍵があるかの確認が挙げられます。署名鍵は、安全なファイルシステムか、Vault のようなリモートのセキュアなストレージからプロビジョニングする必要があります。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "あるいは、 `quarkus.oidc-token-propagation.register-filter` と `quarkus.oidc-token-propagation.json-web-token` の両方のプロパティを `true` に設定すると、すべての MicroProfile REST または Jakarta REST クライアントで `JsonWebTokenRequestFilter` が自動的に登録されます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "Update token before propagation"
msgstr "伝播前にトークンを更新する"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (issuer) や `aud` (audience) のクレームを更新して、新しい署名で保護する必要がある場合は、次のように `JsonWebTokenRequestFilter` を設定できます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "As mentioned, use `AccessTokenRequestFilter` if you work with Keycloak or an OpenID Connect Provider that supports a Token Exchange protocol."
msgstr "前述のように、Keycloak またはトークン交換プロトコルをサポートする OpenID Connect プロバイダーを使用する場合は、 `AccessTokenRequestFilter` を使用します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"You can generate the tokens as described in xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered token propagation filter, call the downstream endpoint. For example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "トークンは、 xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing[OpenID Connect ベアラ・トークンの統合テスト] セクションの説明に従って生成できます。REST テストエンドポイントを準備します。注入された MP REST クライアントを使用するテストフロントエンドエンドポイントに、登録済みのトークン伝搬フィルタを使用して、ダウンストリームエンドポイントを呼び出させることができます。たとえば、 `main` Quarkus リポジトリの `integration-tests/oidc-token-propagation` を参照してください。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、 `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning of the tokens before the propagation.\n"
"However, these features might be added in the future."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンション(非反応型 `quarkus-oidc-token-propagation` エクステンションとは対照的)は、現在のところ、伝播前のトークンの交換や辞任をサポートしていません。しかし、将来的にはこれらの機能が追加されるかもしれません。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "GraphQL client integration"
msgstr "GraphQL クライアントインテグレーション"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr ""
"`quarkus-oidc-client-graphql` エクステンションは、REST クライアントで使用されるアプローチと並行して、OIDC クライアントを xref:smallrye-graphql-client.adoc[GraphQL クライアント] に統合する方法を提供します。\n"
"このエクステンションがアクティブな場合、プロパティーを通じて設定された GraphQL クライアント (ビルダーによってプログラム的にではなく) は OIDC クライアントを使用してアクセストークンを取得して `Authorization` ヘッダー値として設定します。\n"
"この OIDC クライアントは期限切れのアクセストークンも更新します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr "以下のように、GraphQL クライアントが使用する OIDC クライアントを設定するには、 `quarkus.oidc-client-graphql.client-name` プロパティーが指定された設定済みの OIDC クライアントの 1 つを選択します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# OIDC クライアント自体の宣言例\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr ""
"`quarkus.oidc-client-graphql.client-name`プロパティーを指定しない場合は、\n"
"GraphQL クライアントは、デフォルトの OIDC クライアント (明示的な名前なし) を使用します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr ""
"以下のように、特に型安全な GraphQL クライアントの場合、\n"
"`GraphQLClientApi` インターフェイスに  `@io.quarkus.oidc.client.filter.OidcClientFilter` のアノテーションを付けることで、これをクライアントごとにオーバーライドできます。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr ""
"これをプログラムで作成された GraphQL クライアントで使用できるようにするために、\n"
"両方のビルダー (`VertxDynamicGraphQLClientBuilder` と\n"
"`VertxTypesafeGraphQLClientBuilder`) は `dynamicHeader(String,\n"
"Uni<String>`) メソッドを含んでおり、変更される可能性のあるヘッダーをプラグインできます。\n"
" OIDC クライアントを接続するには、以下を使用します。"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "References"
msgstr "参照"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr "xref:security-openid-connect-client.adoc[OpenID Connect クライアントとトークンの伝搬クイックスタート]"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護するOIDCコードフローメカニズム]"

#: _versions/3.8/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

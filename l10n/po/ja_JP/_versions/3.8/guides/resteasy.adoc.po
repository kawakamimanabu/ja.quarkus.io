msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.8/guides/resteasy.adoc
msgid "RESTEasy Classic"
msgstr "RESTEasy Classic"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "This guide is about https://resteasy.dev[RESTEasy Classic], which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr "このガイドでは、Quarkus 2.8までデフォルトのjakarta REST（以前はJAX-RSとして知られていました）実装であった link:https://resteasy.dev[RESTEasy Classicについて] 説明します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "It is now recommended to use RESTEasy Reactive, which supports both traditional blocking workloads and reactive workloads equally well."
msgstr "従来のブロッキングワークロードとリアクティブワークロードの両方を同等にサポートするRESTEasy Reactiveの使用が推奨されるようになりました。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"For more information about RESTEasy Reactive,\n"
"please see the xref:rest-json.adoc[introductory REST JSON guide] or the xref:resteasy-reactive.adoc[RESTEasy Reactive reference documentation]."
msgstr "RESTEasy Reactiveの詳細については、 xref:rest-json.adoc[REST JSON入門ガイド] または xref:resteasy-reactive.adoc[RESTEasy Reactiveリファレンスドキュメント] を参照してください。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "There is another guide if you need a xref:resteasy-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr "xref:resteasy-client.adoc[RESTEasy ClassicベースのRESTクライアント] （JSONのサポートを含む）が必要な場合は、別のガイドがあります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "The application created in this guide is straightforward: users can add elements to a list through a form, and the list gets updated accordingly."
msgstr "このガイドで作成したアプリケーションは簡単です: ユーザーはフォームを通してリストに要素を追加でき、リストはそれに応じて更新されます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべてJSON形式になっています。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.8/guides/resteasy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular, adds the following dependency:"
msgstr "このコマンドは、RESTEasy/Jakarta REST および link:https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートする新しいプロジェクトを生成し、特に以下の依存関係を追加します："

#: _versions/3.8/guides/resteasy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.8/guides/resteasy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules], so you do not need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkusは3つのJackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8モジュール] を登録します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], so if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr "Quarkusは link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているため、JacksonよりもJSON-Bを好む場合は、代わりにRESTEasy JSON-Bエクステンションに依存するプロジェクトを作成できます："

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular, adds the following dependency:"
msgstr "このコマンドは、RESTEasy/Jakarta REST および link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] エクステンションをインポートする新しいプロジェクトを生成し、特に以下の依存関係を追加します："

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Creating the first JSON REST service"
msgstr "最初のJSON RESTサービスの作成"

#: _versions/3.8/guides/resteasy.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、フルーツのリストを管理するアプリケーションを作成します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "First, let us create the `Fruit` bean as follows:"
msgstr "まず、 `Fruit` Beanを以下のように作成します："

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Nothing fancy.\n"
"One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことはJSONシリアライズレイヤーがデフォルトコンストラクターを必要とすることだけです。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "ここで、 `org.acme.rest.json.FruitResource` クラスを以下のように編集します:"

#: _versions/3.8/guides/resteasy.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr "実装は非常に簡単で、Jakarta RESTアノテーションを使用してエンドポイントを定義するだけです。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"When a JSON extension like `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb` is installed, Quarkus defaults to the `application/json` media type for most return values.\n"
"This can be overridden using `@Produces` or `@Consumes` annotations, except for certain well-known types like `String` (defaulting to `text/plain`) and `File` (defaulting to `application/octet-stream`)."
msgstr "`quarkus-resteasy-jackson` や `quarkus-resteasy-jsonb` のようなJSONエクステンションがインストールされている場合、Quarkusのデフォルトは、ほとんどの返り値に対して `application/json` メディアタイプになります。これは、 `String` （デフォルトは `text/plain` ）や `File` （デフォルトは `application/octet-stream` ）のような特定のよく知られた型を除き、 `@Produces` や `@Consumes` のアノテーションを使用して上書きすることができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"To disable the default JSON behavior, set `quarkus.resteasy-json.default-json=false`, and the default will return to auto-negotiation.\n"
"In this case, you must include `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` annotations in your endpoints to use JSON."
msgstr "デフォルトの JSON 動作を無効にするには、 `quarkus.resteasy-json.default-json=false` を設定します。デフォルトは自動ネゴシエーションに戻ります。この場合、JSON を使用するには `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` のアノテーションをエンドポイントに含める必要があります。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"If you don't depend on the JSON default, it's highly advisable to use `@Produces` and `@Consumes` annotations on your endpoints to specify the expected content types precisely.\n"
"This helps reduce the number of Jakarta REST providers (essentially converters) included in the native executable."
msgstr "JSON デフォルトに依存しない場合は、 `@Produces` と `@Consumes` のアノテーションをエンドポイントで使用して、期待されるコンテンツ・タイプを正確に指定することを強くお勧めします。これは、ネイティブ実行可能ファイルに含まれる Jakarta REST プロバイダ（本質的にはコンバータ）の数を減らすのに役立ちます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Configuring JSON support"
msgstr "JSONサポートの設定"

#: _versions/3.8/guides/resteasy.adoc
msgid "Jackson"
msgstr "Jackson"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (utilized by Quarkus extensions) is set to ignore unknown properties (by disabling `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES`)."
msgstr "Quarkusでは、（Quarkusエクステンションによって利用される）CDIを介して取得されるデフォルトのJackson `ObjectMapper` は、（ `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` を無効にすることによって）未知のプロパティを無視するように設定されています。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "To revert to Jackson's default behavior, set `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`, or set it on a per-class basis with `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "ジャクソンのデフォルト動作に戻すには、 `application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 `@JsonIgnoreProperties(ignoreUnknown = false)` でクラスごとに設定してください。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Additionally, the `ObjectMapper` formats dates and times in ISO-8601 (by disabling `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS`)."
msgstr "さらに、 `ObjectMapper` は日付と時刻を ISO-8601 でフォーマットします（ `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` を無効にしてください）。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"To restore Jackson's default behavior, use `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`.\n"
"For custom date format on a single field, use the `@JsonFormat` annotation."
msgstr "Jackson のデフォルトの動作を復元するには、 `application.properties` で `quarkus.jackson.write-dates-as-timestamps=true` を使用します。単一のフィールドにカスタム日付書式を設定するには、 `@JsonFormat` アノテーションを使用します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Quarkus simplifies Jackson configuration via CDI beans. Create a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` to apply various Jackson settings. Here's an example for registering a custom module:"
msgstr "Quarkusでは、CDI Beanを使用してJacksonの設定を簡素化できます。 `io.quarkus.jackson.ObjectMapperCustomizer` 、CDI Beanを作成して、さまざまなJackson設定を適用します。カスタムモジュールを登録する例を示します："

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "This approach is recommended for configuring Jackson settings."
msgstr "この方法は、ジャクソン設定を構成する場合に推奨されます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson-specific customizations provided by various extensions from being applied."
msgstr "ユーザがそう選択するならば、独自の `ObjectMapper` Beanを提供することもできます。これを行う場合、 `ObjectMapper` を生成する CDI プロデューサですべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入し、適用することが非常に重要です。これを行わないと、さまざまなエクステンションによって提供されるジャクソン固有のカスタマイズが適用されなくなります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "JSON-B"
msgstr "JSON-B"

#: _versions/3.8/guides/resteasy.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、Quarkusでは、 `quarkus-resteasy-jsonb` エクステンションを使用することで、Jacksonの代わりにJSON-Bを使用するオプションを提供しています。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Following the same approach described in the previous section, JSON-B can be configured using an `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前のセクションで説明したのと同じアプローチに従って、 `io.quarkus.jsonb.JsonbConfigCustomizer` Beanを使用してJSON-Bを構成することができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "If, for example, a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `com.example.Foo` 型用の `FooSerializer` というカスタムシリアライザを JSON-B に登録する必要がある場合、以下のような Bean を追加すれば十分です："

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or, in the extreme case, to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションは、 `jakarta.json.bind.JsonbConfig` の Bean を ( `Dependent` スコープで) 直接提供するか、極端な場合、 `jakarta.json.bind.Jsonb` 型の Bean を ( `Singleton` スコープで) 提供することでしょう。後者の方法を利用する場合， `jakarta.json.bind.Jsonb` を生成するCDIプロデューサで，すべての `io.quarkus.jsonb.JsonbConfigCustomizer` Beanを手動で注入し適用することが非常に重要です。これを怠ると、さまざまなエクステンションが提供するJSON-B固有のカスタマイズが適用されなくなります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "JSON Hypertext Application Language (HAL) support"
msgstr "JSON ハイパーテキストアプリケーション言語 (HAL) のサポート"

#: _versions/3.8/guides/resteasy.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] 標準は、Web リンクを表す単純な形式です。"

#: _versions/3.8/guides/resteasy.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr "HAL のサポートを有効にするには、 `quarkus-hal` エクステンションをプロジェクトに追加します。また、 HAL は JSON サポートを必要とするため、 `quarkus-resteasy-jsonb` または `quarkus-resteasy-jackson` のいずれかのエクステンションモジュールを追加する必要があります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Table Context object"
msgstr "Table Contect オブジェクト"

#: _versions/3.8/guides/resteasy.adoc
msgid "GAV"
msgstr "GAV"

#: _versions/3.8/guides/resteasy.adoc
msgid "Usage"
msgstr "使用方法"

#: _versions/3.8/guides/resteasy.adoc
msgid "`io.quarkus:quarkus-hal`"
msgstr "`io.quarkus:quarkus-hal`"

#: _versions/3.8/guides/resteasy.adoc
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"

#: _versions/3.8/guides/resteasy.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr "エクステンションを追加した後、REST リソースにアノテーションを付けて、メディアタイプ `application/hal+json` を生成できます (または RestMediaType.APPLICATION_HAL_JSON を使用します)。例えば:"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type, both `json` and `hal+json`, to print the records in Hal format."
msgstr "これで、エンドポイント `/records` と `/records/first` は、 `json` と `hal+json` の両方のメディアタイプを受け入れ、Hal フォーマットでレコードを印刷します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr "たとえば、curl を使用して `/records` エンドポイントを呼び出してレコードのリストを返す場合、HAL 形式は次のようになります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr "When we call a resource `/records/first` that returns only one instance, then the output is:"

#: _versions/3.8/guides/resteasy.adoc
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Now let us add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr "それでは、 `FruitResource` と対話するための簡単なWebページを追加してみましょう。Quarkusは、 `META-INF/resources` ディレクトリの下にある静的リソースを自動的に提供します。 `src/main/resources/META-INF/resources` ディレクトリに、この link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルのコンテンツを含む `fruits.html` ファイルを追加します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました:"

#: _versions/3.8/guides/resteasy.adoc
msgid "start Quarkus with:"
msgstr "Quarkusを次のように起動します:"

#: _versions/3.8/guides/resteasy.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.8/guides/resteasy.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.8/guides/resteasy.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.8/guides/resteasy.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr "ブラウザで `http://localhost:8080/fruits.html` を開きます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します"

#: _versions/3.8/guides/resteasy.adoc
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルのビルド"

#: _versions/3.8/guides/resteasy.adoc
msgid "You can build a native executable with the usual command:"
msgstr "通常のコマンドでネイティブ実行可能ファイルをビルドすることができます:"

#: _versions/3.8/guides/resteasy.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#: _versions/3.8/guides/resteasy.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開き、アプリケーションを使用します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "About serialization"
msgstr "シリアライゼーションについて"

#: _versions/3.8/guides/resteasy.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we have not registered any class, not even `Fruit`, for reflection usage, and everything is working fine."
msgstr "GraalVMでネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。朗報は、Quarkusがほとんどの場合その作業を代行してくれることです。今のところ、リフレクションを使用するために、 `Fruit` 。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time, and that is why we did not need any reflection registration in the first part of this guide."
msgstr "Quarkusは、ビルド時にRESTメソッドを分析することで、自動的にこれを行います。このため、このガイドの最初の部分では、リフレクションの登録を必要としませんでした。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Another common pattern in the Jakarta REST world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "Jakarta RESTの世界でよく見られるもう一つのパターンは、 `Response` オブジェクトを使うことです。 `Response` には、いくつかの良い特典があります:"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "You can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance)."
msgstr "メソッド内で何が起こるかによって、異なるエンティティ・タイプを返すことができます（たとえば、 `Legume` や `Error` など）。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "You can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "`Response` の属性を設定できます（エラーの場合はステータスが頭に浮かびます）。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります:"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Quarkus cannot determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to register for reflection in the required classes automatically."
msgstr "Quarkusはビルド時に、 `Response` に含まれる型を判断することができません。この場合、Quarkusは自動的に必要なクラスにリフレクションを登録することができません。"

#: _versions/3.8/guides/resteasy.adoc
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Using response"
msgstr "レスポンス"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Let us create the `Legume` class, which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成しましょう："

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Now let's create a `LegumeResource` REST service with only one method that returns the list of legumes."
msgstr "では、 `LegumeResource` REST サービスを作成してみましょう。メソッドはひとつだけで、マメ科植物の一覧を返します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Now, let us add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "それでは、マメ科植物のリストを表示する簡単なウェブページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリに、{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "ブラウザを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "create the native executable with:"
msgstr "ネイティブ実行可能ファイルを次のように作成します:"

#: _versions/3.8/guides/resteasy.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します"

#: _versions/3.8/guides/resteasy.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "ブラウザで http://localhost:8080/legumes.html を開きます"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "There are no legumes there."
msgstr "そこには豆類はありません。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"As mentioned above, the issue is that Quarkus could not determine the `Legume` class, which will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr "上述したように、Quarkusが `Legume` クラスを特定できなかったことが問題です。RESTエンドポイントを分析することによって、何らかのリフレクションが必要になります。JSONシリアライゼーションライブラリは、 `Legume` のフィールドのリストを取得しようとしますが、空のリストを取得するため、フィールドのデータはシリアライズされません。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will return an empty list of fields."
msgstr "現時点では、JSON-BまたはJacksonがクラスのフィールドのリストを取得しようとしても、クラスがリフレクション用に登録されていない場合、例外はスローされません。GraalVMは空のフィールドリストを返します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#: _versions/3.8/guides/resteasy.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます:"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Let us do that and follow the same steps as before:"
msgstr "それでは、先ほどと同じ手順でやってみましょう："

#: _versions/3.8/guides/resteasy.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#: _versions/3.8/guides/resteasy.adoc
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Being reactive"
msgstr "Reactiveになる"

#: _versions/3.8/guides/resteasy.adoc
msgid "For reactive workloads, please always use xref:resteasy-reactive.adoc[RESTEasy Reactive]."
msgstr "リアクティブなワークロードには、常に xref:resteasy-reactive.adoc[RESTEasy Reactive] を使用してください。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#: _versions/3.8/guides/resteasy.adoc
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr "Mutiny と RESTEasy を統合するには、 `quarkus-resteasy-mutiny` 依存関係をプロジェクトに追加する必要があります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#: _versions/3.8/guides/resteasy.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyについての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] に記載されています。"

#: _versions/3.8/guides/resteasy.adoc
msgid "HTTP filters and interceptors"
msgstr "HTTP フィルターとインターセプター"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively.\n"
"These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata.\n"
"They also can abort the request processing, for instance, when the user does not have permission to access the endpoint."
msgstr "HTTP リクエストもレスポンスも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで傍受することができます。これらのフィルタはメッセージに関連付けられたメタデータを処理するのに適しています：HTTP ヘッダ、クエリパラメータ、メディアタイプ、その他のメタデータです。また、ユーザがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止することもできます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#: _versions/3.8/guides/resteasy.adoc
msgid "CORS filter"
msgstr "CORS フィルター"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Quarkus includes a CORS filter at the HTTP layer level.\n"
"For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""
"Quarkus には、HTTP レイヤーレベルの CORS フィルターが含まれています。\n"
"CORS フィルターとその使用方法の詳細は、Quarkus のクロスオリジンリソース共有ガイドの xref:security-cors.adoc#cors-filter[CORS フィルター] セクションを参照してください。"

#: _versions/3.8/guides/resteasy.adoc
msgid "GZip Support"
msgstr "GZipのサポート"

#: _versions/3.8/guides/resteasy.adoc
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr "Quarkus では、デフォルトでは有効になっていませんが GZip をサポートしています。以下のプロパティーを使用して、GZipのサポートを設定することができます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Enable Gzip support."
msgstr "Gzipサポートを有効にします。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"Configure the upper limit on the deflated request body.\n"
"This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.\n"
"This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`.\n"
"If no suffix is given, assume bytes."
msgstr "デフレートされたリクエストボディの上限を設定します。これは、潜在的な攻撃を制限することで軽減するのに有用です。デフォルト値は `10M` です。この設定オプションはこの形式の文字列を認識します (正規表現として表示されます)： `[0-9]+[KkMmGgTtPpEeZzYy]?` .接尾辞が指定されていない場合は、byte とみなします。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Once GZip support has been enabled, you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr "GZip のサポートが有効になったら、 `@org.jboss.resteasy.annotations.GZIP` アノテーションをエンドポイントメソッドに追加することで、エンドポイントで使用することができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"There is also the `quarkus.http.enable-compression` configuration property, which enables HTTP response compression globally.\n"
"If enabled, a response body is compressed if the `Content-Type` HTTP header is set and the value is a compressed media type configured via the `quarkus.http.compress-media-types` configuration property."
msgstr "また、HTTP 応答圧縮をグローバルに有効にする `quarkus.http.enable-compression` 設定プロパティもあります。有効にすると、 `Content-Type` HTTP ヘッダが設定され、その値が `quarkus.http.compress-media-types` 設定プロパティで設定された圧縮メディアタイプである場合に、レスポンスボディが圧縮されます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Multipart Support"
msgstr "マルチパートのサポート"

#: _versions/3.8/guides/resteasy.adoc
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr "RESTEasy は https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider] を介してマルチパートをサポートしています。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr "Quarkusは 、 `quarkus-resteasy-multipart` というエクステンションを提供しています。"

#: _versions/3.8/guides/resteasy.adoc
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr "このエクステンションは RESTEasy のデフォルトの動作とは若干異なり、リクエストで何も指定されていない場合のデフォルトの文字セットは US-ASCII ではなく UTF-8 となります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "You can configure this behavior with the following configuration properties:"
msgstr "この動作は、以下のプロパティーで設定できます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される構成プロパティ - 他のすべての構成プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.8/guides/resteasy.adoc
msgid "Servlet compatibility"
msgstr "サーブレットとの互換性"

#: _versions/3.8/guides/resteasy.adoc
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr "Quarkus では、 RESTEasy は Vert.x HTTP サーバーの上で直接実行するか、サーブレットに依存している場合は Undertow の上で実行することができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always available for injection.\n"
"Most use cases for this particular class are covered by Jakarta REST equivalents, except for getting the remote client's IP."
msgstr "その結果、 `HttpServletRequest` のような特定のクラスは、常にインジェクションで使用できるわけではありません。この特定のクラスのほとんどのユースケースは、リモートクライアントのIPを取得することを除いて、jakarta REST同等物でカバーされています。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"RESTEasy comes with a replacement API that you can inject:\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`]\n"
"and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`]\n"
"to solve this problem."
msgstr "RESTEasyには、注入可能な代替APIが付属しています： link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[HttpRequest] メソッド link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[getRemoteAddress()] と link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[getRemoteHost()] メソッドがあります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "RESTEasy and REST Client interactions"
msgstr "RESTEasy と RESTクライアントのやりとり"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"In Quarkus, the RESTEasy extension and xref:resteasy-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr "Quarkusでは、RESTEasyエクステンションと xref:resteasy-client.adoc[REST Clientエクステンション]は 同じインフラストラクチャを共有しています。この考慮の重要な結果の1つは、（jakarta RESTの意味での）プロバイダのリストを共有することです。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will, by default, intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーのコールとクライアントのコールの両方をインターセプトすることになります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "What's Different from Jakarta EE Development"
msgstr "Jakarta EE 開発との違い"

#: _versions/3.8/guides/resteasy.adoc
msgid "No Need for `Application` Class"
msgstr "`Application` クラスは不要"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Configuration via an application-supplied subclass of `Application` is supported but not required."
msgstr "アプリケーションが提供する `Application` のサブクラスを介した構成はサポートされていますが、必須ではありません。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Only a single Jakarta REST application"
msgstr "単一のJakarta RESTアプリケーション限定"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"In contrast to Jakarta REST (and RESTeasy) running in a standard servlet container, Quarkus only supports the deployment of a single Jakarta REST application.\n"
"If multiple Jakarta REST `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr "標準のサーブレットコンテナで実行されるJakarta REST（およびRESTeasy）とは対照的に、Quarkusは単一のJakarta RESTアプリケーションのデプロイのみをサポートしています。Jakarta REST `Application` クラスが複数定義されている場合、ビルドは `Multiple classes have been annotated with @ApplicationPath which is currently not supported` というメッセージとともに失敗します。"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"If multiple Jakarta REST applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes.\n"
"This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr "複数の Jakarta REST アプリケーションが定義されている場合、プロパティ `quarkus.resteasy.ignore-application-classes=true` を使用すると、すべての明示的な `Application` クラスを無視することができます。これにより、すべてのリソース・クラスは、 `quarkus.resteasy.path` （デフォルト： `/` ）で定義されるapplication-pathを介して利用可能になります。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Support limitations of Jakarta REST application"
msgstr "Jakarta RESTアプリケーションのサポートの制限"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"The RESTEasy extension doesn't support the method `getProperties()` of the class `jakarta.ws.rs.core.Application`.\n"
"Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider, and feature classes.\n"
"It does not filter out the built-in resource, provider, and feature classes and also the resource, provider, and feature classes registered by the other extensions.\n"
"Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is managed the same way as `getClasses()`."
msgstr "RESTEasy エクステンションは、クラス `jakarta.ws.rs.core.Application` のメソッド `getProperties()` をサポートしていません。さらに、アノテーションの付いたリソース・クラス、プロバイダ・クラス、および機能クラスをフィルタリングするために、 `getClasses()` と `getSingletons()` のメソッドにのみ依存しています。他のエクステンションによって登録されたリソース、プロバイダ、および機能クラスは除外されません。最後に、メソッド `getSingletons()` によって返されるオブジェクトは無視され、クラスのみがリソースクラス、プロバイダクラス、フィーチャクラスをフィルタリングするために考慮されます。言い換えれば、メソッド `getSingletons()` は `getClasses()` と同じように管理されます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Lifecycle of Resources"
msgstr "リソースのライフサイクル"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"In Quarkus, all Jakarta REST resources are treated as CDI beans.\n"
"It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr "Quarkusでは、すべてのjakarta RESTリソースはCDI Beanとして扱われます。 `@Inject` を使用して他の Bean を注入したり、 `@Transactional` などのバインディングを使用してインターセプターをバインドしたり、 `@PostConstruct` コールバックを定義したりすることができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid ""
"If no scope annotation is declared on the resource class, then the scope is defaulted.\n"
"The `quarkus.resteasy.singleton-resources` property can control the default scope."
msgstr "リソースクラスでスコープアノテーションが宣言されていない場合、スコープはデフォルトになります。 `quarkus.resteasy.singleton-resources` プロパティでデフォルトのスコープを制御することができます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "If set to `true` (default), then a *single instance* of a resource class is created to service all requests (as defined by `@jakarta.inject.Singleton`)."
msgstr "`true` (デフォルト) に設定すると、リソースクラスの *単一のインスタンスが* 作成され、 すべてのリクエストに対応します ( `@jakarta.inject.Singleton` で定義されています)。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "If set to `false`, then a *new instance* of the resource class is created per each request."
msgstr "`false` に設定されている場合、リクエストごとにリソースクラスの *新しいインスタンスが* 作成されます。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr "明示的なCDIスコープアノテーション（ `@RequestScoped` 、 `@ApplicationScoped` など）は、常にデフォルトの動作を上書きし、リソースインスタンスのライフサイクルを指定します。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Include/Exclude Jakarta REST classes with build time conditions"
msgstr "ビルド時条件でのJakarta RESTのクラスのインクルード/エクスクルード"

#: _versions/3.8/guides/resteasy.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr "Quarkusでは、CDI Beanと同様に、ビルド時の条件によって、Jakarta RESTリソース、プロバイダ、フィーチャーを直接取り込んだり除外したりすることができます。したがって、さまざまなJakarta RESTクラスにプロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）やプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）をアノテーションして、ビルド時にQuarkusに対して、どのような条件の下でJakarta RESTクラスを含めるべきかを示すことができます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr "次の例では、 Quarkus は、ビルドプロファイル `app1` が有効になっている場合に限り、エンドポイント `sayHello` を含めます。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr "Jakarta REST Applicationが検出され、メソッド `getClasses()` 、 `getSingletons()` がオーバーライドされている場合、Quarkusはビルド時の条件を無視し、Jakarta REST Applicationで定義されているもののみを考慮することに注意してください。"

#: _versions/3.8/guides/resteasy.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well-known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のある有名なテクノロジーに依存しているため簡単です。"

#: _versions/3.8/guides/resteasy.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#: _versions/3.8/guides/resteasy.adoc
#, fuzzy
msgid "There is only one thing to remember: if you use `Response` and Quarkus cannot determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "`Response` を使用し、Quarkus がシリアライズされた Bean を判断できない場合、 `@RegisterForReflection` でアノテーションする必要があります。"

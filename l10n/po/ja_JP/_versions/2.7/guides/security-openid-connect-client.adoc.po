msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Using OpenID Connect (OIDC) and OAuth2 Client and Filters to manage access tokens"
msgstr "OpenID Connect (OIDC)、OAuth2 クライアントおよびフィルターを使用したアクセストークンの管理"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "This guide explains how to use:"
msgstr "このガイドでは以下の使い方を解説しています。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client`, `quarkus-oidc-client-reactive-filter` and `quarkus-oidc-client-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as https://www.keycloak.org[Keycloak]"
msgstr "`quarkus-oidc-client`、 `quarkus-oidc-client-reactive-filter`、および `quarkus-oidc-client-filter` エクステンションを使用して、OpenId Connect および https://www.keycloak.org[Keycloak] などの OAuth 2.0 準拠の認可サーバーからアクセストークンを取得し、更新する方法"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-token-propagation` and `quarkus-oidc-token-propagation-reactive` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens"
msgstr "`quarkus-oidc-token-propagation`および`quarkus-oidc-token-propagation-reactive` エクステンションを使用して、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播する方法"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr "これらのエクステンションで管理されているアクセストークンをHTTP Authorization Bearerトークンとして使用して、リモートサービスにアクセスすることができます。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "OidcClient"
msgstr "OidcClient"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient` which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr "`quarkus-oidc-client` エクステンションは、SmallRye Mutiny `Uni` および `Vert.xWebClient` を使用してトークンを取得および更新するために使用できるリアクティブな `io.quarkus.oidc.client.OidcClient` を提供します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClient` is initialized at the build time with the IDP token endpoint URL which can be auto-discovered or manually configured and uses this endpoint to acquire access tokens using the token grants such as `client_credentials` or `password` and refresh the tokens using a `refresh_token` grant."
msgstr "`OidcClient` は自動検出または手動で構成することができる IDP トークンのエンドポイント URL でビルド時に初期化され、このエンドポイントを使用して `client_credentials` または `password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Token Endpoint Configuration"
msgstr "トークンエンドポイントの設定"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "By default the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr "デフォルトでは、設定された `quarkus.oidc-client.auth-server-url` に `/.well-known/openid-configuration` のパスを追加することで、トークンのエンドポイントアドレスが検出されます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "For example, given this Keycloak URL:"
msgstr "たとえば、次の KeycloakURL を指定した場合:"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr "OidcClient` は、トークンのエンドポイント URL が `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens` であることを検出します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Alternatively, if the discovery endpoint is not available or you would like to save on the discovery endpoint roundtrip, you can disable the discovery and configure the token endpoint address with a relative path value, for example:"
msgstr "また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを節約したい場合は、ディスカバリーを無効にして、トークンエンドポイントのアドレスを相対パスの値で設定することができます。例:"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr "検出せずにトークンエンドポイント URL を設定するよりコンパクトな方法は、 `quarkus.oidc-client.token-path` を絶対 URL に設定することです。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Setting 'quarkus.oidc-client.auth-server-url' and 'quarkus.oidc-client.discovery-enabled' is not required in this case."
msgstr "この場合、'quarkus.oidc-client.auth-server-url' および 'quarkus.oidc-client.discovery-enabled' の設定は必要ありません。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Supported Token Grants"
msgstr "サポートされるトークングラント"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The main token grants which `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr "`OidcClient` がトークンを取得するために使用できる主なトークングラントは、 `client_credentials` (デフォルト) と `password` グラントです。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Client Credentials Grant"
msgstr "クライアントクレデンシャル・グラント"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The `client_credentials` grant allows to set extra parameters to the token request via `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient via the `audience` parameter:"
msgstr "`client_credentials` グラントにより、 `quarkus.oidc-client.grant-options.client.<param-name>=<value>` を介してトークンリクエストに追加のパラメータを設定できます。 `audience` パラメータを使用して目的のトークン受信者を設定する方法は次のとおりです。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Password Grant"
msgstr "パスワード・グラント"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "It can be further customized using a `quarkus.oidc-client.grant-options.password` configuration prefix, similarly to how the client credentials grant can be customized."
msgstr "これは、クライアント認証情報のグラントをカスタマイズする方法と同様に、 `quarkus.oidc-client.grant-options.password` 設定接頭辞を使用してさらにカスタマイズできます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Other Grants"
msgstr "その他の助成金"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClient` can also help with acquiring the tokens using the grants which require some extra input parameters which can not be captured in the configuration. These grants are `refresh token` (with the external refresh token), `token exchange` and `authorization code`."
msgstr "`OidcClient` は、設定でキャプチャーできない追加の入力パラメーターを必要とするグラントを使用して、トークンを取得する際にも役立ちます。これらのグラントは、 `refresh token` (外部更新トークンを使用)、 `token exchange`、および `authorization code` です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Using the `refresh_token` grant which uses an out of band refresh token to acquire a new set of tokens will be required if the existing refresh token has been posted to the current Quarkus endpoint for it to acquire the access token. In this case `OidcClient` needs to be configured as follows:"
msgstr "アクセストークンを取得するために、既存のリフレッシュトークンが現在の Quarkus エンドポイントにポストされた場合、新しいトークンセットを取得するために帯域外のリフレッシュトークンを使用する `refresh_token` グラントを使用する必要があります。この場合、 `OidcClient` を次のように設定する必要があります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "and then you can use `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr "続いて、提供されたリフレッシュトークンを使って `OidcClient.refreshTokens` メソッドを使用して、アクセストークンを取得することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Using the `token exchange` grant may be required if you are building a complex microservices application and would like to avoid the same `Bearer` token be propagated to and used by more than one service. Please see <<token-propagation,Token Propagation in MicroProfile RestClient client filter>> for more details."
msgstr "複雑なマイクロサービスアプリケーションを構築していて、同じ `Bearer` トークンが複数のサービスに伝搬して使用されることを避けたい場合は、 `token exchange` グラントの使用が必要になる場合があります。詳細は、<<token-propagation,Token Propagation in MicroProfile RestClient client filter>> を参照してください。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if for some reasons you can not use the xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow then you can configure `OidcClient` as follows:"
msgstr "何らかの理由で xref:security-openid-connect-web-authentication.adoc[Quarkus OpenID Connect extension] を使用して認可コードフローをサポートできない場合は、 `OidcClient` を使用した `authorization code` グラントのサポートが必要な場合があります。認可コードフローを実装する正当な理由がある場合は、 `OidcClient` を以下のように設定することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "and then you can use `OidcClient.accessTokens` method accepting a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr "次に、追加のプロパティーのマップを受け入れる `OidcClient.accessTokens` メソッドを使用し、現在の `code` パラメーターと `redirect_uri` パラメーターを渡して、トークンの認可コードを交換できます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Grant scopes"
msgstr "スコープのグラント"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"You may need to request that a specific set of scopes is associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr "スコープの特定のセットが発行されたアクセストークンに関連付けられるように要求する必要がある場合があります。専用の `quarkus.oidc-client.scopes` リストプロパティーを使用してください (例: `quarkus.oidc-client.scopes=email,phone`)。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Use OidcClient directly"
msgstr "OidcClient を直接使用する"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Inject Tokens"
msgstr "トークンを注入する"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "You can inject `Tokens` which uses `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr "内部で `OidcClient` を使用する `Tokens` を注入することができます。 `Tokens` を使用してアクセストークンを取得し、必要に応じて更新することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Use OidcClients"
msgstr "OidcClientsの使用"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr "`io.quarkus.oidc.client.OidcClients` は、 ``OidcClient``s のコンテナーです。デフォルトの `OidcClient` と名前付きクライアントを含み、以下のように設定することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Note in this case the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr "この場合、デフォルトのクライアントは `client-enabled=false` プロパティーで無効になっていることに注意してください。 `jwt-secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block =
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and each OIDC tenant has its own associated `OidcClient` then you can use a Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr "xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] を使用し、各 OIDC テナントが独自の関連する `OidcClient` を持っている場合は、Vert.x `RoutingContext` `tenantId` 属性を使用することができます。以下に例を示します。"

#. type: delimited block =
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If you need you can also create new `OidcClient` programmatically like this:"
msgstr "必要であれば、このようにプログラム的に新しい `OidcClient` を作成することもできます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Inject named OidcClient and Tokens"
msgstr "名前付き OidcClient とトークンの挿入"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "In case of multiple configured ``OidcClient``s you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr "複数の設定済みの ``OidcClient``s の場合は、 `OidcClients` で作業する代わりに、追加の修飾子 `@NamedOidcClient` で `OidcClient` 注入ターゲットを指定できます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr "同じ修飾子を使用して、 `Tokens` インジェクションに使用される `OidcClient` を指定できます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr "RestClient の Reactive ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Add the following Maven Dependency:"
msgstr "以下の Maven 依存関係を追加します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Note it will also bring `io.quarkus:quarkus-oidc-client`."
msgstr "`io.quarkus:quarkus-oidc-client` も表示されることに注意してください。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client-reactive-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr "`quarkus-oidc-client-reactive-filter` エクステンションは、 `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter` を提供します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value. The difference is that it works with xref:rest-client-reactive.adoc[Reactive RestClient] and implements a non-blocking client filter which does not block the current IO thread when acquiring or refreshing the tokens."
msgstr "これは `OidcClientRequestFilter` と同じように機能します (<<oidc-client-filter, Use OidcClient in MicroProfile RestClient client filter>> を参照) - `OidcClient` を使用してアクセストークンを取得し、必要に応じてリフレッシュして、HTTP `Authorization` `Bearer` スキームの値としてセットします。違いは、xref:rest-client-reactive.adoc[Reactive RestClient] で機能することと、トークンの取得や更新時に現在の IO スレッドをブロックしないノンブロッキングクライアントフィルターを実装している点です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread and it currently can only be registered with `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation:"
msgstr "`OidcClientRequestReactiveFilter` は、IO スレッドのブロックを回避するため、実行されるまで最初のトークンの取得を遅らせ、現在は `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションによってのみ登録することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-reactive-filter.client-name` configuration property."
msgstr "`OidcClientRequestReactiveFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-reactive-filter.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Use OidcClient in RestClient ClientFilter"
msgstr "RestClient の ClientFilter で OidcClient を使用する"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization` `Bearer` scheme value."
msgstr "`quarkus-oidc-client-filter` エクステンションは `io.quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter を提供します。このフィルターは、 `OidcClient` を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are not available then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr "デフォルトでは、このフィルタは初期化時に `OidcClient` を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、 `quarkus.oidc-client.early-tokens-acquisition=false` でトークンの取得を遅延させるべきです。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr "`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して `OidcClientRequestFilter` を選択的に登録することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "or"
msgstr "or"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-client-filter.register-filter=true` property is set."
msgstr "または、 `quarkus.oidc-client-filter.register-filter=true` プロパティーが設定されている場合、すべての MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-client-filter.client-name` configuration property."
msgstr "`OidcClientRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は `quarkus.oidc-client-filter.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Use Custom RestClient ClientFilter"
msgstr "カスタム RestClient ClientFilter の使用"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr "`Tokens` プロデューサーがトークンを取得・更新し、カスタムフィルターが何時、どのようにトークンを使用するかを決定します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr "名前付きの `Tokens` を挿入することもできます。<<named-oidc-clients,Inject named OidcClient and Tokens>> を参照してください。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Refreshing Access Tokens"
msgstr "アクセストークンの更新"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens which may cause HTTP 401 errors. For example if this property is set to `3S` and the access token will expire in less than 3 seconds then this token will be auto-refreshed."
msgstr "`OidcClientRequestReactiveFilter`、 `OidcClientRequestFilter` および `Tokens` プロデューサーは、リフレッシュトークンが利用可能な場合、現在の期限切れアクセストークンをリフレッシュします。さらに、 `quarkus.oidc-client.refresh-token-time-skew` プロパティーは、HTTP 401 エラーの原因となる可能性のある期限切れ間近のアクセストークンの送信を避けるために、アクセストークンのリフレッシュを先取りして行うことに使用できます。たとえば、このプロパティーが `3S` に設定されていて、アクセストークンが 3 秒以内に期限切れになる場合、このトークンは自動的にリフレッシュされます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If the access token needs to be refreshed but no refresh token is available then an attempt will be made to acquire a new token using the configured grant such as `client_credentials`."
msgstr "アクセストークンの更新が必要なのにリフレッシュトークンがない場合は、 `client_credentials` のように設定されたグラントを使って新しいトークンの取得を試みます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Please note that some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12 a refresh token will not be returned by default for `client_credentials`. The providers may also restrict a number of times a refresh token can be used."
msgstr "一部の OpenID Connect プロバイダーは、 `client_credentials` グラントレスポンスでリフレッシュトークンを返さない点にご注意ください。たとえば、Keycloak 12 以降、 `client_credentials` のリフレッシュトークンはデフォルトでは返されません。また、プロバイダーは、リフレッシュトークンを使用できる回数を制限する場合もあります。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "OidcClient Authentication"
msgstr "OidcClient 認証"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr "`OidcClient` は、 `client_credentials` および他のグラントリクエストが成功するために OpenID Connect プロバイダーに対して認証する必要があります。 https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] オプションはすべてサポートされています。以下に例を示します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic` ."

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr "または、xref:credentials-provider.adoc[CredentialsProvider]: から取得したシークレットを使用します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`client_secret_post`:"
msgstr "`client_secret_post`:"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr "`client_secret_jwt`、署名アルゴリズムは `HS256` です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr "または、xref:credentials-provider.adoc[CredentialsProvider] から取得したシークレットを使用すると、署名アルゴリズムは `HS256` になります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr "PEM キーファイルを使用した`private_key_jwt`、署名アルゴリズムは `RS256` です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`private_key_jwt` with the key store file, signature algorithm is `RS256`:"
msgstr "キーストアファイルを使用した`private_key_jwt`、署名アルゴリズムは `RS256` です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr "`client_secret_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが漏れることはありません。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Additional JWT Authentication options"
msgstr "追加の JWT 認証オプション"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used then the JWT signature algorithm, key identifier, audience, subject and issuer can be customized, for example:"
msgstr "`client_secret_jwt` または `private_key_jwt` のいずれかの認証方法を使用する場合は、JWT 署名アルゴリズム、鍵識別子、オーディエンス、サブジェクト、および発行者をカスタマイズすることができます。以下に例を示します。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account specific issuer and subject properties."
msgstr "Apple OpenID Connect プロバイダーは `client_secret_post` メソッドを使用します。ここで、secret は `private_key_jwt` 認証メソッドで生成された JWT ですが、Apple アカウント固有の発行者とサブジェクトプロパティーを使用します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method which can be configured as follows:"
msgstr "`quarkus-oidc-client` は、以下のように設定できる標準外の `client_secret_post_jwt` 認証方法をサポートしています。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Mutual TLS"
msgstr "相互 TLS"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Some OpenID Connect Providers may require that a client is authenticated as part of the `Mutual TLS` (`MTLS`) authentication process."
msgstr "OpenID Connect プロバイダによっては、 `Mutual TLS` ( `MTLS` ) 認証プロセスの一部として、クライアントの認証を要求する場合があります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `MTLS`:"
msgstr "`quarkus-oidc-client` は、以下のように設定することで、 `MTLS` をサポートすることができます："

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Write Wiremock based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr "Wiremockベースの `QuarkusTestResourceLifecycleManager` を例えば以下のように書きます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered OidcClient filter to invoke on the downstream endpoint which echoes the token back, for example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr "RESTテストエンドポイントを用意します。注入されたMP RESTクライアントを登録されたOidcClientフィルターで使用するテスト用フロントエンドエンドポイントが、トークンをエコーバックするダウンストリームエンドポイントを呼び出すことができます。例として、 `main` Quarkusリポジトリの `integration-tests/oidc-client-wiremock` を参照してください。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Set `application.properties`, for example:"
msgstr "`application.properties` を次のように設定します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "and finally write the test code. Given the Wiremock-based resource above, the first test invocation should return `access_token_1` access token which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return `access_token_2` access token which confirms the expired `access_token_1` access token has been refreshed."
msgstr "そして最後にテストコードを書きます。上記の Wiremock ベースのリソースがある場合、最初のテスト起動では `access_token_1` アクセストークンが返却されますが、このアクセストークンは 4 秒で期限切れになります。 `awaitility` を使用して約 5 秒間待つと、次のテスト起動時に `access_token_2` アクセストークンが返され、期限切れの `access_token_1` アクセストークンがリフレッシュされたことが確認できます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Keycloak"
msgstr "Keycloak"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If you work with Keycloak then you can use the same approach as described in the xref:security-openid-connect#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] `Keycloak` section."
msgstr "Keycloakを使用している場合は、 xref:security-openid-connect.adoc#integration-testing-keycloak.adoc[OpenID Connect Bearer Token Integration testing] `Keycloak` のセクションで説明したのと同じ方法を使用することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "How to check the errors in the logs"
msgstr "ログでエラーを確認する方法"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr "トークンの取得および更新エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` レベルのロギングを有効にしてください。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Please enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr "OidcClient 初期化エラーの詳細を確認するには、 `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` レベルのログを有効にしてください。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Token Propagation"
msgstr "トークンの伝播"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"The `quarkus-oidc-token-propagation` extension provides two JAX-RS `javax.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-openid-connect.adoc[Bearer] token present in the current active request or the token acquired from the xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality, but in addition provides support for JWT tokens."
msgstr "`quarkus-oidc-token-propagation` エクステンションは、認証情報の伝搬を簡素化する 2 つの JAX-RS `javax.ws.rs.client.ClientRequestFilter` クラスの実装を提供します。 `io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` は、現在のアクティブなリクエストに存在する xref:security-openid-connect.adoc[Bearer] トークン、または HTTP `Authorization` ヘッダーの `Bearer` スキーム値として xref:security-openid-connect-web-authentication.adoc[Authorization Code Flow] から取得したトークンを伝播させます。 `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` は同じ機能を提供しますが、これに加えて JWT トークンのサポートも提供します。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "When you need to propagate the current Authorization Code Flow access token then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr "現在の認可コードフローアクセストークンを伝播する必要がある場合は、即時トークン伝播はうまく機能します - コードフローアクセストークン (ID トークンとは対照的に) は、現在認証されているユーザーに代わってリモートサービスにアクセスするように、現在の Quarkus エンドポイントに伝搬されることが意図されています。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "However, the direct end to end Bearer token propagation should be avoided if possible. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases `Service B` will not be able to distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A` it should be able to assert a new issuer and audience claims."
msgstr "ただし、可能であれば、エンドツーエンドのベアラートークンの直接伝播は避ける必要があります。たとえば、 `Client -> Service A -> Service B` で、 `Service B` は `Client` から `Service A` に送信されたトークンを受け取ります。このような場合、 `Service B` は、トークンが `Service A` からのものか、直接 `Client` からのものかを区別できません。トークンが `Service A` からのものであることを `Service B` が確認するには、新しい発行者とオーディエンスのクレームをアサートできる必要があります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Additionally, a complex application may need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or a completely different set of scopes to access `Service B`."
msgstr "さらに、複雑なアプリケーションでは、トークンを伝搬する前に交換または更新する必要がある場合があります。たとえば、 `Service A` が `Service B` にアクセスするとき、アクセスコンテキストが異なるかもしれません。この場合、 `Service A` には `Service B` にアクセスするための狭いスコープまたは完全に異なるスコープのセットがグラントされることがあります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr "次のセクションでは、 `AccessTokenRequestFilter` および `JsonWebTokenRequestFilter` がどのように役立つかを示します。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "RestClient AccessTokenRequestFilter"
msgstr "RestClient AccessTokenRequestFilter"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings and as such it can work with both JWT and opaque tokens."
msgstr "`AccessTokenRequestFilter` は、すべてのトークンをStringとして扱うため、JWTトークンと不透明なトークンの両方を扱うことができます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "`io.quarkus.oidc.token.propagation.AccessToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` のいずれかを使用して、 `AccessTokenRequestFilter` を選択的に登録できます。例:"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if `quarkus.oidc-token-propagation.register-filter` property is set to `true` and `quarkus.oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティが `true` に設定され、 `quarkus.oidc-token-propagation.json-web-token` プロパティが `false` に設定されている場合（デフォルト値です）、すべての MP Rest または JAX-RS クライアントで `AccessTokenRequestFilter` を自動的に登録することができます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Exchange Token Before Propagation"
msgstr "伝搬前のトークンの交換"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant then you can configure `AccessTokenRequestFilter` like this:"
msgstr "もし、現在のアクセストークンを伝搬する前に交換する必要があり、かつ link:https://www.keycloak.org/docs/latest/securing_apps/#_token-exchange[Keycloak] または他の link:https://tools.ietf.org/html/rfc8693[Token Exchange] トークングラントをサポートする OpenID Connect プロバイダーで作業する場合は、 `AccessTokenRequestFilter` を以下のように設定することが可能です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Note `AccessTokenRequestFilter` will use `OidcClient` to exchange the current token and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr "`AccessTokenRequestFilter` は `OidcClient` を使用して現在のトークンを交換し、 `quarkus.oidc-client.grant-options.exchange` を使用して OpenID Connect プロバイダーが期待する追加の交換プロパティーを設定できる点に留意してください。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.oidc-token-propagation.client-name` configuration property."
msgstr "`AccessTokenRequestFilter` はデフォルトで `OidcClient` を使用します。名前付きの `OidcClient` は、 `quarkus.oidc-token-propagation.client-name` 設定プロパティーで選択することができます。"

#. type: Title ===
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "RestClient JsonWebTokenRequestFilter"
msgstr "RestClient JsonWebTokenRequestFilter"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and therefore will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr "`JsonWebTokenRequestFilter` の使用は、ベアラー JWT トークンで作業する場合に推奨されます。これらのトークンは `issuer` や `audience` などのクレームを変更し、更新されたトークンを再度保護 (再署名など) することができます。注入された `org.eclipse.microprofile.jwt.JsonWebToken` を想定しているため、不透明なトークンでは機能しません。また、OpenID Connect プロバイダーが Token Exchange プロトコルをサポートしている場合は、代わりに `AccessTokenRequestFilter` を使用することが推奨されます。JWT と不透明なベアラートークンの両方を `AccessTokenRequestFilter` と安全に交換することができるからです。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is to ensure `Service A` has a signing key - it should be provisioned from a secure file system or from the remote secure storage such as Vault."
msgstr "`JsonWebTokenRequestFilter` は、 `Service A` の実装が、注入された `org.eclipse.microprofile.jwt.JsonWebToken` を新しい `issuer` と `audience` のクレーム値で更新し、更新されたトークンを新しい署名で再度保護することを容易にします。唯一の難しいステップは、 `Service A` に署名鍵を持たせることです。署名鍵は、安全なファイルシステムまたは Vault などのリモートの安全なストレージからプロビジョニングする必要があります。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr "たとえば、 `io.quarkus.oidc.token.propagation.JsonWebToken` または `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` を使用して、 `JsonWebTokenRequestFilter` を選択的に登録することが可能です。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MP Rest or JAX-RS clients if both `quarkus.oidc-token-propagation.register-filter` and `quarkus.oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr "または、 `quarkus.oidc-token-propagation.register-filter` プロパティーおよび `quarkus.oidc-token-propagation.json-web-token` プロパティーの両方が `true` に設定されている場合、 `JsonWebTokenRequestFilter` は、すべての MP Rest または JAX-RS クライアントで自動的に登録することができます。"

#. type: Title ====
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Update Token Before Propagation"
msgstr "伝搬前のトークンの更新"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "If the injected token needs to have its `iss` (issuer) and/or `aud` (audience) claims updated and secured again with a new signature then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr "注入されたトークンの `iss` (発行者) や `aud` (オーディエンス) のクレームを更新して、新しい署名で保護する必要がある場合は、 `JsonWebTokenRequestFilter` を以下のように設定できます。"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "As already noted above, please use `AccessTokenRequestFilter` if you work with Keycloak or OpenID Connect Provider which supports a Token Exchange protocol."
msgstr "前述のように、Token Exchange プロトコルをサポートする Keycloak または OpenID Connect プロバイダーを使用する場合は、 `AccessTokenRequestFilter` を使用してください。"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"You can generate the tokens as described in xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] section.\n"
"Prepare the REST test endpoints, you can have the test frontend endpoint which uses the injected MP REST client with a registered token propagation filter to invoke on the downstream endpoint, for example, see the `integration-tests/oidc-token-propagation` in the `main` Quarkus repository."
msgstr "xref:security-openid-connect.adoc#integration-testing[OpenID Connect Bearer Token Integration testing] のセクションで説明したように、トークンを生成することができます。REST テストエンドポイントを準備します。登録されたトークン伝搬フィルターで注入された MP REST クライアントを使用するテストフロントエンドエンドポイントは、ダウンストリームエンドポイントで呼び出すことができます。たとえば、 `main` Quarkus リポジトリーの `integration-tests/oidc-token-propagation` を参照してください。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "Token Propagation Reactive"
msgstr "トークン伝播リアクティブ"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "The `quarkus-oidc-token-propagation-reactive` extension provides `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` which can be used to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr "`quarkus-oidc-token-propagation-reactive` エクステンションは、 `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter` を提供します。これは、現在の `Bearer` または `Authorization Code Flow` アクセストークンを伝播するために使用することができます。"

#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid ""
"The `quarkus-oidc-token-propagation-reactive` extension (as opposed to the non-reactive `quarkus-oidc-token-propagation` extension) does not currently support the exchanging or resigning the tokens before the propagation.\n"
"However these features may be added in the future."
msgstr "(リアクティブではない `quarkus-oidc-token-propagation` エクステンションとは対照的に) `quarkus-oidc-token-propagation-reactive` エクステンションは現在、伝播前のトークンの交換または再署名をサポートしていません。ただし、これらの機能は将来追加される可能性があります。"

#. type: Title ==
#: _versions/2.7/guides/security-openid-connect-client.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "xref:security.adoc[Quarkus Security]"
msgstr "xref:security.adoc[Quarkus Security]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect.adoc[Quarkus - Using OpenID Connect to Protect Service Applications using Bearer Token Authorization]"
msgstr "xref:security-openid-connect.adoc[Quarkus - OpenID Connect (OIDC) を使用した、ベアラートークン認可によるサービスアプリケーションの保護]"

#. type: Plain text
#: _versions/2.7/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-web-authentication.adoc[Quarkus - Using OpenID Connect to Protect Web Applications using Authorization Code Flow]"
msgstr "xref:security-openid-connect-web-authentication.adoc[Quarkus - OpenID Connect を使用した、認可コードフローによる Web アプリケーションの保護]"

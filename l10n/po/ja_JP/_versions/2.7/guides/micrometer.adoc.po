msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Micrometer Metrics"
msgstr "Micrometerメトリクス"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"This guide demonstrates how your Quarkus application can utilize the Micrometer metrics library for runtime and\n"
"application metrics."
msgstr "このガイドでは、QuarkusアプリケーションがランタイムメトリクスとアプリケーションメトリクスのためにMicrometerメトリクスライブラリを利用する方法を説明します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Apart from application-specific metrics, which are described in this guide, you may also utilize built-in metrics\n"
"exposed by various Quarkus extensions. These are described in the guide for each particular extension that supports\n"
"built-in metrics."
msgstr "このガイドで説明するアプリケーション固有のメトリクスとは別に、Quarkusのさまざまなエクステンションによって公開されているビルトインメトリクスを利用することもできます。これらについては、ビルトインメトリクスをサポートしている各エクステンションのガイドで説明します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Micrometer is the recommended approach to metrics for Quarkus."
msgstr "Micrometerは、Quarkusのメトリクスとして推奨されるアプローチです。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer defines a core library providing a registration mechanism for Metrics, and core metric types (Counters,\n"
"Gauges, Timers, Distribution Summaries, etc.). These core types provide an abstraction layer that can be adapted to\n"
"different backend monitoring systems. In essence, your application (or a library) can `register` a `Counter`,\n"
"`Gauge`, `Timer`, or `DistributionSummary` with a `MeterRegistry`. Micrometer will then delegate that registration to\n"
"one or more implementations, where each implementation handles the unique considerations for the associated\n"
"monitoring stack."
msgstr "Micrometerは、メトリクスの登録メカニズムを提供するコアライブラリと、メトリクスのコアタイプ(カウンター、ゲージ、タイマー、ディストリビューション・サマリーなど)を定義しています。これらのコアタイプは、さまざまなバックエンド監視システムに適応できる抽象化レイヤーを提供します。要するに、アプリケーション（またはライブラリ）は、 `Counter`, `Gauge`, `Timer`, または `DistributionSummary` を `MeterRegistry` と共に `register` することができます。その後、Micrometerはその登録を1つまたは複数の実装に委ね、各実装は関連する監視スタックの独自の考慮事項を処理します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer uses naming conventions to translate between registered Meters and the conventions used by various backend\n"
"registries. Meter names, for example, should be created and named using dots to separate segments, `a.name.like.this`.\n"
"Micrometer then translates that name into the format that the selected registry prefers. Prometheus\n"
"uses underscores, which means the previous name will appear as `a_name_like_this` in Prometheus-formatted metrics\n"
"output."
msgstr "Micrometerでは、登録されたメーターと、さまざまなバックエンドレジストリで使用されている規約との間の翻訳に、命名規則を使用しています。たとえば、メーターの名前は、ドットでセグメントを区切って作成し、命名する必要があります。 `a.name.like.this` 。その後、Micrometerはその名前を、選択したレジストリが好むフォーマットに変換します。Prometheusではアンダースコアを使用しているため、Prometheus形式のメトリクス出力では前の名前が `a_name_like_this` と表示されます。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"You can skip right to the solution if you prefer. Either:"
msgstr "次のセクションで紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Clone the git repository: `git clone {quickstarts-clone-url}`, or"
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Download an {quickstarts-archive-url}[archive]."
msgstr "{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "The solution is located in the `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory]."
msgstr "ソリューションは `micrometer-quickstart` {quickstarts-tree-url}/micrometer-quickstart[directory] にあります。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Quarkus Micrometer extensions are structured similarly to Micrometer itself: `quarkus-micrometer` provides core\n"
"micrometer support and runtime integration and other Quarkus and Quarkiverse extensions bring in additional\n"
"dependencies and requirements to support specific monitoring systems."
msgstr "Quarkus MicrometerエクステンションはMicrometer 自身と同様に構成されています。 `quarkus-micrometer` はコア micrometer サポートとランタイム統合を提供し、その他のQuarkus、Quarkiverse エクステンションは特定のモニタリングシステムをサポートするための追加の依存関係や要件を提供します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "For this example, we'll use the Prometheus registry."
msgstr "この例では、Prometheus のレジストリーを使用します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"This command generates a Maven project, that imports the `micrometer-registry-prometheus` extension as a dependency.\n"
"This extension will load the core `micrometer` extension as well as additional library dependencies required to support\n"
"prometheus."
msgstr "このコマンドは、 `micrometer-registry-prometheus` エクステンションを依存関係としてインポートする Maven プロジェクトを生成します。このエクステンションは、 `micrometer` エクステンションだけでなく、 Prometheus をサポートするために必要な追加のライブラリ依存関係もロードします。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `micrometer-registry-prometheus` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `micrometer-registry-prometheus` エクステンションを追加することができます。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#. type: Block title
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer provides an API that allows you to construct your own custom metrics. The most common types of\n"
"meters supported by monitoring systems are gauges, counters, and summaries. The following sections build\n"
"an example endpoint, and observes endpoint behavior using these basic meter types."
msgstr "Micrometerは、独自のカスタムメトリクスを構築するためのAPIを提供しています。モニタリング・システムでサポートされている最も一般的なメーターのタイプは、ゲージ、カウンター、サマリーです。以下のセクションでは、エンドポイントの例を構築し、これらの基本的なメータタイプを使用してエンドポイントの動作を観察します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"To register meters, you need a reference to a `MeterRegistry`, which is configured and maintained by the Micrometer\n"
"extension. The `MeterRegistry` can be injected into your application as follows:"
msgstr "メーターを登録するには、Micrometerエクステンションによって設定され維持されている `MeterRegistry` への参照が必要です。 `MeterRegistry` は、次のようにしてアプリケーションに注入することができます。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer maintains an internal mapping between unique metric identifier and tag combinations and specific meter\n"
"instances. Using `register`, `counter`,  or other methods to increment counters or record values does not create\n"
"a new instance of a meter unless that combination of identifier and tag/label values hasn't been seen before."
msgstr "Micrometerは、一意のメトリック識別子およびタグの組み合わせと、特定のメーターインスタンスとの間の内部マッピングを維持しています。 `register` や `counter` や他のメソッドを使用してカウンターを増加させたり値を記録したりしても、識別子とタグ/ラベル値の組み合わせがこれまでにないものでない限り、メーターの新しいインスタンスは作成されません。"

#. type: Title ===
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Gauges"
msgstr "ゲージ"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Gauges measure a value that can increase or decrease over time, like the speedometer on a car. Gauges can be\n"
"useful when monitoring the statistics for a cache or collection. Consider the following simple example that\n"
"observes the size of a list:"
msgstr "ゲージは、車のスピードメーターのように、時間の経過とともに増えたり減ったりする値を測定するものです。ゲージは、キャッシュやコレクションの統計情報を監視する際に便利です。次の簡単な例では、リストのサイズを監視しています。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Note that even numbers are added to the list, and odd numbers remove an element from the list."
msgstr "なお、偶数はリストに追加され、奇数はリストから要素を削除します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Start your application in dev mode:"
msgstr "アプリケーションを開発モードで起動します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Then try the following sequence and look for `example_list_size` in the plain text output:"
msgstr "次に、以下のシーケンスを試して、プレーンテキストの出力で `example_list_size` を確認してください。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"It is important to note that gauges are sampled rather than set; there is no record of how the value associated with a\n"
"gauge might have changed between measurements. In this example, the size of the list is observed when the Prometheus\n"
"endpoint is visited."
msgstr "ゲージは設定されるのではなくサンプリングされることに注意してください。ゲージに関連付けられた値が測定間でどのように変化したかについての記録はありません。 この例では、Prometheusエンドポイントにアクセスしたときにリストのサイズが計測されます。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer provides a few additional mechanisms for creating gauges. Note that Micrometer does not create strong\n"
"references to the objects it observes by default. Depending on the registry, Micrometer either omits gauges that observe\n"
"objects that have been garbage-collected entirely or uses `NaN` (not a number) as the observed value."
msgstr "Micrometerには、ゲージを作成するための追加のメカニズムがいくつかあります。なお、Micrometer はデフォルトでは、観測するオブジェクトへの強い参照を作成しません。レジストリによっては、ごみ収集されたオブジェクトを観測するゲージを完全に省略したり、観測値として `NaN` (not a number) を使用したりしています。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"When should you use a Gauge? Only if you can't use something else. Never gauge something you can count. Gauges can be\n"
"less straight-forward to use than counters. If what you are measuring can be counted (because the value always\n"
"increments), use a counter instead."
msgstr "どんなときにゲージを使うべきでしょうか？他のものが使えない場合に限ります。カウンターが使えるものでゲージを使ってはいけません。ゲージはカウンターよりも使いにくい場合があります。測定しているものが数えられる場合（値が常に増加するため）は、代わりにカウンターを使用してください。"

#. type: Title ===
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Counters"
msgstr "カウンター"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Counters are used to measure values that only increase. In the example below, you will count the number of times you\n"
"test a number to see if it is prime:"
msgstr "カウンタは、増加するだけの値を測定するために使用されます。以下の例では、ある数字が素数であるかどうかを調べる回数を数えます。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"It might be tempting to add a label or tag to the counter indicating what value was checked, but remember that each\n"
"unique combination of metric name (`example.prime.number`) and label value produces a unique time series. Using an\n"
"unbounded set of data as label values can lead to a \"cardinality explosion\", an exponential increase in the creation\n"
"of new time series."
msgstr "どのような値がチェックされたかを示すラベルやタグをカウンタに追加したくなるかもしれませんが、メトリック名( `example.prime.number`)とラベル値のユニークな組み合わせは、それぞれユニークな時系列を生成することを覚えておいてください。ラベル値として無制限のデータセットを使用すると、新しい時系列の作成が指数関数的に増加する「カーディナリティ・エクスプロージョン（cardinality explosion）」が発生する可能性があります。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Label and tag can be used interchangably. You may also see \"attribute\" used in this context in some documentation.\n"
"The gist is each that each label or tag or attribute defines an additional bit of information associated with the\n"
"single numerical measurement that helps you classify, group, or aggregate the measured value later. The Micrometer API\n"
"uses `Tag` as the mechanism for specifying this additional data."
msgstr "ラベルとタグは同じ意味で使われています。また、ドキュメントによっては、この文脈で「属性」が使われていることもあります。要するに、それぞれのラベルやタグ、属性は、単一の数値測定に関連する追加の情報を定義するもので、後に測定値を分類したり、グループ化したり、集約したりするのに役立ちます。Micrometer APIでは、この追加データを指定する仕組みとして、 `Tag` を使用しています。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"It is possible to add a tag that would convey a little more information, however. Let's adjust our code, and move\n"
"the counter to add some tags to convey additional information."
msgstr "しかし、もう少し情報を伝えるためのタグを追加することは可能です。コードを調整して、カウンターを動かし、追加の情報を伝えるタグを追加してみましょう。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Looking at the data produced by this counter, you can tell how often a negative number was checked, or the number one,\n"
"or an even number, and so on. Try the following sequence and look for `example_prime_number_total` in the plain text\n"
"output. Note that the `_total` suffix is added when Micrometer applies Prometheus naming conventions to\n"
"`example.prime.number`, the originally specified counter name."
msgstr "このカウンタが出力するデータを見ると、負の数、1の数、偶数の数などがどれくらいの頻度でチェックされたかがわかります。次のシーケンスを試して、プレーンテキストの出力で `example_prime_number_total` を探してみてください。なお、 `_total` サフィックスは、元々指定されていたカウンタ名 `example.prime.number` に Micrometer が Prometheus の命名規則を適用したときに付けられたものです。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "If you did not leave Quarkus running in dev mode, start it again:"
msgstr "Quarkusを開発モードで起動したままにしていない場合は、再度起動してください。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Then execute the following sequence:"
msgstr "そして、以下のシーケンスを実行します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"When should you use a counter? Only if you are doing something that can not be either timed (or summarized).\n"
"Counters only record a count, which may be all that is needed. However, if you want to understand more about how a\n"
"value is changing, a timer (when the base unit of measurement is time) or a distribution summary might be\n"
"more appropriate."
msgstr "どんな時にカウンターを使うべきでしょうか？時間を計ることもまとめることもできないようなことをしているときだけです。カウンターはカウントを記録するだけなので、それだけで十分な場合もあります。しかし、値がどのように変化しているかをより深く理解したい場合は、タイマー（基本的な測定単位が時間の場合）やディストリビューション・サマリーの方が適切かもしれません。"

#. type: Title ===
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Summaries and Timers"
msgstr "サマリーとタイマー"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Timers and distribution summaries in Micrometer are very similar. Both allow you to record an observed value, which\n"
"will be aggregated with other recorded values and stored as a sum. Micrometer also increments a counter to indicate the\n"
"number of measurements that have been recorded and tracks the maximum observed value (within a decaying interval)."
msgstr "Micrometerのタイマーとディストリビューション・サマリーは非常によく似ています。どちらも観測値を記録することができ、その値は他の記録された値と合算されて合計値として保存されます。また、Micrometerでは、記録された測定値の数を示すカウンタをインクリメントし、（減衰間隔内で）最大の観測値を追跡します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Distribution summaries are populated by calling the `record` method to record observed values, while timers provide\n"
"additional capabilities specific to working with time and measuring durations. For example, we can use a timer to\n"
"measure how long it takes to calculate prime numbers using one of the `record` methods that wraps the invocation of a\n"
"Supplier function:"
msgstr "ディストリビューション・サマリーは、 `record` メソッドを呼び出して観測値を記録することで入力されます。一方、タイマーは、時間の扱いや持続時間の測定に特化した追加機能を提供します。例えば、タイマーを使って、Supplier関数の呼び出しをラップする `record` メソッドの1つを使って、素数の計算にかかる時間を測定することができます。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer will apply Prometheus conventions when emitting metrics for this timer. Prometheus measures time in seconds.\n"
"Micrometer converts measured durations into seconds and includes the unit in the metric name, per convention. After\n"
"visiting the prime endpoint a few more times, look in the plain text output for the following three entries:\n"
"`example_prime_number_test_seconds_count`, `example_prime_number_test_seconds_sum`, and\n"
"`example_prime_number_test_seconds_max`."
msgstr "Micrometerは、このタイマーの測定値を出力する際に、Prometheus の規則を適用します。Prometheusでは、時間を秒単位で測定します。Micrometerは、測定された持続時間を秒に変換し、規約に従ってメトリック名に単位を含めます。プライムエンドポイントをさらに数回訪れた後、プレーンテキストの出力で次の3つのエントリを確認してください： `example_prime_number_test_seconds_count`, `example_prime_number_test_seconds_sum`, `example_prime_number_test_seconds_max` 。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Both timers and distribution summaries can be configured to emit additional statistics, like histogram data,\n"
"precomputed percentiles, or service level objective (SLO) boundaries. Note that the count, sum, and histogram data\n"
"can be re-aggregated across dimensions (or across a series of instances), while precomputed percentile values cannot."
msgstr "タイマーとディストリビューションサマリーは、ヒストグラムデータ、事前に計算されたパーセンタイル、サービスレベル目標（SLO）の境界線など、追加の統計情報を出力するように設定できます。カウント、サム、ヒストグラムのデータは、ディメンション間（または一連のインスタンス間）で再集計できますが、事前に計算されたパーセンタイル値はできないことに注意してください。"

#. type: Title ===
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Review automatically generated metrics"
msgstr "自動生成されたメトリクスを確認する"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "To view metrics, execute `curl localhost:8080/q/metrics/`"
msgstr "メトリクスを表示するには、 `curl localhost:8080/q/metrics/` を実行します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"The Micrometer extension automatically times HTTP server requests. Following Prometheus naming conventions for\n"
"timers, look for `http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, and\n"
"`http_server_requests_seconds_max`. Dimensional labels have been added for the requested uri, the HTTP method\n"
"(GET, POST, etc.), the status code (200, 302, 404, etc.), and a more general outcome field."
msgstr "Micrometerエクステンションは、HTTPサーバーのリクエストの時間を自動的に計測します。Prometheus のタイマーの命名規則に従い、 `http_server_requests_seconds_count` 、 `http_server_requests_seconds_sum` 、 `http_server_requests_seconds_max` を参照してください。要求された URI、HTTP メソッド (GET、POST など)、ステータスコード (200、302、404 など)、そしてより一般的な結果フィールドのための次元ラベルが追加されました。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Note that metrics appear lazily, you often won't see any data for your endpoint until\n"
"something tries to access it, etc."
msgstr "メトリクスは遅延的に表示され、何かがアクセスしようとするまでエンドポイントのデータが表示されないことが多いことに注意してください。"

#. type: Block title
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Ignoring endpoints"
msgstr "エンドポイントの無視"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"You can disable measurement of HTTP endpoints using the `quarkus.micrometer.binder.http-server.ignore-patterns`\n"
"property. This property accepts a comma-separated list of simple regex match patterns identifying URI paths that should\n"
"be ignored. For example, setting `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` will\n"
"ignore a request to `http://localhost:8080/example/prime/7919`. A request to `http://localhost:8080/example/gauge/7919`\n"
"would still be measured."
msgstr "`quarkus.micrometer.binder.http-server.ignore-patterns` プロパティを使用して、HTTP エンドポイントの測定を無効にすることができます。このプロパティには、無視すべきURIパスを特定する単純な正規表現のマッチパターンをコンマで区切ったリストを指定できます。例えば、 `quarkus.micrometer.binder.http-server.ignore-patterns=/example/prime/[0-9]+` を設定すると、以下へのリクエストが無視されます。 `http://localhost:8080/example/prime/7919` へのリクエストは無視されます。 `http://localhost:8080/example/gauge/7919` へのリクエストは、依然として計測されます。"

#. type: Block title
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "URI templates"
msgstr "URIテンプレート"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"The micrometer extension will make a best effort at representing URIs containing path parameters in templated form.\n"
"Using examples from above, a request to `http://localhost:8080/example/prime/7919` should appear as an attribute of\n"
"`http_server_requests_seconds_*` metrics with a value of `uri=/example/prime/{number}`."
msgstr "micrometerエクステンションでは、パスパラメータを含むURIをテンプレート化して表現することに最善の努力を払います。上の例を使うと、次のようなリクエストは `http://localhost:8080/example/prime/7919` へのリクエストは、 `http_server_requests_seconds_*` メトリクスの属性として、 `uri=/example/prime/{number}` という値で表示されます。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Use the `quarkus.micrometer.binder.http-server.match-patterns` property if the correct URL can not be determined. This\n"
"property accepts a comma-separated list defining an association between a simple regex match pattern and a replacement\n"
"string. For example, setting\n"
"`quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` would use the value\n"
"`/example/{jellybeans}` for the uri attribute any time the requested uri matches `/example/prime/[0-9]+`."
msgstr "正しいURLが特定できない場合は、 `quarkus.micrometer.binder.http-server.match-patterns` プロパティを使用します。このプロパティには、単純な正規表現パターンと置換文字列の関連性を定義するコンマ区切りのリストを指定できます。例えば、 `quarkus.micrometer.binder.http-server.match-patterns=/example/prime/[0-9]+=/example/{jellybeans}` を設定すると、要求された uri が `/example/prime/[0-9]+` に一致した場合、uri 属性に `/example/{jellybeans}` の値が使用されます。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Using MeterFilter to configure metrics"
msgstr "MeterFilter を使ってメトリクスを設定する"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer uses `MeterFilter` instances to customize the metrics emitted by `MeterRegistry` instances.\n"
"The Micrometer extension will detect `MeterFilter` CDI beans and use them when initializing `MeterRegistry`\n"
"instances."
msgstr "Micrometerは `MeterFilter` インスタンスを使って、 `MeterRegistry` インスタンスが出力するメトリクスをカスタマイズします。 Micrometer エクステンションは、 `MeterFilter` のCDI Beanを検出して、 `MeterRegistry` インスタンスを初期化するときにそれを使います。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"In this example, a singleton CDI bean will produce two different `MeterFilter` beans. One will be applied only to\n"
"Prometheus `MeterRegistry` instances (using the `@MeterFilterConstraint` qualifier), and another will be applied\n"
"to all `MeterRegistry` instances. An application configuration property is also injected and used as a tag value.\n"
"Additional examples of MeterFilters can be found in the\n"
"link:https://micrometer.io/docs/concepts[official documentation]."
msgstr "この例では、シングルトン CDI Beanは、2 つの異なる `MeterFilter` Beanを生成します。1 つは Prometheus `MeterRegistry` インスタンスのみに適用され ( `@MeterFilterConstraint` 修飾子を使用)、もう 1 つはすべての `MeterRegistry` インスタンスに適用されます。アプリケーション設定プロパティーも注入され、タグ値として使用されます。MeterFiltersのその他の例は、次のリンクにあります：link:https://micrometer.io/docs/concepts[公式ドキュメント] 。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Does Micrometer support annotations?"
msgstr "Micrometerはアノテーションをサポートしていますか？"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Micrometer does define two annotations, `@Counted` and `@Timed`, that can be added to methods. The `@Timed` annotation\n"
"will wrap the execution of a method and will emit the following tags in addition to any tags defined on the\n"
"annotation itself: class, method, and exception (either \"none\" or the simple class name of a detected exception)."
msgstr "Micrometerでは、メソッドに追加できる2つのアノテーション、 `@Counted` と `@Timed` が定義されています。 `@Timed` アノテーションは、メソッドの実行をラップし、アノテーション自体に定義されているタグに加えて、次のタグを出力します：class、method、exception（\"none \"または検出された例外のシンプルなクラス名）。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Using annotations is limited, as you can't dynamically assign meaningful tag values. Also note that many methods, e.g.\n"
"REST endpoint methods or Vert.x Routes, are counted and timed by the micrometer extension out of the box."
msgstr "意味のあるタグ値を動的に割り当てることができないため、アノテーションの使用には制限があります。また、RESTエンドポイント・メソッドやVert.x Routesなどの多くのメソッドは、最初から無設定でmicrometerエクステンションによってカウントされ、時間が計測されることに注意してください。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Using other Registry implementations"
msgstr "他のレジストリー実装の使用"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"If you aren't using Prometheus, you have a few options. Some Micrometer registry implementations\n"
"have been wrapped in\n"
"https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverse extensions].\n"
"To use the Micrometer StackDriver MeterRegistry, for example, you would use the\n"
"`quarkus-micrometer-registry-stackdriver` extension:"
msgstr "Prometheusを使用していない場合は、いくつかの選択肢があります。いくつかのMicrometerのレジストリーの実装は、 link:https://github.com/quarkiverse/quarkiverse-micrometer-registry[Quarkiverseのエクステンション] でラップされています。たとえば、Micrometer StackDriver MeterRegistryを使用するには、 `quarkiverse-micrometer-registry-stackdriver` エクステンションを使用します。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"If the Micrometer registry you would like to use does not yet have an associated extension,\n"
"use the `quarkus-micrometer` extension and bring in the packaged MeterRegistry dependency directly:"
msgstr "使用したい Micrometer レジストリに関連するエクステンションがまだない場合は、 `quarkus-micrometer` エクステンションを使用して、パッケージ化された MeterRegistry の依存関係を直接取り込んでください。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"You will then need to specify your own provider to configure and initialize the\n"
"MeterRegistry, as discussed in the next section."
msgstr "次に、次のセクションで説明するように、MeterRegistry を設定して初期化するために、独自のプロバイダを指定する必要があります。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Creating a customized MeterRegistry"
msgstr "カスタマイズされたMeterRegistryの作成"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Use a custom `@Produces` method to create and configure a customized `MeterRegistry` if you need to."
msgstr "必要に応じて、カスタム `@Produces` メソッドを使用して、カスタマイズされた `MeterRegistry` を作成して設定します。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "The following example customizes the line format used for StatsD:"
msgstr "以下の例では、StatsDで使用される行フォーマットをカスタマイズしています。"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"This example corresponds to the following instructions in the Micrometer documentation:\n"
"https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"
msgstr "この例は、Micrometerのドキュメントにある以下の指示に対応しています: https://micrometer.io/docs/registry/statsD#_customizing_the_metrics_sink"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"Note that the method returns the specific type of `MeterRegistry` as a `@Singleton`. Use MicroProfile Config\n"
"to inject any configuration attributes you need to configure the registry. Most Micrometer registry extensions,\n"
"like `quarkus-micrometer-registry-statsd`, define a producer for registry-specific configuration objects\n"
"that are integrated with the Quarkus configuration model."
msgstr "このメソッドは、 `MeterRegistry` の特定の型を `@Singleton` として返すことに注意してください。レジストリーを設定するために必要な設定属性を注入するには、MicroProfile Configを使用します。 `quarkiverse-micrometer-registry-statsd` のようなほとんどのMicrometerのレジストリーエクステンションでは、Quarkusの設定モデルと統合されたレジストリー固有の設定オブジェクトのプロデューサを定義しています。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Support for the MicroProfile Metrics API"
msgstr "MicroProfile Metrics API のサポート"

#: _versions/2.7/guides/micrometer.adoc
msgid ""
"If you use the MicroProfile Metrics API in your application, the Micrometer extension will create an adaptive\n"
"layer to map those metrics into the Micrometer registry. Note that naming conventions between the two\n"
"systems is different, so the metrics that are emitted when using MP Metrics with Micrometer will change.\n"
"You can use a `MeterFilter` to remap names or tags according to your conventions."
msgstr "アプリケーションで MicroProfile Metrics API を使用している場合、Micrometer エクステンションは、これらのメトリクスを Micrometer レジストリにマッピングするための適応レイヤーを作成します。2 つのシステム間の命名規則は異なるので、MP MetricsをMicrometerと一緒に使用した場合に出力されるメトリクスは変化します。MeterFilters を使用して名前やタグをダッシュボードが必要とするものに再マッピングすることができます。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "Ensure the following dependency is present in your build file if you require the MicroProfile Metrics API:"
msgstr "MicroProfile Metrics APIを必要とする場合は、ビルドファイルに以下の依存関係が存在することを確認してください。"

#. type: Plain text
#: _versions/2.7/guides/micrometer.adoc
msgid "The MP Metrics API compatibility layer will be moved to a different extension in the future."
msgstr "MP Metrics API互換性レイヤは、将来的には別のエクステンションに移される予定です。"

#. type: Title ==
#: _versions/2.7/guides/micrometer.adoc
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

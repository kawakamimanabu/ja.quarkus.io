msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Getting Started to SmallRye Reactive Messaging with RabbitMQ"
msgstr "RabbitMQによるSmallRyeリアクティブメッセージング入門"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "This guide demonstrates how your Quarkus application can utilize SmallRye Reactive Messaging to interact with RabbitMQ."
msgstr "このガイドでは、QuarkusアプリケーションがSmallRye Reactive Messagingを利用してRabbitMQと対話する方法を説明します。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"In this guide, we are going to develop two applications communicating with a RabbitMQ broker.\n"
"The first application sends a _quote request_ to the RabbitMQ _quote requests_ exchange and consumes messages from the _quote_ queue.\n"
"The second application receives the _quote request_ and sends a _quote_ back."
msgstr "このガイドでは、RabbitMQ ブローカーと通信する 2 つのアプリケーションを開発します。1つ目のアプリケーションは、RabbitMQの _見積要求_ エクスチェンジに _見積要求_ を送信し、 _見積_ キューからメッセージを消費します。2 番目のアプリケーションは、 _見積要求_ を受信し、 _見積_ を送り返します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.\n"
"For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.\n"
"At the same time the generated request id is sent to the `quote-requests` exchange."
msgstr "最初のアプリケーションである `producer` では、ユーザーが HTTP エンドポイントを介していくつかの見積を要求することができます。各見積要求に対して、ランダムな識別子が生成され、ユーザーに返され、見積要求が _pending_ されます。同時に、生成されたリクエストIDは、 `quote-requests` のエクスチェンジに送信されます。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to an exchange named `quotes`."
msgstr "2 番目のアプリケーションである `processor` は、 `quote-requests` のキューから読み取った見積にランダムな価格を付けて、 `quotes` という名前のエクスチェンジに送信します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.\n"
"The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr "最後に、`producer` は見積りを読み取り、サーバーから送信されたイベントを使用してこれらをブラウザーに送信します。したがって、ユーザーには、見積り価格が _pending_ から受信した価格にリアルタイムで更新されていることがわかります。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create applications step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "The solution is located in the `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[directory]."
msgstr "このソリューションは `rabbitmq-quickstart` {quickstarts-tree-url}/rabbitmq-quickstart[ディレクトリ]にあります。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr "まず、_プロデューサー_ と _プロセッサー_ の 2 つのプロジェクトを作成する必要があります。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "To create the _producer_ project, in a terminal run:"
msgstr "ターミナルで _プロデューサー_ プロジェクトを作成するには、次のコマンドを実行します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr "このコマンドは、プロジェクト構造を作成し、使用する 2 つの Quarkus エクステンションを選択します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "The Reactive Messaging RabbitMQ connector"
msgstr "Reactive Messaging RabbitMQコネクター"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "RESTEasy Reactive and it's Jackson support to handle JSON payloads"
msgstr "RESTEasy ReactiveとJSONペイロードを扱うためのJacksonサポート"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "To create the _processor_ project, from the same directory, run:"
msgstr "同じディレクトリーから _processor_ プロジェクトを作成するには、次のコマンドを実行します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "At that point you should have the following structure:"
msgstr "その時点で、以下の構造になっているはずです。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Open the two projects in your favorite IDE."
msgstr "お気に入りの IDE で 2 つのプロジェクトを開きます。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "The Quote object"
msgstr "見積りオブジェクト"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"The `Quote` class will be used in both `producer` and `processor` projects.\n"
"For the sake of simplicity we will duplicate the class.\n"
"In both projects, create the `src/main/java/org/acme/rabbitmq/model/Quote.java` file, with the following content:"
msgstr "`Quote` クラスは、 `producer` と `processor` の両方のプロジェクトで使用されます。簡単にするために、このクラスを複製します。両方のプロジェクトで、次のような内容の `src/main/java/org/acme/rabbitmq/model/Quote.java` ファイルを作成します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"JSON representation of `Quote` objects will be used in messages sent to the RabbitMQ queues\n"
"and also in the server-sent events sent to browser clients."
msgstr "`Quote` オブジェクトのJSON表現は、RabbitMQキューに送信されるメッセージや、ブラウザクライアントに送信されるserver-sent eventで使用されます。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Quarkus has built-in capabilities to deal with JSON RabbitMQ messages."
msgstr "Quarkusには、JSONのRabbitMQメッセージを処理する機能が組み込まれています。"

#. type: Block title
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "@RegisterForReflection"
msgstr "@RegisterForReflection"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"The `@RegisterForReflection` annotation instructs Quarkus to include the class (including fields and methods) when building the native executable.\n"
"This will be useful later when we run the applications as native executables inside containers.\n"
"Without, the native compilation would remove the fields and methods during the dead-code elimination phase."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブ実行可能ファイルをビルドするときにクラス (フィールドとメソッドを含む) を含めるように Quarkus に指示します。これは、後でアプリケーションをコンテナー内のネイティブ実行可能ファイルとして実行するときに役立ちます。これがないと、ネイティブコンパイルによってデッドコード削除フェーズ中にフィールドとメソッドが削除されます。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Sending quote request"
msgstr "見積りリクエストの送信"

#: _versions/2.7/guides/rabbitmq.adoc
msgid "Inside the `producer` project locate the generated  `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` file, and update the content to be:"
msgstr "`producer` プロジェクト内で、生成された `src/main/java/org/acme/rabbitmq/producer/QuotesResource.java` ファイルを探し、コンテンツを次のように更新します:"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr "リアクティブメッセージングの `Emitter` を挿入して、`quote-requests` チャネルにメッセージを送信します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "On a post request, generate a random UUID and send it to the RabbitMQ queue using the emitter."
msgstr "投稿リクエストで、ランダムなUUIDを生成し、エミッターを使ってRabbitMQのキューに送信します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"This channel is mapped to a RabbitMQ exchange using the configuration we will add to the `application.properties` file.\n"
"Open the `src/main/resource/application.properties` file and add:"
msgstr "このチャンネルは、 `application.properties` ファイルの設定を使用して、RabbitMQ のエクスチェンジにマッピングされます。 `src/main/resource/application.properties` ファイルを開き、次のように追加します:"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"All we need to specify is the `smallrye-rabbitmq` connector.\n"
"By default, reactive messaging maps the channel name `quote-requests` to the same RabbitMQ exchange name."
msgstr "指定する必要があるのは、 `smallrye-rabbitmq` のコネクタだけです。デフォルトでは、リアクティブ・メッセージングは、チャネル名 `quote-requests` を同じ RabbitMQ のエクスチェンジ名にマッピングします。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Processing quote requests"
msgstr "見積りリクエストの処理"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Now let's consume the quote request and give out a price.\n"
"Inside the `processor` project, locate the `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` file and add the following:"
msgstr "それでは、見積依頼を消費して、価格を出してみましょう。 `processor` プロジェクト内で、 `src/main/java/org/acme/rabbitmq/processor/QuoteProcessor.java` ファイルを探し、以下を追加します:"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr "メソッドが `requests` チャネルからのアイテムを消費することを示します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr "メソッドによって返されるオブジェクトが `quotes` チャネルに送信されることを示します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr "処理が _blocking_ であり、呼び出し元のスレッドで実行できないことを示します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "The `process` method is called for every RabbitMQ message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` exchange."
msgstr "`process` メソッドは、 `quote-requests` キューからの RabbitMQ のメッセージごとに呼び出され、 `Quote` オブジェクトを `quotes` エクスチェンジに送信します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"As with the previous example we need to configure the connectors in the `application.properties` file.\n"
"Open the `src/main/resources/application.properties` file and add:"
msgstr "前述の例と同様に、 `application.properties` ファイルでコネクタを設定する必要があります。 `src/main/resources/application.properties` ファイルを開き、次のように追加します:"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Note that in this case we have one incoming and one outgoing connector configuration, each one distinctly named.\n"
"The configuration keys are structured as follows:"
msgstr "この場合、1 つの受信コネクター設定と 1 つの送信コネクター設定があり、それぞれに異なる名前が付けられていることに注意してください。設定キーは次のように構成されています。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "The `channel-name` segment must match the value set in the `@Incoming` and `@Outgoing` annotation:"
msgstr "`channel-name` セグメントは、 `@Incoming` および `@Outgoing` アノテーションで設定された値と一致する必要があります。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "`quote-requests` -> RabbitMQ queue from which we read the quote requests"
msgstr "`quote-requests` → 見積依頼を読み出すRabbitMQのキュー"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "`quotes` -> RabbitMQ exchange in which we write the quotes"
msgstr "`quotes` → 見積を書き込むRabbitMQのエクスチェンジ"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Receiving quotes"
msgstr "見積りの受信"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Back to our `producer` project.\n"
"Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr "`producer` プロジェクトに戻ります。引用符を使用するように `QuotesResource` を変更し、それを HTTP エンドポイントにバインドして、クライアントにイベントを送信しましょう。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr "`@Channel` 修飾子を使用して `quotes` チャネルを挿入します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr "`Server Sent Events` を使用してコンテンツが送信されたことを示します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Returns the stream (_Reactive Stream_)"
msgstr "ストリーム (_Reactive Stream_) を返します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Again we need to configure the incoming `quotes` channel inside `producer` project.\n"
"Add the following inside `application.properties` file:"
msgstr "再度、 `producer` プロジェクト内で `quotes` の受信チャンネルを設定する必要があります。 `application.properties` ファイル内に以下を追加します:"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "The HTML page"
msgstr "HTML ページ"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr "最後に、SSE を使って変換された価格を読み込む HTML ページです。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr "`producer` プロジェクト内に、次の内容で `src/main/resources/META-INF/resources/quotes.html` ファイルを作成します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Nothing spectacular here.\n"
"On each received quote, it updates the page."
msgstr "ここでは、特筆すべきものは何もありません。受け取った見積もりごとに、ページが更新されます。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Get it running"
msgstr "実行"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "You just need to run both applications using:"
msgstr "以下を使用して両方のアプリケーションを実行する必要があります。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "And, in a separate terminal:"
msgstr "そして、別の端末で以下を実行します。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Quarkus starts a RabbitMQ broker automatically, configures the application and shares the broker instance between different applications.\n"
"See xref:rabbitmq-dev-services.adoc[Dev Services for RabbitMQ] for more details."
msgstr "Quarkusは、RabbitMQブローカーを自動的に起動し、アプリケーションを構成し、異なるアプリケーション間でブローカーインスタンスを共有します。詳細は、 link:rabbitmq-dev-services.html[RabbitMQ用のDev Services]を参照してください。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr "ブラウザーで `http://localhost:8080/quotes.html` を開き、ボタンをクリックして見積りをリクエストします。"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "JVM またはネイティブモードでの実行"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"When not running in dev or test mode, you will need to start your RabbitMQ broker.\n"
"You can follow the instructions from the https://hub.docker.com/_/rabbitmq[RabbitMQ Docker website] or create a `docker-compose.yaml` file with the following content:"
msgstr "開発モードやテストモードで実行していないときは、RabbitMQブローカーを起動する必要があります。 link:https://hub.docker.com/_/rabbitmq[RabbitMQ Dockerウェブサイト]の指示に従うか、以下の内容の `docker-compose.yaml` ファイルを作成します:"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Note how the RabbitMQ broker location is configured.\n"
"The `rabbitmq-host` and `rabbitmq-port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr "RabbitMQ ブローカーのロケーションがどのように構成されているかに注意してください。 `rabbitmq-host` と `rabbitmq-port` プロパティ( 環境変数だと `AMQP_HOST` と `AMQP_PORT` ) でロケーションを設定します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr "まず、アプリケーションを停止したことを確認し、次のコマンドを使用して両方のアプリケーションを JVM モードでビルドします。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"Once packaged, run `docker compose up --build`.\n"
"The UI is exposed on http://localhost:8080/quotes.html"
msgstr "パッケージ化したら、`docker compose up --build` を実行します。UI は http://localhost:8080/quotes.html で公開されています"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "To run your applications as native, first we need to build the native executables:"
msgstr "アプリケーションをネイティブとして実行するには、最初にネイティブ実行可能ファイルをビルドする必要があります。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.\n"
"Then, run the system using:"
msgstr "`-Dquarkus.native.container-build=true` は、コンテナー内で実行できる Linux 64 ビットのネイティブ実行可能ファイルをビルドするように Quarkus に指示します。次に、以下を使用してシステムを実行します。"

#. type: Plain text
#: _versions/2.7/guides/rabbitmq.adoc
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr "以前と同様に、UI は http://localhost:8080/quotes.html で公開されています"

#. type: Title ==
#: _versions/2.7/guides/rabbitmq.adoc
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"This guide has shown how you can interact with RabbitMQ using Quarkus.\n"
"It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr "このガイドでは、Quarkusを使ってRabbitMQと対話する方法を紹介しました。 https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging]を利用して、データストリーミングアプリケーションを構築しています。"

#: _versions/2.7/guides/rabbitmq.adoc
msgid ""
"If you did the Kafka, you have realized that it's the same code.\n"
"The only difference is the connector configuration and the JSON mapping."
msgstr "Kafkaをやった方は、同じコードであることに気づいたと思います。唯一の違いは、コネクタの設定とJSONのマッピングです。"

msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Build, Sign and Encrypt JSON Web Tokens"
msgstr "JSONウェブトークン (JWT) のビルド、署名、暗号化"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "According to link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519], JSON Web Token (JWT) is a compact, URL-safe means of representing claims which are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code(MAC) and/or encrypted."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7519[RFC7519] によると、JSON Web Token (JWT) は、使用される JSON オブジェクトとしてエンコードされたクレームを表すコンパクトで URL セーフな手段です。JSON Web Signature (JWS) 構造のペイロードとして、または JSON Web Encryption (JWE) 構造のプレーンテキストとして、クレームにデジタル署名したり、メッセージ認証コード (MAC) で完全に保護したり、暗号化したりできます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signing the claims is used most often to secure the claims. What is known today as a JWT token is typically produced by signing the claims in a JSON format using the steps described in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature] specification."
msgstr "クレームへの署名は、クレームを保護するために最も頻繁に使用されます。今日において JWT トークンとして知られているものは、通常、link:https://tools.ietf.org/html/rfc7515[JSON Web 署名] の仕様で説明されている手順を使用して、JSON 形式でクレームに署名することによって生成されます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "However, when the claims are sensitive, their confidentiality can be guaranteed by following the steps described in the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption] specification to produce a JWT token with the encrypted claims."
msgstr "ただし、クレームが機密である場合は、link:https://tools.ietf.org/html/rfc7516[JSON Web 暗号化] の仕様に記載されている手順に従って暗号化されたクレームを含む JWT を生成することにより、機密性を保証できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Finally, both the confidentiality and integrity of the claims can be further enforced by signing them first and then encrypting the nested JWT token."
msgstr "さらに、クレームに署名してからネストされた JWT トークンを暗号化することにより、クレームの機密性と整合性の両方を強化できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT Build provides an API for securing JWT claims using all of these options. link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] is used internally to support this API."
msgstr "SmallRye JWT Build は、これらすべてのオプションを使用して JWT クレームを保護するための API を提供します。link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] は、この API をサポートするために内部で使用されます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Dependency"
msgstr "依存関係"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"Note you can use SmallRye JWT Build API without having to create MicroProfile JWT endpoints supported by `quarkus-smallrye-jwt`.\n"
"It can also be excluded from `quarkus-smallrye-jwt` if MP JWT endpoints do not need to generate JWT tokens."
msgstr ""

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Create JwtClaimsBuilder and set the claims"
msgstr "JwtClaimsBuilder の作成とクレームの設定"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The first step is to initialize a `JwtClaimsBuilder` using one of the options below and add some claims to it:"
msgstr "最初のステップとして、以下のオプションの 1 つを使用して `JwtClaimsBuilder` を初期化し、それにいくつかのクレームを追加します:"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The API is fluent so the builder initialization can be done as part of the fluent API sequence."
msgstr "これは fluent API であるため、ビルダーの初期化は fluent API シーケンスの一部として実行できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The builder will also set `iat` (issued at) to the current time, `exp` (expires at) to 5 minutes away from the current time (it can be customized with the `smallrye.jwt.new-token.lifespan` property) and `jti` (unique token identifier) claims if they have not already been set."
msgstr "ビルダーは、`iat` (発行日) を現在の時刻に設定し、`exp` (有効期限) を現在の時刻から 5 分後に設定し (`smallrye.jwt.new-token.lifespan` プロパティーでカスタマイズ可能)、未設定の場合は `jti` (一意のトークン識別子) クレームも設定します。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "One can also configure `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` properties and skip setting the issuer and audience directly with the builder API."
msgstr "`smallrye.jwt.new-token.issuer` プロパティーと `smallrye.jwt.new-token.audience` プロパティーを設定し、ビルダー API を使用した発行者とオーディエンスの直接設定を省略することもできます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The next step is to decide how to secure the claims."
msgstr "次のステップでは、クレームの保護方法を決定します。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Sign the claims"
msgstr "クレームへの署名"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The claims can be signed immediately or after the `JSON Web Signature` headers have been set:"
msgstr "クレームは、すぐに署名するか、 `JSON Web Signature` ヘッダーが設定された後に署名できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note the `alg` (algorithm) header is set to `RS256` by default. Signing key identifier (`kid` header) does not have to be set if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr "`alg` (アルゴリズム) ヘッダーはデフォルトで `RS256` に設定されていることに注意してください。 `kid` プロパティーを含む単一の JSON Web Key (JWK) を使用する場合、署名キー識別子 ( `kid` ヘッダー) を設定する必要はありません。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"RSA and Elliptic Curve (EC) private keys as well as symmetric secret keys can be used to sign the claims.\n"
"`ES256` and `HS256` are the default algorithms for EC private and symmetric key algorithms respectively."
msgstr "クレームの署名には、RSAや楕円曲線（EC）の秘密鍵のほか、対称性のある秘密鍵も使用できます。 `ES256` と `HS256` は、それぞれEC秘密鍵と対称鍵アルゴリズムのためのdefautアルゴリズムです。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can customize the signature algorithm, for example:"
msgstr "署名アルゴリズムはカスタマイズできます。以下はその例です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Alternatively you can use a `smallrye.jwt.new-token.signature-algorithm` property:"
msgstr "または、 `smallrye.jwt.new-token.signature-algorithm` プロパティーを使用することもできます:"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "and write a simpler API sequence:"
msgstr "より単純な API シーケンスを記述します。"

#: _versions/3.15/guides/security-jwt-build.adoc
#, fuzzy
msgid "Note the `sign` step can be combined with the <<encrypt-claims,encrypt>> step to produce `inner-signed and encrypted` tokens, see <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr "`sign` ステップは、 `inner-signed and encrypted` トー xref:innersign-encrypt-claims[クン] を生成するために xref:encrypt-claims[encrypt] ステップと組み合わせることができることに注意してください。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Encrypt the claims"
msgstr "クレームの暗号化"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"The claims can be encrypted immediately or after the `JSON Web Encryption` headers have been set the same way as they can be signed.\n"
"The only minor difference is that encrypting the claims always requires a `jwe()` `JwtEncryptionBuilder` transition given that the API has been optimized to support signing and inner-signing of the claims."
msgstr "クレームは、すぐに暗号化することも、 `JSON Web Encryption` ヘッダーを署名するのと同じ方法で設定した後に暗号化することもできます。唯一の小さな違いは、API がクレームの署名と内部署名をサポートするように最適化されている場合、クレームの暗号化には常に `jwe()` `JwtEncryptionBuilder` 遷移が必要になることです。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note the `alg` (key management algorithm) header is set to `RSA-OAEP` and the `enc` (content encryption header) is set to `A256GCM` by default."
msgstr "デフォルトでは、`alg` (キー管理アルゴリズム) ヘッダーが `RSA-OAEP` に設定され、`enc` (コンテンツ暗号化ヘッダー) が `A256GCM` に設定されていることに注意してください。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"RSA and Elliptic Curve (EC) public keys as well as symmetric secret keys can be used to encrypt the claims.\n"
"`ECDH-ES` and `A256KW` are the default algorithms for EC public and symmetric key encryption algorithms respectively."
msgstr "RSA および Elliptic Curve (EC) 公開鍵、および対称秘密鍵を使用して、クレームを暗号化できます。`ECDH-ES` と `A256KW` は、それぞれ EC 公開鍵と対称鍵の暗号化アルゴリズムのデフォルトアルゴリズムです。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Note two encryption operations are done when creating an encrypted token:"
msgstr "暗号化されたトークンを作成する際には、2つの暗号化処理が行われることに注意してください。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"1) the generated content encryption key is encrypted by the key supplied with the API using the key encryption algorithm such as `RSA-OAEP`\n"
"2) the claims are encrypted by the generated content encryption key using the content encryption algorithm such as `A256GCM`."
msgstr ""
"1) 生成されたコンテンツ暗号化キーは、 `RSA-OAEP` などのキー暗号化アルゴリズムを使用して、API で提供されたキーによって暗号化されます。 \n"
"2) クレームは、 `A256GCM` などのコンテンツ暗号化アルゴリズムを使用して、生成されたコンテンツ暗号化キーによって暗号化されます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can customize the key and content encryption algorithms, for example:"
msgstr "キーとコンテンツの暗号化アルゴリズムはカスタマイズできます。以下はその例です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Alternatively you can use `smallrye.jwt.new-token.key-encryption-algorithm` and `smallrye.jwt.new-token.content-encryption-algorithm` properties to customize the key and content encryption algorithms:"
msgstr "また、 `smallrye.jwt.new-token.key-encryption-algorithm` と `smallrye.jwt.new-token.content-encryption-algorithm` のプロパティでキーとコンテンツの暗号化アルゴリズムをカスタマイズすることが可能です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"Note that when the token is directly encrypted by the public RSA or EC key it is not possible to verify which party sent the token.\n"
"Therefore, the secret keys should be preferred for directly encrypting the tokens, for example, when using JWT as cookies where a secret key is managed by the Quarkus endpoint with only this endpoint being both a producer and a consumer of the encrypted token."
msgstr "トークンが公開 RSA または EC キーによって直接暗号化されている場合、トークンの送信元は確認できないことに注意してください。したがって、トークンを直接暗号化するには秘密鍵を使用する必要があります。たとえば、JWT を Cookie として使用する場合、秘密鍵は Quarkus エンドポイントによって管理され、このエンドポイントのみが暗号化されたトークンのプロデューサーとコンシューマーになります。"

#: _versions/3.15/guides/security-jwt-build.adoc
#, fuzzy
msgid "If you would like to use RSA or EC public keys to encrypt the token then it is recommended to sign the token first if the signing key is available, see the next <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr "トークンを暗号化するためにRSAまたはEC公開鍵を使用したい場合は、署名鍵が利用可能であれば、トークンに最初に署名することをお勧めします。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Sign the claims and encrypt the nested JWT token"
msgstr "クレームへの署名とネストされた JWT トークンの暗号化"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The claims can be signed and then the nested JWT token encrypted by combining the sign and encrypt steps."
msgstr "クレームに署名してから、署名と暗号化の手順を組み合わせて、ネストされた JWT トークンを暗号化できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Fast JWT Generation"
msgstr "JWT の迅速な生成"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "If `smallrye.jwt.sign.key.location` or/and `smallrye.jwt.encrypt.key.location` properties are set then one can secure the existing claims (resources, maps, JsonObjects) with a single call:"
msgstr "`smallrye.jwt.sign.key.location` や `smallrye.jwt.encrypt.key.location` プロパティーが設定されている場合、既存のクレーム (リソース、マップ、JsonObjects) を 1 回の呼び出しで保護できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "As mentioned above, `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer) and `aud` (audience) claims will be added if needed."
msgstr "上記のように、必要に応じて、 `iat` (発行日)、 `exp` (有効期限)、 `jti` (トークン識別子)、 `iss` (発行者)、および `aud` (オーディエンス) クレームが追加されます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Dealing with the keys"
msgstr "キーの取り扱い"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties can be used to point to signing and encryption key locations. The keys can be located on the local file system, classpath, or fetched from the remote endpoints and can be in `PEM` or `JSON Web Key` (`JWK`) formats. For example:"
msgstr "`smallrye.jwt.sign.key.location` プロパティーと `smallrye.jwt.encrypt.key.location` プロパティーを使用して、署名キーと暗号化キーの場所を指定できます。キーは、ローカルファイルシステムやクラスパスに配置するか、リモートエンドポイントから取得でき、 `PEM` または `JSON Web Key` ( `JWK` ) 形式にすることができます。以下はその例です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can also use MicroProfile `ConfigSource` to fetch the keys from the external services such as link:{vault-guide}[HashiCorp Vault] or other secret managers and use `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties instead:"
msgstr "MicroProfile `ConfigSource` を使用して、link:{vault-guide}[HashiCorp Vault] や他のシークレットマネージャーなどの外部サービスからキーを取得し、代わりに `smallrye.jwt.sign.key` プロパティーと `smallrye.jwt.encrypt.key` プロパティーを使用することもできます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid ""
"where both `private.key.from.vault` and `public.key.from.vault` are the `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`.\n"
"`smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` can also contain only the Base64-encoded private or public keys values."
msgstr "この場合、`private.key.from.vault` と `public.key.from.vault` はどちらも、カスタムの `ConfigSource` によって提供される `PEM` または `JWK` 形式のキー値です。`smallrye.jwt.sign.key` と `smallrye.jwt.encrypt.key` には、Base64 でエンコードされた秘密鍵または公開鍵の値のみ含めることができます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "However, please note, directly inlining the private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only if you need to fetch a signing key value from the remote secret manager."
msgstr "ただし、設定に秘密鍵を直接インライン化することはお勧めしません。リモートシークレットマネージャーから署名キー値を取得する必要がある場合にのみ、`smallrye.jwt.sign.key` プロパティーを使用してください。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "The keys can also be loaded by the code which builds the token and supplied to JWT Build API."
msgstr "キーは、JWT ビルド API に提供される、トークンをビルドするコードによってロードすることもできます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "If you need to sign and/or encrypt the token using the symmetric secret key then consider using `io.smallrye.jwt.util.KeyUtils` to generate a SecretKey of the required length."
msgstr "対称秘密鍵を使用してトークンに署名および/または暗号化する必要がある場合は、`io.smallrye.jwt.util.KeyUtils` を使用して必要な長さの秘密鍵を生成することを検討してください。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "For example, one needs to have a 64 byte key to sign using the `HS512` algorithm (`512/8`) and a 32 byte key to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr "たとえば、`HS512` アルゴリズム (`512/8`) を使用して署名するには 64 バイトのキーが必要であり、`A256KW` アルゴリズム (`256/8`) を使用してコンテンツ暗号化キーを暗号化するには 32 バイトのキーが必要です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "You can also consider using a `JSON Web Key` (JWK) or `JSON Web Key Set` (JWK Set) format to store a secret key on a secure file system and refer to it using either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties, for example:"
msgstr "また、`JSON Web Key` (JWK) または `JSON Web Key Set` (JWK Set) 形式を使用して秘密鍵を安全なファイルシステムに保存し、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` プロパティーを使用してそれを参照する方法もあります。以下はその例です。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "or"
msgstr "or"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`io.smallrye.jwt.util.KeyUtils` can also be used to generate a pair of asymmetric RSA or EC keys. These keys can be stored using a `JWK`, `JWK Set` or `PEM` format."
msgstr "`io.smallrye.jwt.util.KeyUtils` を使用して、非対称 RSA または EC キーのペアを生成することもできます。これらのキーは、 `JWK` 、 `JWK Set` 、または `PEM` 形式を使用して保存できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT Builder configuration"
msgstr "SmallRye JWT Builder の設定"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "SmallRye JWT supports the following properties which can be used to customize the way claims are signed and/or encrypted:"
msgstr "SmallRye JWT は、クレームの署名や暗号化の方法をカスタマイズするために使用できる次のプロパティーをサポートしています。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Property Name"
msgstr "プロパティ名"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Default"
msgstr "デフォルト"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Description"
msgstr "説明"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key.location"
msgstr "smallrye.jwt.sign.key.location"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`none`"
msgstr "`none`"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Location of a private key which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なし `sign()` または `innerSign()` メソッドが呼び出されたときに、クレームに署名するために使用される秘密鍵の場所。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key"
msgstr "smallrye.jwt.sign.key"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "none"
msgstr "none"

#: _versions/3.15/guides/security-jwt-build.adoc
#, fuzzy
msgid "Key value which will be used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なしの `sign()` あるいは `innerSign()` メソッドが呼ばれたときに、クレームの署名に使われる鍵の値。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.key.id"
msgstr "smallrye.jwt.sign.key.id"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signing key identifier which is checked only when JWK keys are used."
msgstr "JWK キーを使用する場合にのみチェックされる署名キー識別子。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key.location"
msgstr "smallrye.jwt.encrypt.key.location"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Location of a public key which will be used to encrypt the claims or inner JWT when a no-argument `encrypt()` method is called."
msgstr "引数無し `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用される公開鍵の位置。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.sign.relax-key-validation"
msgstr "smallrye.jwt.sign.relax-key-validation"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "false"
msgstr "false"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Relax the validation of the signing keys."
msgstr "署名キーの検証を緩和します。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key"
msgstr "smallrye.jwt.encrypt.key"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Key value which will be used to encrypt the claims or inner JWT when a no-argument encrypt() method is called."
msgstr "引数なし `encrypt()` メソッドが呼び出された際に、クレームまたは内部 JWT を暗号化するために使用されるキー値。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.key.id"
msgstr "smallrye.jwt.encrypt.key.id"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Encryption key identifier which is checked only when JWK keys are used."
msgstr "JWK キーを使用する場合にのみチェックされる暗号化キー識別子。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.encrypt.relax-key-validation"
msgstr "smallrye.jwt.encrypt.relax-key-validation"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Relax the validation of the encryption keys."
msgstr "暗号化キーの検証を緩和します。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.signature-algorithm"
msgstr "smallrye.jwt.new-token.signature-algorithm"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "RS256"
msgstr "RS256"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Signature algorithm. This property will be checked if the JWT signature builder has not already set the signature algorithm."
msgstr "署名アルゴリズム。このプロパティーは、JWT 署名ビルダーが署名アルゴリズムをまだ設定していない場合にチェックされます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.key-encryption-algorithm"
msgstr "smallrye.jwt.new-token.key-encryption-algorithm"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "RSA-OAEP"
msgstr "RSA-OAEP"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Key encryption algorithm. This property will be checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr "キー暗号化アルゴリズム。このプロパティーは、JWT 暗号化ビルダーがキー暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.content-encryption-algorithm"
msgstr "smallrye.jwt.new-token.content-encryption-algorithm"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "A256GCM"
msgstr "A256GCM"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Content encryption algorithm. This property will be checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr "コンテンツ暗号化アルゴリズム。このプロパティーは、JWT 暗号化ビルダーがコンテンツ暗号化アルゴリズムをまだ設定していない場合にチェックされます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.lifespan"
msgstr "smallrye.jwt.new-token.lifespan"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "300"
msgstr "300"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token lifespan in seconds which will be used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr "exp (expiry) クレームがまだ設定されていない場合、このクレーム値を計算するために使用される トークン生存期間の秒数。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.issuer"
msgstr "smallrye.jwt.new-token.issuer"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token issuer which can be used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr "`iss` (発行者)クレームがまだ設定されていない場合に、このクレーム値を設定するために使用できるトークン発行者。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.audience"
msgstr "smallrye.jwt.new-token.audience"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Token audience which can be used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr "`aud` (オーディエンス) クレームがまだ設定されていない場合に、このクレーム値を設定するために使用できるトークンオーディエンス。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.new-token.override-matching-claims"
msgstr "smallrye.jwt.new-token.override-matching-claims"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr "既に初期化されている `iss` （発行者）と `aud` （視聴者）のクレームを `smallrye.jwt.new-token.issuer` と `smallrye.jwt.new-token.audience` の値で上書きするために、 このプロパティを `true` に設定します。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.type"
msgstr "smallrye.jwt.keystore.type"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "`JKS`"
msgstr "`JKS`"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property can be used to customize a keystore type if either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` or both of these properties point to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` のいずれか、あるいはこれらのプロパティの両方が `KeyStore` ファイルを指している場合に、キーストアタイプをカスタマイズするために使用することができます。このプロパティが設定されていない場合、ファイル名をチェックしてキーストアの種類を決定し、デフォルトで `JKS` に設定されます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.provider"
msgstr "smallrye.jwt.keystore.provider"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property can be used to customize a `KeyStore` provider if `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合に、 `KeyStore` プロバイダをカスタマイズするために使用できます。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.password"
msgstr "smallrye.jwt.keystore.password"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "Keystore password. If `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file then this property has be set."
msgstr "キーストアのパスワード。 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合、このプロパティを設定する必要があります。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.encrypt.key.alias"
msgstr "smallrye.jwt.keystore.encrypt.key.alias"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property has to be set to identify a public encryption key which will be extracted from `KeyStore` from a matching certificate if `smallrye.jwt.encrypt.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合、一致する証明書によって `KeyStore` から抽出される公開暗号鍵を特定するために設定される必要があります。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.sign.key.alias"
msgstr "smallrye.jwt.keystore.sign.key.alias"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property has to be set to identify a private signing key if `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指している場合、秘密署名鍵を特定するために設定する必要があります。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "smallrye.jwt.keystore.sign.key.password"
msgstr "smallrye.jwt.keystore.sign.key.password"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "This property may be set if a private signing key's password in `KeyStore` is different to `smallrye.jwt.keystore.password` when `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指しているときに、`KeyStore` にある秘密署名鍵のパスワードが `smallrye.jwt.keystore.password` と異なる場合に設定される場合があります。"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-jwt.adoc[Using SmallRye JWT to Protect Service Applications]"
msgstr "xref:security-jwt.adoc[SmallRye JWT を使用してサービスアプリケーションを保護する]"

#: _versions/3.15/guides/security-jwt-build.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

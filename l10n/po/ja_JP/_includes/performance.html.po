# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2025-03-06 15:16+0900\n"
"PO-Revision-Date: 2025-03-06 15:57+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. type: Attribute 'alt' of: <div><div><div><img><img>
#: upstream/_includes/performance.html:4 upstream/_includes/performance.html:5
msgid "Container image"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/performance.html:8
msgid "Quarkus is engineered to be efficient by using build-time optimizations and a reactive core to achieve fast startup times, high throughput, low response latency, reduced memory footprint, and minimal resource consumption. As a result, Quarkus is fast... real fast."
msgstr ""

#. type: Content of: <div><div><div><h2>
#: upstream/_includes/performance.html:11
msgid "Starting fast by doing less: the build-time principle"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/performance.html:14
msgid "Quarkus redefines how Java applications are built and executed by shifting much of the work to the build phase ensuring that the costly work happens only once — during the build process — not at every startup. It results in faster, smaller, and more resource-efficient Java applications on both GraalVM native images and traditional JVM deployments."
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/performance.html:15
msgid "For example, at build time, Quarkus reads part of the application configuration, scans the classpath for annotated classes, and constructs a model of the application. By doing this early, Quarkus has enough information to eliminate unnecessary components and compute the exact startup instructions required."
msgstr ""

#. type: Attribute 'alt' of: <div><div><div><img><img>
#: upstream/_includes/performance.html:18
#: upstream/_includes/performance.html:19
msgid "Quarkus Build Time Principle"
msgstr ""

#. type: Content of: <div><div><div><p>
#: upstream/_includes/performance.html:22
msgid "This build-time optimization offers several key benefits:"
msgstr ""

#. type: Content of: <div><div><div><ol><li>
#: upstream/_includes/performance.html:24
msgid "<strong>Reduced startup time:</strong> Quarkus performs most of the heavy work at runtime, significantly cutting startup time and allowing the app to reach peak performance faster."
msgstr ""

#. type: Content of: <div><div><div><ol><li>
#: upstream/_includes/performance.html:25
msgid "<strong>Lower memory consumption:</strong> By minimizing allocations and class loading, Quarkus reduces memory usage. Replacing reflection with build-time bytecode generation further lowers the JVM's runtime workload."
msgstr ""

#. type: Content of: <div><div><div><ol><li>
#: upstream/_includes/performance.html:26
msgid "<strong>Better latency and improved throughput:</strong> Quarkus generates highly optimized code at build time and prunes unnecessary classes and methods. For instance, it weaves layers of indirection together, enabling better JIT optimizations. These improvements result in faster code and better latency."
msgstr ""

#. type: Content of: <div><div><h2>
#: upstream/_includes/performance.html:34
msgid "High concurrency without the headaches: the reactive core"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:35
msgid "Quarkus is built on reactive principles, using an efficient asynchronous, non-blocking engine based on Netty and Eclipse Vert.x. It employs a few event loops instead of a large thread pool, reducing resource usage and improving response times by optimizing for hardware behavior."
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:36
msgid "Reactive underneath does not mean you must write reactive code. Quarkus offers three development models:"
msgstr ""

#. type: Content of: <div><div><ol><li>
#: upstream/_includes/performance.html:38
msgid "<strong>Imperative model:</strong> A traditional synchronous approach with faster execution due to an optimized I/O layer, ideal for lower concurrency. High concurrency increases memory use."
msgstr ""

#. type: Content of: <div><div><ol><li>
#: upstream/_includes/performance.html:39
msgid "<strong>Reactive model:</strong> Enables high concurrency with minimal resources using asynchronous, non-blocking code, but is more complex to implement and debug."
msgstr ""

#. type: Content of: <div><div><ol><li>
#: upstream/_includes/performance.html:40
msgid "<strong>Virtual threads (JDK 21+):</strong> Combines the benefits of imperative and reactive models, allowing imperative code to run on lightweight virtual threads for high concurrency with low memory overhead, though some limitations remain."
msgstr ""

#. type: Content of: <div><div><h2>
#: upstream/_includes/performance.html:47
msgid "What happens when the build time principle and the reactive core are combined?"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:48
msgid "The combination of the build time optimization and reactive core makes Quarkus a highly efficient framework, excelling in several key areas:"
msgstr ""

#. type: Attribute 'alt' of: <div><div><img><img>
#: upstream/_includes/performance.html:51
#: upstream/_includes/performance.html:52
msgid "Memory icon"
msgstr ""

#. type: Content of: <div><div><h3>
#: upstream/_includes/performance.html:55
msgid "Reduced Memory"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:56
msgid "The build-time principle minimizes runtime memory use by eliminating unnecessary components and precomputing at build time, reducing class loading and memory allocations. The reactive core further cuts memory usage by using a few event loops instead of a large thread pool, allowing the application to handle higher loads with a smaller memory footprint and enabling high deployment density."
msgstr ""

#. type: Attribute 'alt' of: <div><div><img><img>
#: upstream/_includes/performance.html:59
#: upstream/_includes/performance.html:60
msgid "Startup icon"
msgstr ""

#. type: Content of: <div><div><h3>
#: upstream/_includes/performance.html:63
msgid "Fast Startup Time"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:64
msgid "Thanks to the build-time optimizations, most of the application’s heavy lifting, such as classpath scanning, configuration loading, and dependency injection setup, happens before the application even starts. This significantly reduces the time it takes to get the application up and ready to serve. The reactive core contributes to this by ensuring that I/O operations are handled with minimal blocking, further reducing the startup latency.  The efficient startup process means the application can respond to new load conditions more quickly. This combination supports implementing LightSwitchOps patterns, enabling elasticity while controlling costs."
msgstr ""

#. type: Attribute 'alt' of: <div><div><img><img>
#: upstream/_includes/performance.html:67
#: upstream/_includes/performance.html:68
msgid "Throughput icon"
msgstr ""

#. type: Content of: <div><div><h3>
#: upstream/_includes/performance.html:71
msgid "High Throughput"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:72
msgid "Build-time optimizations ensure tasks like classpath scanning, configuration loading, and dependency injection are completed before startup, greatly reducing startup time. This efficient startup enables quicker responses to load changes and supports LightSwitchOps patterns for cost-effective elasticity. The reactive core minimizes blocking in I/O operations, further lowering latency and allowing handling a large number of concurrent tasks."
msgstr ""

#. type: Attribute 'alt' of: <div><div><img><img>
#: upstream/_includes/performance.html:75
#: upstream/_includes/performance.html:76
msgid "Disk footprint icon"
msgstr ""

#. type: Content of: <div><div><h3>
#: upstream/_includes/performance.html:79
msgid "Optimized Resource Consumption"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:80
msgid "The build-time principle and reactive core optimize CPU, memory, and system resource use, enabling high performance with fewer resources. This lowers operational costs in cloud environments and offers sustainability benefits through reduced resource consumption."
msgstr ""

#. type: Content of: <div><div><h2>
#: upstream/_includes/performance.html:85
msgid "Continuously Measuring, Continuously Improving"
msgstr ""

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:86
msgid "Quarkus is dedicated to continuously improving performance, especially for code running on the critical execution (hot) path. Through ongoing optimizations, Quarkus ensures that every instruction and allocated byte matters, making it one of the most efficient frameworks available for developing <a href=\"https://www.techempower.com/benchmarks/#hw=ph&test=fortune&section=data-r22&c=e&f=0-0-0-0-0-0-0-0-0-2-4zsow-0-0-0-0&l=5181v-6bl\">high-performance, cloud-ready applications.</a>"
msgstr ""

#. type: Content of: <div><div><h2>
#: upstream/_includes/performance.html:87
msgid "Related Links"
msgstr "関連リンク"

#. type: Content of: <div><div><p>
#: upstream/_includes/performance.html:88
msgid "<a href=\"https://quarkus.io/blog/reactive-crud-performance-case-study/\">\"Reactive CRUD Performance: A Case Study\" Blog Post</a>"
msgstr ""

#. type: Content of: <div><div><p><br>
#: upstream/_includes/performance.html:89
msgid "<a href=\"https://quarkus.io/guides/performance-measure\">\"Measuring Performance\" guide</a>"
msgstr ""

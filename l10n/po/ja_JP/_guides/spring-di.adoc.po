msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/spring-di.adoc
#, no-wrap
msgid "Quarkus Extension for Spring DI API"
msgstr "Spring DI APIのためのQuarkusエクステンション"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr "インジェクションにはCDIアノテーションを使用することが推奨されていますが、Quarkusでは、 `spring-di` エクステンションという形で、Springのディペンデンシーインジェクションのための互換レイヤーを提供しています。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr "このガイドでは、Spring Frameworkに含まれる有名なDependency InjectionアノテーションをQuarkusアプリケーションでどのように活用するかを説明します。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/spring-di.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "The solution is located in the `spring-di-quickstart` link:{quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr "ソリューションは `spring-di-quickstart` link:{quickstarts-tree-url}/spring-di-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します:"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "This command generates a project which imports the `spring-di` extension."
msgstr "このコマンドは、プロジェクトを生成し、 `spring-di` エクステンションをインポートします。"

#: _guides/spring-di.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `spring-di` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、 `spring-di` エクステンションをプロジェクトに追加することができます。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、ビルドファイルに以下が追加されます:"

#. type: Block title
#: _guides/spring-di.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/spring-di.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Add beans using Spring annotations"
msgstr "Springアノテーションを使用したBeanの追加"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr "それでは、さまざまなSpringアノテーションを使って、いくつかのBeanを作成してみましょう。"

#: _guides/spring-di.adoc
msgid ""
"First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.\n"
"Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr "まず、 `StringFunction` インターフェースを作成します。これは、いくつかのBeanがこれから実装し、後に別のBeanに注入されます。 `src/main/java/org/acme/spring/di/StringFunction.java` ファイルを作成し、以下の内容を設定します:"

#: _guides/spring-di.adoc
msgid ""
"With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.\n"
"It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.\n"
"Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr "インターフェイスが整ったところで、SpringのJava Configスタイルを使ってBeanを定義する `AppConfiguration` クラスを追加します。これを使って、パラメータとして渡されたテキストを大文字にする `StringFunction` Beanを作成します。以下の内容で `src/main/java/org/acme/spring/di/AppConfiguration.java` ファイルを作成します:"

#: _guides/spring-di.adoc
msgid ""
"As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.\n"
"In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr "Springの開発者であれば、追加のBeanをスキャンする特定のパッケージを定義するために、 `@ComponentScan` アノテーションを追加したいと思うかもしれません。しかし、Quarkusは可視性の境界がない `annotated` モードでのみ xref:cdi-reference.adoc#bean_discovery[Beanディスカバリー] を行うため、 `@ComponentScan` は全く必要ないことに注意してください。さらに、QuarkusでのBeanディスカバリーはビルド時に行われることに注意してください。同じように、QuarkusはSpringの `@Import` アノテーションをサポートしていません。"

#: _guides/spring-di.adoc
msgid ""
"Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.\n"
"This bean will effectively be a no-op bean that simply returns the input as is.\n"
"Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr "次に、Springのステレオタイプアノテーションスタイルを使用して、 `StringFunction` を実装する別のBeanを定義します。このBeanは、事実上、入力をそのまま返すだけのno-op beanとなります。 `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` ファイルを作成し、以下の内容を設定します:"

#: _guides/spring-di.adoc
msgid ""
"Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.\n"
"To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr "Quarkusは、Springの `@Value` アノテーションを使用して設定値を注入するサポートも提供しています。動作を確認するには、まず、以下の内容で `src/main/resources/application.properties` を編集します:"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr "次に、 `src/main/java/org/acme/spring/di/MessageProducer.java` に以下の内容で新しいSpring Beanを作成します:"

#: _guides/spring-di.adoc
msgid ""
"The final bean we will create ties together all the previous beans.\n"
"Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr "最後に作成するBeanは、これまでのBeanをすべて結びつけるものです。 `src/main/java/org/acme/spring/di/GreeterBean.java` ファイルを作成し、以下の内容をコピーします:"

#: _guides/spring-di.adoc
msgid ""
"In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).\n"
"Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr "上のコードでは、フィールドインジェクションとコンストラクタインジェクションの両方が使用されていることがわかります（コンストラクタインジェクションでは、コンストラクタが 1 つなので、 `@Autowired` のアノテーションは必要ないことに注意してください）。さらに、 `suffix` の `@Value` アノテーションには、デフォルト値も定義されています。この場合、 `application.properties` で `greeting.suffix` を定義していないので、これが使用されます。"

#. type: Title ===
#: _guides/spring-di.adoc
#, no-wrap
msgid "Create the Jakarta REST resource"
msgstr "Jakarta RESTリソースの作成"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Create the `src/main/java/org/acme/spring/di/GreeterResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/spring/di/GreeterResource.java` のファイルを以下の内容で作成します:"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#: _guides/spring-di.adoc
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/spring/di/GreetingResourceTest.java` ファイルを編集し、 `testHelloEndpoint` メソッドの内容を次のように変更します。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Run the application with:"
msgstr "以下のコマンドでアプリケーションを実行します:"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Open your browser to http://localhost:8080/greeting."
msgstr "ブラウザで http://localhost:8080/greeting を開きます。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "The result should be: `HELLO WORLD!`."
msgstr "結果は次のようになります： `HELLO WORLD!`."

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Run the application as a native"
msgstr "アプリケーションをネイティブバイナリーとして実行"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr "もちろん、 xref:building-native-image.adoc[こ] のガイドと同様の手順でネイティブイメージを作成することもできます。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Important Technical Note"
msgstr "重要な技術的注意点"

#: _guides/spring-di.adoc
msgid ""
"Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.\n"
"Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.\n"
"What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover, Spring infrastructure\n"
"classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.\n"
"Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1] specification. If you want to learn more about it, we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide]\n"
"The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr ""
"QuarkusのSpringサポートは、Springアプリケーションコンテキストを開始せず、Springインフラストラクチャクラスも実行しないことに注意してください。\n"
"Springのクラスとアノテーションは、メタデータの読み取りにのみ使用され、ユーザーコードのメソッドの戻り値の型やパラメータの型として使用されます。\n"
"これはエンドユーザーにとって、任意のSpringライブラリを追加しても効果がないことを意味します。\n"
"さらに、Springのインフラクラス(例えば `org.springframework.beans.factory.config.BeanPostProcessor` 、 `org.springframework.context.ApplicationContext` )は実行されません。\n"
"依存性注入に関しては、Quarkusは link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1] 仕様に基づいた依存性注入メカニズム（ArCと呼ばれる）を使用しています。 \n"
"xref:cdi.adoc[CDIについて] 詳しく知りたい場合は、 xref:cdi.adoc[QuarkusのCDI入門] と xref:cdi-reference.adoc#arc-configuration-reference[CDIリファレンスガイド] を読むことをお勧めします。 \n"
"Spring Bootのさまざまなテスト機能は、Quarkusではサポートされていません。テストについては、 xref:getting-started-testing.adoc[Quarkusのテストガイド] を参照してください。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Some known limitations:"
msgstr "いくつかの既知の制約があります:"

#: _guides/spring-di.adoc
msgid ""
"In case of ambiguity, Spring uses a fallback match of the bean name against the injection point field name or parameter name.\n"
"This is not supported, thus `@Named` annotation needs to be used to explicitly solve any ambiguity."
msgstr "曖昧な場合、SpringはBean名と注入ポイントのフィールド名やパラメータ名の照合を行います。これはサポートされていないので、 `@Named` アノテーションを使用して曖昧さを明示的に解決する必要があります。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Injecting all beans of a particular type is limited to `List<Bean>`. Injecting `Set<Bean>` or `Map<String, Bean>` is not supported."
msgstr "特定のタイプのすべての Bean を注入することは、 `List<Bean>` に限定されます。 `Set<Bean>` や `Map<String, Bean>` を注入することは、サポートされていません。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Optional injection using `@Autowired(required=false)` is not supported. Use `javax.enterprise.inject.Instance` and then test `Instance.isResolvable()`."
msgstr "`@Autowired(required=false)` を使用したオプショナルな注入はサポートされていません。 `javax.enterprise.inject.Instance` を使用し、その後 `Instance.isResolvable()` をテストしてください。"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "`@Conditional` is ignored, since dependency injection gets resolved at build time. An alternative is to use xref:cdi-reference.adoc#enable_build_profile[conditional build profiles]."
msgstr "`@Conditional` は無視されます。依存性注入はビルド時に解決されるからです。代替案としては、 xref:cdi-reference.adoc#enable_build_profile[条件付きビルドプロファイル] を使用する方法があります。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Conversion Table"
msgstr "変換テーブル"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr "以下の表は、Spring DIのアノテーションをCDIおよび/またはMicroProfileのアノテーションに変換する方法を示しています。"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "Spring"
msgstr "Spring"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "CDI / MicroProfile"
msgstr "CDI / MicroProfile"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "Comments"
msgstr "Comments"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Autowired"
msgstr "@Autowired"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Inject"
msgstr "@Inject"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "If the type is `java.util.List`, the `io.quarkus.arc.All` qualifier is added."
msgstr "型が `java.util.List` の場合、 `io.quarkus.arc.All` の修飾子が付加されます。"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Qualifier"
msgstr "@Qualifier"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Named"
msgstr "@Named"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Value"
msgstr "@Value"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@ConfigProperty"
msgstr "@ConfigProperty"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr "ConfigurationProperty は、@Value とは違って式言語をサポートしていませんが、典型的な使用例をはるかに簡単に扱うことができます"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Component"
msgstr "@Component"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Singleton"
msgstr "@Singleton"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "By default Spring stereotype annotations are singleton beans"
msgstr "デフォルトでは、SpringのステレオタイプアノテーションはシングルトンBeanです"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Service"
msgstr "@Service"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Repository"
msgstr "@Repository"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Configuration"
msgstr "@Configuration"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@ApplicationScoped"
msgstr "@ApplicationScoped"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr "CDIでは、プロデューサBeanはアプリケーションスコープに限定されず、@Singletonや@Dependentにすることもできます"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Bean"
msgstr "@Bean"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Produces"
msgstr "@Produces"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Scope"
msgstr "@Scope"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr "CDI アノテーションへの 1 対 1 のマッピングはありません。Scope の値に応じて、@Singleton、@ApplicationScoped、@SessionScoped、@RequestScoped、@Dependent のいずれかが使用されます"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@ComponentScan"
msgstr "@ComponentScan"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr "CDIアノテーションへの1対1のマッピングはありません。Quarkusはビルド時にすべてのクラスパスのスキャンを行うため、Quarkusでは使用されません。"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "@Import"
msgstr "@Import"

#. type: Table
#: _guides/spring-di.adoc
#, no-wrap
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr "CDIアノテーションとの1対1のマッピングはありません。"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "Spring DI Configuration Reference"
msgstr "Spring DI 設定リファレンス"

#: _guides/spring-di.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Title ==
#: _guides/spring-di.adoc
#, no-wrap
msgid "More Spring guides"
msgstr "その他のSpringガイド"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr "Quarkusには、より多くのSpring互換機能があります。詳細については、以下のガイドを参照してください:"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr "xref:spring-web.adoc[Quarkus - Spring Web のエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr "xref:spring-data-jpa.adoc[Quarkus - Spring Data JPAのエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr "xref:spring-data-rest.adoc[Quarkus - Spring Data RESTのエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr "xref:spring-security.adoc[Quarkus - Spring Securityのエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr "xref:spring-cloud-config-client.adoc[Quarkus - Spring Cloud Config Serverからプロパティを読み込む]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr "xref:spring-boot-properties.adoc[Quarkus - Spring Boot プロパティーのエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr "xref:spring-cache.adoc[Quarkus - Spring Cache のエクステンション]"

#. type: Plain text
#: _guides/spring-di.adoc
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr "xref:spring-scheduled.adoc[Quarkus - Spring Scheduled のエクステンション]"

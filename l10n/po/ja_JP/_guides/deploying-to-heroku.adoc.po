msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Deploying to Heroku"
msgstr "Heroku へのデプロイ"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "In this guide you will learn how to deploy a Quarkus based web application as a web-dyno to Heroku."
msgstr "このガイドでは、Quarkus ベースの Web アプリケーションを web-dyno として Heroku にデプロイする方法を説明します。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "This guide covers:"
msgstr "このガイドでは以下をカバーしています。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Update Quarkus HTTP Port"
msgstr "Quarkus の HTTP ポートの更新"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Install the Heroku CLI"
msgstr "Heroku CLI のインストール"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Deploy the application to Heroku"
msgstr "アプリケーションの Heroku へのデプロイ"

#: _guides/deploying-to-heroku.adoc
msgid "Deploy the application as container image to Heroku"
msgstr "アプリケーションのコンテナーイメージとしての Heroku へのデプロイ"

#: _guides/deploying-to-heroku.adoc
msgid "Using Docker"
msgstr "Docker の使用"

#: _guides/deploying-to-heroku.adoc
msgid "Using Podman"
msgstr "Podman の使用"

#: _guides/deploying-to-heroku.adoc
msgid "Deploy the native application as container image to Heroku"
msgstr "ネイティブアプリケーションのコンテナーイメージとしての Heroku へのデプロイ"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "要件"

#: _guides/deploying-to-heroku.adoc
msgid "https://www.heroku.com/[A Heroku Account]. You need at least an Eco account to deploy an application."
msgstr "https://www.heroku.com/[Heroku アカウント]。アプリケーションをデプロイするには、少なくとも Eco アカウントが必要です。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "https://devcenter.heroku.com/articles/heroku-cli[Heroku CLI installed]"
msgstr "link:https://devcenter.heroku.com/articles/heroku-cli[Heroku CLIのインストール]"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#: _guides/deploying-to-heroku.adoc
msgid ""
"Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.\n"
"It supports several languages like Java, Ruby, Node.js, Scala, Clojure, Python, PHP, and Go.\n"
"In addition, it offers a container registry that can be used to deploy prebuilt container images."
msgstr ""
"Heroku は開発者がアプリケーションの構築、実行、運用をすべてクラウド上で行うことができるPaaS (Platform as a Service)、PHP、Go などの言語をサポートしています。\n"
"さらに、あらかじめ構築されたコンテナーイメージをデプロイするためのコンテナーレジストリーも提供しています。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Heroku can be used in different ways to run a Quarkus application:"
msgstr "Herokuは、Quarkusのアプリケーションを実行するためにさまざまな方法で使用できます。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "As a plain Java program running in a container defined by Heroku's environment"
msgstr "Heroku の環境で定義されたコンテナー内で動作するプレーンな Java プログラムとして"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "As a containerized Java program running in a container defined by the Quarkus build process"
msgstr "Quarkus のビルドプロセスで定義されたコンテナー内で実行されるコンテナー化された Java プログラムとして"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "As a containerized native program running in a container defined by the Quarkus build process"
msgstr "Quarkus のビルドプロセスで定義されたコンテナー内で実行されるコンテナー化されたネイティブプログラムとして"

#: _guides/deploying-to-heroku.adoc
msgid ""
"All three approaches need to be aware of the port that Heroku assigns to it to handle traffic.\n"
"Luckily, there's a dynamic configuration property for it."
msgstr ""
"この 3 つのアプローチはいずれも、トラフィックを処理するために Heroku が割り当てるポートを意識する必要があります。\n"
"幸運なことに、そのための動的な設定プロパティーがあります。"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Common project setup"
msgstr "プロジェクトの共通設定"

#: _guides/deploying-to-heroku.adoc
msgid "This guide will take as input a simple application created with the Quarkus tooling:"
msgstr "このガイドでは、Quarkus ツールを使用して作成されたシンプルなアプリケーションを入力として取り扱います。"

#: _guides/deploying-to-heroku.adoc
msgid "This command will create a new REST application in the `getting-started-with-heroku` directory."
msgstr "このコマンドは、`getting-started-with-heroku` ディレクトリーに新しい REST アプリケーションを作成します。"

#: _guides/deploying-to-heroku.adoc
msgid "Let's make this application a Git repository:"
msgstr "このアプリケーションを Git リポジトリーにしてみましょう。"

#: _guides/deploying-to-heroku.adoc
msgid "Change to the application directory: `cd getting-started-with-heroku`."
msgstr "アプリケーションディレクトリーに移動します: `cd getting-started-with-heroku`"

#: _guides/deploying-to-heroku.adoc
msgid "Initialize a new Git repository: `git init -b main`."
msgstr "新しい Git リポジトリーを初期化します: `git init -b main`"

#: _guides/deploying-to-heroku.adoc
msgid "Add all files to the repository: `git add .`."
msgstr "すべてのファイルをリポジトリーに追加します: `git add .`"

#: _guides/deploying-to-heroku.adoc
msgid "Commit the files: `git commit -a -m 'Initial copy of getting-started'`."
msgstr "ファイルをコミットします: `git commit -a -m 'Initial copy of getting-started'`"

#: _guides/deploying-to-heroku.adoc
msgid ""
"Heroku can react on changes in your repository, run CI and redeploy your application when your code changes.\n"
"Therefore, we start with a valid repository already."
msgstr ""
"Heroku ではリポジトリーの変更を起点に CI を実行し、コードが変更されたときにアプリケーションを再デプロイすることができます。\n"
"したがって、すでに有効なリポジトリーがある前提で説明します。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Also, make sure your Heroku CLI is working:"
msgstr "また、Heroku CLI が動作していることを確認してください。"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Prepare the Quarkus HTTP Port"
msgstr "Quarkus の HTTP ポートの準備"

#: _guides/deploying-to-heroku.adoc
msgid ""
"Heroku picks a random port and assigns it to the container that is eventually running your Quarkus application.\n"
"That port is available as an environment variable under `$PORT`.\n"
"The easiest way to make Quarkus in all deployment scenarios aware of it is using the following configuration:"
msgstr ""
"Heroku はランダムにポートを選択し、最終的に Quarkus アプリケーションを実行するコンテナーに割り当てます。\n"
"このポートは、`$PORT` の環境変数として利用できます。\n"
"すべてのデプロイメントシナリオで Quarkus にそれを認識させる最も簡単な方法は、以下の設定を使用することです。"

#: _guides/deploying-to-heroku.adoc
msgid ""
"This reads as: \"Listen on `$PORT` if this is a defined variable, otherwise listen on 8080 as usual.\"\n"
"Run the following to add this to your `application.properties`:"
msgstr ""
"これは、「定義済みの変数の場合は `$PORT` をリッスンし、それ以外の場合は通常通り 8080 をリッスンする」と読み取れます。\n"
"以下を実行して、これを `application.properties` に追加します。"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Deploy the repository and build on Heroku"
msgstr "リポジトリのデプロイとHerokuでのビルド"

#: _guides/deploying-to-heroku.adoc
msgid ""
"The first variant uses the Quarkus Maven build to create the _quarkus-app_ application structure containing the runnable \"fast-jar\" as well as all libraries needed\n"
"inside Heroku's build infrastructure and then deploying that result, the other one uses a local build process to create an optimized container."
msgstr ""
"1 つ目は、Quarkus の Maven ビルドを使用して、実行可能な \"fast-jar \"と Heroku のビルドインフラに必要なすべてのライブラリーを含む _quarkus-app_ アプリケーション構造を作成し、\n"
"その結果をデプロイするもので、もう 1 つはローカルビルドプロセスを使用して最適化されたコンテナーを作成するものです。"

#: _guides/deploying-to-heroku.adoc
msgid "For the first variant, two additional files are needed in your application's root directory:"
msgstr "最初のバリエーションでは、アプリケーションのルートディレクトリに 2 つの追加ファイルが必要です："

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "`system.properties` to configure the Java version"
msgstr "Javaのバージョンを設定する為に `system.properties`"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "`Procfile` to configure how Heroku starts your application"
msgstr "Herokuがアプリケーションを開始する方法を設定するために `Procfile`"

#: _guides/deploying-to-heroku.adoc
msgid "Quarkus needs JDK 17, so we specify that first:"
msgstr "QuarkusにはJDK 17が必要なので、まずそれを指定します："

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "We will deploy a web application so we need to configure the type `web` in the Heroku `Procfile` like this:"
msgstr "今回はWebアプリケーションをデプロイするので、Heroku `Procfile` でタイプ `web` を以下のように設定する必要があります。"

#: _guides/deploying-to-heroku.adoc
msgid "Your application should already be runnable via `heroku local web` from the repository root directory. You need to have run `mvn package` before to create the runnable jar for this to succeed."
msgstr "アプリケーションは、リポジトリーの root ディレクトリーから `heroku local web` 経由ですでに実行可能である必要があります。これを成功させるには、事前に `mvn package` を実行して実行可能な JAR ファイルを作成しておく必要があります。"

#: _guides/deploying-to-heroku.adoc
msgid "Now let's create an application in your account and deploy that repository to it:"
msgstr "続いて、アカウントでアプリケーションを作成し、そのリポジトリーをそこにデプロイしてみましょう。"

#: _guides/deploying-to-heroku.adoc
msgid "This will create a remote repository in your Heroku account, and it should have also added a heroku remote url to your local repository which you can view using `git remote -v`:"
msgstr "これにより、Heroku アカウントにリモートリポジトリーが作成され、ローカルリポジトリーに heroku リモート URL も追加されます。これは、`git remote -v` を使用して表示できます。"

#: _guides/deploying-to-heroku.adoc
msgid "Now you can push your application to Heroku and open it in your browser."
msgstr "これで、アプリケーションを Heroku にプッシュし、ブラウザーで開くことができます。"

#: _guides/deploying-to-heroku.adoc
msgid "The application will have a generated URL and the terminal should output that. `heroku open hello` opens your default browser to access your new application using the '/hello' context. That page should output the text 'hello'."
msgstr "アプリケーションには生成された URL があり、ターミナルにそれが出力されます。`heroku open hello` は、'/hello' コンテキストを使用して新しいアプリケーションにアクセスするためにデフォルトのブラウザーを開きます。そのページには 'hello' というテキストが出力されます。"

#: _guides/deploying-to-heroku.adoc
msgid "To access the REST endpoint via curl, get the app URL from the heroku info command:"
msgstr "curl 経由で REST エンドポイントにアクセスするには、heroku info コマンドからアプリケーション URL を取得します。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "Of course, you can use the Heroku CLI to connect this repo to your GitHub account, too, but this is out of scope for this guide."
msgstr "もちろん、Heroku CLIを使ってこのレポジトリをGitHubアカウントに接続することもできますが、これはこのガイドでは対象外です。"

#. type: Title ==
#: _guides/deploying-to-heroku.adoc
#, no-wrap
msgid "Deploy as container"
msgstr "コンテナーとしてデプロイ"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "The advantage of pushing a whole container is that we are in complete control over its content and maybe even choose to deploy a container with a native executable running on GraalVM."
msgstr "コンテナー全体をプッシュすることの利点は、その内容を完全にコントロールできることであり、GraalVM 上で動作するネイティブ実行可能ファイルを持つコンテナーをデプロイすることも可能です。"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "First, login to Heroku's container registry:"
msgstr "まず、Heroku のコンテナーレジストリーにログインします。"

#: _guides/deploying-to-heroku.adoc
msgid "We need to add an extension to our project to add the capability to build container images:"
msgstr "コンテナーイメージをビルドする機能を追加するには、プロジェクトにエクステンションを追加する必要があります。"

#: _guides/deploying-to-heroku.adoc
msgid "Then, let's commit this change:"
msgstr "次に、この変更をコミットします。"

#: _guides/deploying-to-heroku.adoc
msgid ""
"The image we are going to build needs to be named accordingly to work with Heroku's registry and deployment.\n"
"We get the generated name via `heroku info` and pass it on to the (local) build:"
msgstr "これからビルドするイメージは、Heroku のレジストリーやデプロイメントと連携するために、適切な名前を付ける必要があります。`heroku info` を通して生成された名前を取得し、それを (ローカル) ビルドに渡します。"

#: _guides/deploying-to-heroku.adoc
msgid "Push and release the image"
msgstr "イメージをプッシュしてリリースする"

#: _guides/deploying-to-heroku.adoc
msgid "You can now push the image and release it."
msgstr "これで、イメージをプッシュしてリリースできるようになりました。"

#: _guides/deploying-to-heroku.adoc
msgid ""
"The initial push is rather big, as all layers of the image need to be transferred.\n"
"The following pushes will be smaller."
msgstr ""
"イメージの全レイヤーを転送する必要があるため、最初のプッシュはかなり大きくなります。\n"
"それ以降のプッシュは小さくなります。"

#: _guides/deploying-to-heroku.adoc
msgid "Pushing through Docker"
msgstr "Dockerによるプッシュ"

#: _guides/deploying-to-heroku.adoc
msgid "With Docker installed, these steps are simple:"
msgstr "Dockerがインストールされていれば、これらの手順は簡単です："

#: _guides/deploying-to-heroku.adoc
msgid "Pushing through Podman"
msgstr "Podmanを通じたプッシュ"

#: _guides/deploying-to-heroku.adoc
msgid "When you want to use Podman as a drop-in-replacement for Docker, you will have some problems because the Heroku CLI depends on Docker and doesn't support the OCI format. But there are possible solutions for these problems."
msgstr "Podman を Docker の代替品として使用したい場合、Heroku CLI は Docker に依存しており、OCI 形式をサポートしていないため、いくつかの問題が発生します。ただし、これらの問題には解決策があります。"

#: _guides/deploying-to-heroku.adoc
msgid "Cannot find docker, please ensure docker is installed."
msgstr "Cannot find docker, please ensure docker is installed."

#: _guides/deploying-to-heroku.adoc
msgid "The problem is obviously that the heroku-cli can’t find docker. This is quite easy to resolve, because the podman cli is docker-compatible. We just need to create a symlink from podman to docker:"
msgstr "問題は、明らかに heroku-cli が docker を見つけられないことです。podman cli は docker と互換性があるため、これは簡単に解決できます。podman から docker へのシンボリックリンクを作成するだけです。"

#: _guides/deploying-to-heroku.adoc
msgid "Error writing manifest: Error uploading manifest latest to registry.heroku.com/$APP_NAME/web: unsupported"
msgstr "Error writing manifest: Error uploading manifest latest to registry.heroku.com/$APP_NAME/web: unsupported"

#: _guides/deploying-to-heroku.adoc
msgid "Instead of doing a normal podman push (OCI format) we must use a workaround in order to push and release our app through Podman and the Heroku CLI in the desired format (v2s2 - Docker Image Manifest Version 2, Schema 2). Also https://github.com/containers/skopeo[skopeo] is needed."
msgstr "通常の podman push (OCI 形式) を実行する代わりに、回避策を使用して、Podman と Heroku CLI を介してアプリケーションを目的の形式 (v2s2 - Docker Image Manifest Version 2、Schema 2) でプッシュおよびリリースする必要があります。また、https://github.com/containers/skopeo[skopeo] も必要です。"

#: _guides/deploying-to-heroku.adoc
msgid "https://urhengulas.github.io/blog/podman_heroku.html[Source of solutions and workarounds]"
msgstr "https://urhengulas.github.io/blog/podman_heroku.html[解決策と回避策のソース]"

#: _guides/deploying-to-heroku.adoc
msgid "Check the logs"
msgstr "ログの確認"

#. type: Plain text
#: _guides/deploying-to-heroku.adoc
msgid "You can and should check the logs to see if your application is now indeed running from the container:"
msgstr "アプリケーションが実際にコンテナーから実行されているかどうか、ログを確認することができますし、確認すべきです。"

#: _guides/deploying-to-heroku.adoc
msgid "Deploy as native application inside a container"
msgstr "コンテナー内にネイティブアプリケーションとしてデプロイ"

#: _guides/deploying-to-heroku.adoc
msgid ""
"The biggest advantage we take when deploying our app as a container is to deploy a container with the natively compiled application.\n"
"Why? Because Heroku will stop or sleep the application when there's no incoming traffic.\n"
"A native application will wake up much faster from its sleep."
msgstr "アプリケーションをコンテナーとしてデプロイする際の最大のメリットは、ネイティブにコンパイルされたアプリケーションを使ってコンテナーをデプロイすることです。その理由は、Heroku は着信トラフィックがないときにアプリケーションを停止またはスリープさせるからです。ネイティブアプリケーションは、スリープ状態からより早く目覚めます。"

#: _guides/deploying-to-heroku.adoc
msgid ""
"The process is pretty much the same.\n"
"We opt in to compiling a native image inside a local container, so that we don't have to deal with installing GraalVM locally:"
msgstr ""
"プロセスはほとんど同じです。\n"
"ここでは、ローカルコンテナー内でネイティブイメージをコンパイルすることを選択し、ローカルに GraalVM をインストールする必要がないようにしています。"

#: _guides/deploying-to-heroku.adoc
msgid "After that, push and release again using Docker or Podman (see above) and check the logs."
msgstr "その後、Docker または Podman (上記参照) を使用して再度プッシュおよびリリースし、ログを確認します。"
